# Generated from src/parsers/Java20Parser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,126,2970,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,1,0,1,0,1,0,1,1,1,1,3,1,504,8,1,1,2,1,2,
        3,2,508,8,2,1,3,1,3,3,3,512,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,5,8,523,8,8,10,8,12,8,526,9,8,1,8,1,8,3,8,530,8,8,1,9,1,9,3,
        9,534,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,3,12,543,8,12,1,13,
        1,13,5,13,547,8,13,10,13,12,13,550,9,13,1,13,1,13,3,13,554,8,13,
        1,13,3,13,557,8,13,1,14,1,14,1,14,3,14,562,8,14,1,14,5,14,565,8,
        14,10,14,12,14,568,9,14,1,14,1,14,3,14,572,8,14,1,14,3,14,575,8,
        14,1,15,5,15,578,8,15,10,15,12,15,581,9,15,1,15,1,15,3,15,585,8,
        15,1,15,1,15,1,15,5,15,590,8,15,10,15,12,15,593,9,15,1,15,1,15,3,
        15,597,8,15,1,15,1,15,1,15,5,15,602,8,15,10,15,12,15,605,9,15,1,
        15,1,15,3,15,609,8,15,3,15,611,8,15,1,16,1,16,1,17,5,17,616,8,17,
        10,17,12,17,619,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,632,8,18,1,19,5,19,635,8,19,10,19,12,19,638,9,19,
        1,19,1,19,1,19,5,19,643,8,19,10,19,12,19,646,9,19,1,19,1,19,5,19,
        650,8,19,10,19,12,19,653,9,19,1,20,5,20,656,8,20,10,20,12,20,659,
        9,20,1,20,1,20,3,20,663,8,20,1,21,1,21,1,22,1,22,1,22,1,22,5,22,
        671,8,22,10,22,12,22,674,9,22,3,22,676,8,22,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,5,25,688,8,25,10,25,12,25,691,9,25,
        1,26,1,26,3,26,695,8,26,1,27,5,27,698,8,27,10,27,12,27,701,9,27,
        1,27,1,27,3,27,705,8,27,1,28,1,28,1,28,1,28,3,28,711,8,28,1,29,1,
        29,1,29,3,29,716,8,29,1,30,1,30,1,30,3,30,721,8,30,1,31,1,31,1,31,
        3,31,726,8,31,1,32,1,32,1,32,3,32,731,8,32,1,33,1,33,1,33,3,33,736,
        8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,3,35,745,8,35,1,36,1,36,
        3,36,749,8,36,1,37,3,37,752,8,37,1,37,5,37,755,8,37,10,37,12,37,
        758,9,37,1,37,5,37,761,8,37,10,37,12,37,764,9,37,1,38,5,38,767,8,
        38,10,38,12,38,770,9,38,1,38,1,38,1,39,5,39,775,8,39,10,39,12,39,
        778,9,39,1,39,1,39,1,39,1,39,5,39,784,8,39,10,39,12,39,787,9,39,
        1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,3,41,797,8,41,1,42,1,42,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,
        826,8,46,1,47,5,47,829,8,47,10,47,12,47,832,9,47,1,47,3,47,835,8,
        47,1,47,1,47,1,47,1,47,5,47,841,8,47,10,47,12,47,844,9,47,1,47,1,
        47,5,47,848,8,47,10,47,12,47,851,9,47,1,47,1,47,1,48,1,48,5,48,857,
        8,48,10,48,12,48,860,9,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,5,48,871,8,48,10,48,12,48,874,9,48,3,48,876,8,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,5,48,886,8,48,10,48,12,48,889,9,48,
        3,48,891,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,5,48,905,8,48,10,48,12,48,908,9,48,1,48,1,48,3,48,912,
        8,48,1,49,1,49,1,50,1,50,1,50,3,50,919,8,50,1,51,5,51,922,8,51,10,
        51,12,51,925,9,51,1,51,1,51,1,51,3,51,930,8,51,1,51,3,51,933,8,51,
        1,51,3,51,936,8,51,1,51,3,51,939,8,51,1,51,1,51,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,953,8,52,1,53,1,53,1,53,1,
        53,1,54,1,54,1,54,5,54,962,8,54,10,54,12,54,965,9,54,1,55,1,55,1,
        55,1,56,1,56,1,56,1,57,1,57,1,57,5,57,976,8,57,10,57,12,57,979,9,
        57,1,58,1,58,1,58,1,58,5,58,985,8,58,10,58,12,58,988,9,58,1,59,1,
        59,5,59,992,8,59,10,59,12,59,995,9,59,1,59,1,59,1,60,1,60,1,60,1,
        60,3,60,1003,8,60,1,61,1,61,1,61,1,61,1,61,3,61,1010,8,61,1,62,5,
        62,1013,8,62,10,62,12,62,1016,9,62,1,62,1,62,1,62,1,62,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,3,63,1030,8,63,1,64,1,64,1,64,5,64,
        1035,8,64,10,64,12,64,1038,9,64,1,65,1,65,1,65,3,65,1043,8,65,1,
        66,1,66,3,66,1047,8,66,1,67,1,67,3,67,1051,8,67,1,68,1,68,3,68,1055,
        8,68,1,69,1,69,3,69,1059,8,69,1,70,1,70,1,70,3,70,1064,8,70,1,71,
        1,71,1,71,5,71,1069,8,71,10,71,12,71,1072,9,71,3,71,1074,8,71,1,
        71,1,71,3,71,1078,8,71,1,71,3,71,1081,8,71,1,72,1,72,5,72,1085,8,
        72,10,72,12,72,1088,9,72,1,72,1,72,3,72,1092,8,72,1,72,3,72,1095,
        8,72,1,73,1,73,3,73,1099,8,73,1,73,1,73,3,73,1103,8,73,1,73,1,73,
        5,73,1107,8,73,10,73,12,73,1110,9,73,1,73,1,73,3,73,1114,8,73,3,
        73,1116,8,73,1,74,1,74,1,75,1,75,1,76,1,76,1,76,3,76,1125,8,76,1,
        76,1,76,1,77,5,77,1130,8,77,10,77,12,77,1133,9,77,1,77,1,77,1,77,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1148,8,78,
        1,79,1,79,5,79,1152,8,79,10,79,12,79,1155,9,79,3,79,1157,8,79,1,
        79,1,79,1,79,3,79,1162,8,79,1,80,1,80,3,80,1166,8,80,1,81,1,81,1,
        81,1,81,1,81,3,81,1173,8,81,1,81,3,81,1176,8,81,1,81,1,81,3,81,1180,
        8,81,1,82,5,82,1183,8,82,10,82,12,82,1186,9,82,1,82,1,82,1,82,1,
        82,3,82,1192,8,82,1,82,1,82,1,83,1,83,1,83,5,83,1199,8,83,10,83,
        12,83,1202,9,83,1,84,5,84,1205,8,84,10,84,12,84,1208,9,84,1,84,1,
        84,1,84,1,84,3,84,1214,8,84,1,85,5,85,1217,8,85,10,85,12,85,1220,
        9,85,1,85,1,85,5,85,1224,8,85,10,85,12,85,1227,9,85,1,85,1,85,1,
        85,1,86,1,86,3,86,1234,8,86,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1242,
        8,88,10,88,12,88,1245,9,88,1,89,1,89,3,89,1249,8,89,1,90,1,90,3,
        90,1253,8,90,1,91,1,91,1,92,1,92,1,92,1,93,5,93,1261,8,93,10,93,
        12,93,1264,9,93,1,93,1,93,3,93,1268,8,93,1,93,1,93,1,94,1,94,1,94,
        1,94,3,94,1276,8,94,1,95,3,95,1279,8,95,1,95,1,95,1,95,1,95,1,95,
        3,95,1286,8,95,1,95,3,95,1289,8,95,1,95,1,95,1,96,1,96,1,97,1,97,
        3,97,1297,8,97,1,97,3,97,1300,8,97,1,97,1,97,1,98,3,98,1305,8,98,
        1,98,1,98,1,98,3,98,1310,8,98,1,98,1,98,1,98,1,98,3,98,1316,8,98,
        1,98,1,98,3,98,1320,8,98,1,98,1,98,1,98,3,98,1325,8,98,1,98,1,98,
        1,98,3,98,1330,8,98,1,99,5,99,1333,8,99,10,99,12,99,1336,9,99,1,
        99,1,99,1,99,3,99,1341,8,99,1,99,1,99,1,100,1,100,3,100,1347,8,100,
        1,100,3,100,1350,8,100,1,100,3,100,1353,8,100,1,100,1,100,1,101,
        1,101,1,101,5,101,1360,8,101,10,101,12,101,1363,9,101,1,102,5,102,
        1366,8,102,10,102,12,102,1369,9,102,1,102,1,102,1,102,3,102,1374,
        8,102,1,102,3,102,1377,8,102,1,102,3,102,1380,8,102,1,103,1,103,
        1,104,1,104,5,104,1386,8,104,10,104,12,104,1389,9,104,1,105,5,105,
        1392,8,105,10,105,12,105,1395,9,105,1,105,1,105,1,105,3,105,1400,
        8,105,1,105,1,105,3,105,1404,8,105,1,105,1,105,1,106,1,106,3,106,
        1410,8,106,1,106,1,106,1,107,1,107,1,107,5,107,1417,8,107,10,107,
        12,107,1420,9,107,1,108,5,108,1423,8,108,10,108,12,108,1426,9,108,
        1,108,1,108,1,108,1,108,3,108,1432,8,108,1,109,5,109,1435,8,109,
        10,109,12,109,1438,9,109,1,109,1,109,5,109,1442,8,109,10,109,12,
        109,1445,9,109,1,109,1,109,1,109,1,110,1,110,1,111,1,111,5,111,1454,
        8,111,10,111,12,111,1457,9,111,1,111,1,111,1,112,1,112,3,112,1463,
        8,112,1,113,5,113,1466,8,113,10,113,12,113,1469,9,113,1,113,1,113,
        1,113,1,114,1,114,3,114,1476,8,114,1,115,5,115,1479,8,115,10,115,
        12,115,1482,9,115,1,115,1,115,1,115,3,115,1487,8,115,1,115,3,115,
        1490,8,115,1,115,3,115,1493,8,115,1,115,1,115,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1506,8,116,1,117,1,117,
        1,117,1,118,1,118,1,118,1,118,5,118,1515,8,118,10,118,12,118,1518,
        9,118,1,119,1,119,5,119,1522,8,119,10,119,12,119,1525,9,119,1,119,
        1,119,1,120,1,120,1,120,1,120,1,120,3,120,1534,8,120,1,121,5,121,
        1537,8,121,10,121,12,121,1540,9,121,1,121,1,121,1,121,1,121,1,122,
        1,122,1,122,1,122,3,122,1550,8,122,1,123,5,123,1553,8,123,10,123,
        12,123,1556,9,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,3,124,1568,8,124,1,125,5,125,1571,8,125,10,125,12,125,
        1574,9,125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,5,126,1583,
        8,126,10,126,12,126,1586,9,126,1,126,1,126,1,127,1,127,1,127,1,127,
        1,127,3,127,1595,8,127,1,128,5,128,1598,8,128,10,128,12,128,1601,
        9,128,1,128,1,128,1,128,1,128,1,128,3,128,1608,8,128,1,128,3,128,
        1611,8,128,1,128,1,128,1,129,1,129,1,129,3,129,1618,8,129,1,130,
        1,130,1,130,1,131,1,131,1,131,3,131,1626,8,131,1,132,1,132,1,132,
        1,132,3,132,1632,8,132,1,132,1,132,1,133,1,133,1,133,5,133,1639,
        8,133,10,133,12,133,1642,9,133,1,134,1,134,1,134,1,134,1,135,1,135,
        1,135,3,135,1651,8,135,1,136,1,136,3,136,1655,8,136,1,136,3,136,
        1658,8,136,1,136,1,136,1,137,1,137,1,137,5,137,1665,8,137,10,137,
        12,137,1668,9,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,
        1,139,1,140,1,140,3,140,1681,8,140,1,140,3,140,1684,8,140,1,140,
        1,140,1,141,1,141,1,141,5,141,1691,8,141,10,141,12,141,1694,9,141,
        1,142,1,142,3,142,1698,8,142,1,142,1,142,1,143,1,143,5,143,1704,
        8,143,10,143,12,143,1707,9,143,1,144,1,144,1,144,3,144,1712,8,144,
        1,145,1,145,3,145,1716,8,145,1,146,5,146,1719,8,146,10,146,12,146,
        1722,9,146,1,146,1,146,3,146,1726,8,146,1,147,1,147,3,147,1730,8,
        147,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,149,3,149,
        1741,8,149,1,150,1,150,1,150,1,150,1,150,3,150,1748,8,150,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,3,151,1763,8,151,1,152,1,152,1,153,1,153,1,153,1,153,1,154,
        1,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,3,156,1785,8,156,1,157,1,157,1,157,1,157,1,157,1,157,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,3,160,1813,
        8,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,161,1,162,1,162,
        1,162,5,162,1826,8,162,10,162,12,162,1829,9,162,1,162,1,162,1,162,
        1,162,5,162,1835,8,162,10,162,12,162,1838,9,162,1,162,1,162,1,162,
        5,162,1843,8,162,10,162,12,162,1846,9,162,1,162,3,162,1849,8,162,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,1858,8,163,1,164,
        1,164,1,164,1,164,1,164,5,164,1865,8,164,10,164,12,164,1868,9,164,
        1,164,1,164,1,165,1,165,1,165,1,165,5,165,1876,8,165,10,165,12,165,
        1879,9,165,1,165,3,165,1882,8,165,1,166,1,166,1,167,1,167,1,167,
        1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,170,1,170,3,170,1908,8,170,
        1,171,1,171,3,171,1912,8,171,1,172,1,172,1,172,3,172,1917,8,172,
        1,172,1,172,3,172,1921,8,172,1,172,1,172,3,172,1925,8,172,1,172,
        1,172,1,172,1,173,1,173,1,173,3,173,1933,8,173,1,173,1,173,3,173,
        1937,8,173,1,173,1,173,3,173,1941,8,173,1,173,1,173,1,173,1,174,
        1,174,3,174,1948,8,174,1,175,1,175,1,176,1,176,1,176,5,176,1955,
        8,176,10,176,12,176,1958,9,176,1,177,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,
        1,179,3,179,1978,8,179,1,179,1,179,1,180,1,180,3,180,1984,8,180,
        1,180,1,180,1,181,1,181,3,181,1990,8,181,1,181,1,181,1,182,1,182,
        1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,2015,8,184,
        1,184,1,184,1,184,3,184,2020,8,184,1,185,1,185,5,185,2024,8,185,
        10,185,12,185,2027,9,185,1,186,1,186,1,186,1,186,1,186,1,186,1,187,
        5,187,2036,8,187,10,187,12,187,2039,9,187,1,187,1,187,1,187,1,188,
        1,188,1,188,5,188,2047,8,188,10,188,12,188,2050,9,188,1,189,1,189,
        1,189,1,190,1,190,1,190,1,190,3,190,2059,8,190,1,190,3,190,2062,
        8,190,1,191,1,191,1,191,3,191,2067,8,191,1,191,1,191,1,192,1,192,
        1,192,5,192,2074,8,192,10,192,12,192,2077,9,192,1,193,1,193,3,193,
        2081,8,193,1,194,1,194,3,194,2085,8,194,1,195,1,195,1,195,1,195,
        1,196,1,196,1,197,1,197,1,198,1,198,3,198,2097,8,198,1,199,1,199,
        3,199,2101,8,199,1,200,1,200,3,200,2105,8,200,1,200,1,200,3,200,
        2109,8,200,1,200,1,200,3,200,2113,8,200,1,200,1,200,1,200,1,200,
        3,200,2119,8,200,1,200,1,200,1,200,1,200,3,200,2125,8,200,1,200,
        1,200,3,200,2129,8,200,1,200,1,200,1,200,1,200,3,200,2135,8,200,
        1,200,1,200,1,200,1,200,3,200,2141,8,200,1,200,1,200,1,200,1,200,
        3,200,2147,8,200,1,200,1,200,1,200,1,200,3,200,2153,8,200,1,200,
        1,200,1,200,1,200,1,200,1,200,3,200,2161,8,200,1,200,1,200,1,200,
        1,200,1,200,3,200,2168,8,200,1,200,1,200,1,200,1,200,1,200,3,200,
        2175,8,200,1,200,1,200,1,200,3,200,2180,8,200,1,200,1,200,3,200,
        2184,8,200,1,200,1,200,1,200,3,200,2189,8,200,1,200,1,200,1,200,
        3,200,2194,8,200,1,200,1,200,3,200,2198,8,200,1,200,1,200,1,200,
        3,200,2203,8,200,1,200,1,200,1,200,3,200,2208,8,200,1,200,1,200,
        3,200,2212,8,200,1,200,1,200,1,200,3,200,2217,8,200,1,200,1,200,
        1,200,3,200,2222,8,200,1,200,1,200,3,200,2226,8,200,1,200,1,200,
        1,200,3,200,2231,8,200,1,200,1,200,1,200,3,200,2236,8,200,1,200,
        1,200,3,200,2240,8,200,1,200,1,200,1,200,1,200,1,200,3,200,2247,
        8,200,1,200,1,200,1,200,3,200,2252,8,200,1,200,1,200,3,200,2256,
        8,200,1,200,1,200,1,200,3,200,2261,8,200,1,200,1,200,3,200,2265,
        8,200,1,200,1,200,1,200,3,200,2270,8,200,1,200,1,200,3,200,2274,
        8,200,1,200,1,200,1,200,3,200,2279,8,200,1,200,1,200,3,200,2283,
        8,200,1,200,1,200,1,200,3,200,2288,8,200,1,200,1,200,3,200,2292,
        8,200,1,200,1,200,1,200,1,200,1,200,3,200,2299,8,200,1,200,1,200,
        3,200,2303,8,200,1,200,1,200,1,200,3,200,2308,8,200,1,200,1,200,
        3,200,2312,8,200,1,200,1,200,1,200,1,200,3,200,2318,8,200,3,200,
        2320,8,200,1,201,1,201,1,201,3,201,2325,8,201,1,201,1,201,1,201,
        3,201,2330,8,201,1,201,1,201,1,201,1,201,3,201,2336,8,201,1,201,
        1,201,3,201,2340,8,201,1,201,1,201,1,201,3,201,2345,8,201,1,201,
        1,201,3,201,2349,8,201,1,201,1,201,3,201,2353,8,201,1,201,1,201,
        3,201,2357,8,201,3,201,2359,8,201,1,202,1,202,1,202,5,202,2364,8,
        202,10,202,12,202,2367,9,202,1,202,1,202,1,202,1,202,1,202,1,202,
        5,202,2375,8,202,10,202,12,202,2378,9,202,1,202,1,202,1,202,1,202,
        1,202,1,202,5,202,2386,8,202,10,202,12,202,2389,9,202,1,202,1,202,
        1,202,1,202,1,202,3,202,2396,8,202,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,3,203,2407,8,203,1,204,1,204,3,204,2411,
        8,204,1,204,1,204,1,204,3,204,2416,8,204,1,204,1,204,3,204,2420,
        8,204,1,205,5,205,2423,8,205,10,205,12,205,2426,9,205,1,205,1,205,
        1,205,5,205,2431,8,205,10,205,12,205,2434,9,205,1,205,5,205,2437,
        8,205,10,205,12,205,2440,9,205,1,205,3,205,2443,8,205,1,206,1,206,
        3,206,2447,8,206,1,207,1,207,3,207,2451,8,207,1,208,1,208,1,208,
        1,208,3,208,2457,8,208,1,208,1,208,1,208,1,208,3,208,2463,8,208,
        3,208,2465,8,208,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,3,209,2477,8,209,1,210,1,210,5,210,2481,8,210,10,210,
        12,210,2484,9,210,1,211,5,211,2487,8,211,10,211,12,211,2490,9,211,
        1,211,1,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2511,8,212,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,3,213,2526,8,213,1,214,1,214,1,214,3,214,2531,8,214,
        1,214,1,214,1,214,1,214,1,214,3,214,2538,8,214,1,214,1,214,1,214,
        3,214,2543,8,214,1,214,1,214,1,214,1,214,1,214,3,214,2550,8,214,
        1,214,1,214,1,214,3,214,2555,8,214,1,214,1,214,1,214,1,214,1,214,
        3,214,2562,8,214,1,214,1,214,1,214,3,214,2567,8,214,1,214,1,214,
        1,214,1,214,1,214,3,214,2574,8,214,1,214,1,214,1,214,3,214,2579,
        8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,2588,8,214,
        1,214,1,214,1,214,3,214,2593,8,214,1,214,1,214,3,214,2597,8,214,
        1,215,1,215,1,215,5,215,2602,8,215,10,215,12,215,2605,9,215,1,216,
        1,216,1,216,3,216,2610,8,216,1,216,1,216,1,216,1,216,1,216,3,216,
        2617,8,216,1,216,1,216,1,216,1,216,1,216,3,216,2624,8,216,1,216,
        1,216,1,216,1,216,1,216,3,216,2631,8,216,1,216,1,216,1,216,1,216,
        1,216,1,216,3,216,2639,8,216,1,216,1,216,1,216,1,216,1,216,3,216,
        2646,8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,2654,8,216,
        1,217,1,217,3,217,2658,8,217,1,217,1,217,3,217,2662,8,217,3,217,
        2664,8,217,1,218,1,218,3,218,2668,8,218,1,218,1,218,3,218,2672,8,
        218,3,218,2674,8,218,1,219,1,219,1,219,1,220,1,220,1,220,1,221,1,
        221,1,221,1,221,1,221,1,221,1,221,3,221,2689,8,221,1,222,1,222,1,
        222,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        3,224,2704,8,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        5,225,2714,8,225,10,225,12,225,2717,9,225,1,225,1,225,1,225,1,225,
        1,225,1,225,5,225,2725,8,225,10,225,12,225,2728,9,225,1,225,1,225,
        1,225,3,225,2733,8,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,5,226,2747,8,226,10,226,12,226,2750,
        9,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,5,227,
        2761,8,227,10,227,12,227,2764,9,227,1,228,1,228,1,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        5,228,2782,8,228,10,228,12,228,2785,9,228,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,3,229,2806,8,229,5,229,2808,8,229,10,229,
        12,229,2811,9,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
        1,230,5,230,2822,8,230,10,230,12,230,2825,9,230,1,231,1,231,1,231,
        1,231,1,231,1,231,5,231,2833,8,231,10,231,12,231,2836,9,231,1,232,
        1,232,1,232,1,232,1,232,1,232,5,232,2844,8,232,10,232,12,232,2847,
        9,232,1,233,1,233,1,233,1,233,1,233,1,233,5,233,2855,8,233,10,233,
        12,233,2858,9,233,1,234,1,234,1,234,1,234,1,234,1,234,5,234,2866,
        8,234,10,234,12,234,2869,9,234,1,235,1,235,1,235,1,235,1,235,1,235,
        5,235,2877,8,235,10,235,12,235,2880,9,235,1,236,1,236,1,236,1,236,
        1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,2895,
        8,236,1,237,1,237,3,237,2899,8,237,1,238,1,238,1,238,1,238,1,239,
        1,239,1,239,3,239,2908,8,239,1,240,1,240,1,241,1,241,1,241,1,241,
        1,242,1,242,3,242,2918,8,242,1,242,1,242,3,242,2922,8,242,1,243,
        1,243,1,243,5,243,2927,8,243,10,243,12,243,2930,9,243,1,243,1,243,
        1,243,5,243,2935,8,243,10,243,12,243,2938,9,243,3,243,2940,8,243,
        1,244,5,244,2943,8,244,10,244,12,244,2946,9,244,1,244,1,244,1,244,
        1,244,3,244,2952,8,244,1,245,1,245,3,245,2956,8,245,1,246,1,246,
        3,246,2960,8,246,1,247,1,247,1,247,1,247,1,247,1,247,1,248,1,248,
        1,248,0,10,452,454,456,458,460,462,464,466,468,470,249,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,0,9,2,0,1,3,5,17,6,0,1,3,5,6,8,8,10,
        10,12,14,16,16,2,0,1,3,5,16,1,0,69,75,5,0,22,22,25,25,44,44,46,46,
        54,54,2,0,31,31,37,37,2,0,13,13,55,55,2,0,57,57,60,60,2,0,88,88,
        112,122,3229,0,498,1,0,0,0,2,503,1,0,0,0,4,507,1,0,0,0,6,511,1,0,
        0,0,8,513,1,0,0,0,10,515,1,0,0,0,12,517,1,0,0,0,14,519,1,0,0,0,16,
        524,1,0,0,0,18,533,1,0,0,0,20,535,1,0,0,0,22,537,1,0,0,0,24,542,
        1,0,0,0,26,544,1,0,0,0,28,561,1,0,0,0,30,610,1,0,0,0,32,612,1,0,
        0,0,34,617,1,0,0,0,36,631,1,0,0,0,38,636,1,0,0,0,40,657,1,0,0,0,
        42,664,1,0,0,0,44,666,1,0,0,0,46,677,1,0,0,0,48,680,1,0,0,0,50,684,
        1,0,0,0,52,694,1,0,0,0,54,699,1,0,0,0,56,710,1,0,0,0,58,712,1,0,
        0,0,60,717,1,0,0,0,62,722,1,0,0,0,64,727,1,0,0,0,66,735,1,0,0,0,
        68,739,1,0,0,0,70,741,1,0,0,0,72,748,1,0,0,0,74,751,1,0,0,0,76,768,
        1,0,0,0,78,776,1,0,0,0,80,790,1,0,0,0,82,796,1,0,0,0,84,798,1,0,
        0,0,86,802,1,0,0,0,88,808,1,0,0,0,90,815,1,0,0,0,92,825,1,0,0,0,
        94,830,1,0,0,0,96,911,1,0,0,0,98,913,1,0,0,0,100,918,1,0,0,0,102,
        923,1,0,0,0,104,952,1,0,0,0,106,954,1,0,0,0,108,958,1,0,0,0,110,
        966,1,0,0,0,112,969,1,0,0,0,114,972,1,0,0,0,116,980,1,0,0,0,118,
        989,1,0,0,0,120,1002,1,0,0,0,122,1009,1,0,0,0,124,1014,1,0,0,0,126,
        1029,1,0,0,0,128,1031,1,0,0,0,130,1039,1,0,0,0,132,1044,1,0,0,0,
        134,1050,1,0,0,0,136,1054,1,0,0,0,138,1058,1,0,0,0,140,1063,1,0,
        0,0,142,1073,1,0,0,0,144,1082,1,0,0,0,146,1115,1,0,0,0,148,1117,
        1,0,0,0,150,1119,1,0,0,0,152,1124,1,0,0,0,154,1131,1,0,0,0,156,1147,
        1,0,0,0,158,1156,1,0,0,0,160,1165,1,0,0,0,162,1167,1,0,0,0,164,1184,
        1,0,0,0,166,1195,1,0,0,0,168,1213,1,0,0,0,170,1218,1,0,0,0,172,1233,
        1,0,0,0,174,1235,1,0,0,0,176,1238,1,0,0,0,178,1248,1,0,0,0,180,1252,
        1,0,0,0,182,1254,1,0,0,0,184,1256,1,0,0,0,186,1262,1,0,0,0,188,1275,
        1,0,0,0,190,1278,1,0,0,0,192,1292,1,0,0,0,194,1294,1,0,0,0,196,1329,
        1,0,0,0,198,1334,1,0,0,0,200,1344,1,0,0,0,202,1356,1,0,0,0,204,1367,
        1,0,0,0,206,1381,1,0,0,0,208,1383,1,0,0,0,210,1393,1,0,0,0,212,1407,
        1,0,0,0,214,1413,1,0,0,0,216,1431,1,0,0,0,218,1436,1,0,0,0,220,1449,
        1,0,0,0,222,1451,1,0,0,0,224,1462,1,0,0,0,226,1467,1,0,0,0,228,1475,
        1,0,0,0,230,1480,1,0,0,0,232,1505,1,0,0,0,234,1507,1,0,0,0,236,1510,
        1,0,0,0,238,1519,1,0,0,0,240,1533,1,0,0,0,242,1538,1,0,0,0,244,1549,
        1,0,0,0,246,1554,1,0,0,0,248,1567,1,0,0,0,250,1572,1,0,0,0,252,1580,
        1,0,0,0,254,1594,1,0,0,0,256,1599,1,0,0,0,258,1617,1,0,0,0,260,1619,
        1,0,0,0,262,1625,1,0,0,0,264,1627,1,0,0,0,266,1635,1,0,0,0,268,1643,
        1,0,0,0,270,1650,1,0,0,0,272,1652,1,0,0,0,274,1661,1,0,0,0,276,1669,
        1,0,0,0,278,1672,1,0,0,0,280,1678,1,0,0,0,282,1687,1,0,0,0,284,1695,
        1,0,0,0,286,1701,1,0,0,0,288,1711,1,0,0,0,290,1715,1,0,0,0,292,1720,
        1,0,0,0,294,1729,1,0,0,0,296,1731,1,0,0,0,298,1740,1,0,0,0,300,1747,
        1,0,0,0,302,1762,1,0,0,0,304,1764,1,0,0,0,306,1766,1,0,0,0,308,1770,
        1,0,0,0,310,1774,1,0,0,0,312,1784,1,0,0,0,314,1786,1,0,0,0,316,1792,
        1,0,0,0,318,1800,1,0,0,0,320,1808,1,0,0,0,322,1816,1,0,0,0,324,1848,
        1,0,0,0,326,1850,1,0,0,0,328,1859,1,0,0,0,330,1881,1,0,0,0,332,1883,
        1,0,0,0,334,1885,1,0,0,0,336,1891,1,0,0,0,338,1897,1,0,0,0,340,1907,
        1,0,0,0,342,1911,1,0,0,0,344,1913,1,0,0,0,346,1929,1,0,0,0,348,1947,
        1,0,0,0,350,1949,1,0,0,0,352,1951,1,0,0,0,354,1959,1,0,0,0,356,1967,
        1,0,0,0,358,1975,1,0,0,0,360,1981,1,0,0,0,362,1987,1,0,0,0,364,1993,
        1,0,0,0,366,1997,1,0,0,0,368,2019,1,0,0,0,370,2021,1,0,0,0,372,2028,
        1,0,0,0,374,2037,1,0,0,0,376,2043,1,0,0,0,378,2051,1,0,0,0,380,2054,
        1,0,0,0,382,2063,1,0,0,0,384,2070,1,0,0,0,386,2080,1,0,0,0,388,2084,
        1,0,0,0,390,2086,1,0,0,0,392,2090,1,0,0,0,394,2092,1,0,0,0,396,2096,
        1,0,0,0,398,2100,1,0,0,0,400,2319,1,0,0,0,402,2358,1,0,0,0,404,2395,
        1,0,0,0,406,2406,1,0,0,0,408,2408,1,0,0,0,410,2424,1,0,0,0,412,2446,
        1,0,0,0,414,2450,1,0,0,0,416,2464,1,0,0,0,418,2476,1,0,0,0,420,2478,
        1,0,0,0,422,2488,1,0,0,0,424,2510,1,0,0,0,426,2525,1,0,0,0,428,2596,
        1,0,0,0,430,2598,1,0,0,0,432,2653,1,0,0,0,434,2663,1,0,0,0,436,2673,
        1,0,0,0,438,2675,1,0,0,0,440,2678,1,0,0,0,442,2688,1,0,0,0,444,2690,
        1,0,0,0,446,2693,1,0,0,0,448,2703,1,0,0,0,450,2732,1,0,0,0,452,2734,
        1,0,0,0,454,2751,1,0,0,0,456,2765,1,0,0,0,458,2786,1,0,0,0,460,2812,
        1,0,0,0,462,2826,1,0,0,0,464,2837,1,0,0,0,466,2848,1,0,0,0,468,2859,
        1,0,0,0,470,2870,1,0,0,0,472,2894,1,0,0,0,474,2898,1,0,0,0,476,2900,
        1,0,0,0,478,2907,1,0,0,0,480,2909,1,0,0,0,482,2911,1,0,0,0,484,2921,
        1,0,0,0,486,2939,1,0,0,0,488,2951,1,0,0,0,490,2955,1,0,0,0,492,2959,
        1,0,0,0,494,2961,1,0,0,0,496,2967,1,0,0,0,498,499,3,72,36,0,499,
        500,5,0,0,1,500,1,1,0,0,0,501,504,5,123,0,0,502,504,3,8,4,0,503,
        501,1,0,0,0,503,502,1,0,0,0,504,3,1,0,0,0,505,508,5,123,0,0,506,
        508,3,10,5,0,507,505,1,0,0,0,507,506,1,0,0,0,508,5,1,0,0,0,509,512,
        5,123,0,0,510,512,3,12,6,0,511,509,1,0,0,0,511,510,1,0,0,0,512,7,
        1,0,0,0,513,514,7,0,0,0,514,9,1,0,0,0,515,516,7,1,0,0,516,11,1,0,
        0,0,517,518,7,2,0,0,518,13,1,0,0,0,519,520,7,3,0,0,520,15,1,0,0,
        0,521,523,3,262,131,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,
        0,0,0,524,525,1,0,0,0,525,529,1,0,0,0,526,524,1,0,0,0,527,530,3,
        18,9,0,528,530,5,20,0,0,529,527,1,0,0,0,529,528,1,0,0,0,530,17,1,
        0,0,0,531,534,3,20,10,0,532,534,3,22,11,0,533,531,1,0,0,0,533,532,
        1,0,0,0,534,19,1,0,0,0,535,536,7,4,0,0,536,21,1,0,0,0,537,538,7,
        5,0,0,538,23,1,0,0,0,539,543,3,28,14,0,540,543,3,34,17,0,541,543,
        3,36,18,0,542,539,1,0,0,0,542,540,1,0,0,0,542,541,1,0,0,0,543,25,
        1,0,0,0,544,548,5,84,0,0,545,547,3,262,131,0,546,545,1,0,0,0,547,
        550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,
        548,1,0,0,0,551,553,3,4,2,0,552,554,3,48,24,0,553,552,1,0,0,0,553,
        554,1,0,0,0,554,556,1,0,0,0,555,557,3,26,13,0,556,555,1,0,0,0,556,
        557,1,0,0,0,557,27,1,0,0,0,558,559,3,60,30,0,559,560,5,84,0,0,560,
        562,1,0,0,0,561,558,1,0,0,0,561,562,1,0,0,0,562,566,1,0,0,0,563,
        565,3,262,131,0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,
        566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,571,3,4,2,0,
        570,572,3,48,24,0,571,570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,
        0,573,575,3,26,13,0,574,573,1,0,0,0,574,575,1,0,0,0,575,29,1,0,0,
        0,576,578,3,262,131,0,577,576,1,0,0,0,578,581,1,0,0,0,579,577,1,
        0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,584,3,
        4,2,0,583,585,3,48,24,0,584,583,1,0,0,0,584,585,1,0,0,0,585,611,
        1,0,0,0,586,587,3,60,30,0,587,591,5,84,0,0,588,590,3,262,131,0,589,
        588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,
        594,1,0,0,0,593,591,1,0,0,0,594,596,3,4,2,0,595,597,3,48,24,0,596,
        595,1,0,0,0,596,597,1,0,0,0,597,611,1,0,0,0,598,599,3,28,14,0,599,
        603,5,84,0,0,600,602,3,262,131,0,601,600,1,0,0,0,602,605,1,0,0,0,
        603,601,1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,603,1,0,0,0,
        606,608,3,4,2,0,607,609,3,48,24,0,608,607,1,0,0,0,608,609,1,0,0,
        0,609,611,1,0,0,0,610,579,1,0,0,0,610,586,1,0,0,0,610,598,1,0,0,
        0,611,31,1,0,0,0,612,613,3,30,15,0,613,33,1,0,0,0,614,616,3,262,
        131,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,
        0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,3,4,2,0,621,35,1,0,
        0,0,622,623,3,16,8,0,623,624,3,38,19,0,624,632,1,0,0,0,625,626,3,
        30,15,0,626,627,3,38,19,0,627,632,1,0,0,0,628,629,3,34,17,0,629,
        630,3,38,19,0,630,632,1,0,0,0,631,622,1,0,0,0,631,625,1,0,0,0,631,
        628,1,0,0,0,632,37,1,0,0,0,633,635,3,262,131,0,634,633,1,0,0,0,635,
        638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,
        636,1,0,0,0,639,640,5,80,0,0,640,651,5,81,0,0,641,643,3,262,131,
        0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,
        0,645,647,1,0,0,0,646,644,1,0,0,0,647,648,5,80,0,0,648,650,5,81,
        0,0,649,644,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,
        0,0,652,39,1,0,0,0,653,651,1,0,0,0,654,656,3,42,21,0,655,654,1,0,
        0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,
        0,0,659,657,1,0,0,0,660,662,3,4,2,0,661,663,3,44,22,0,662,661,1,
        0,0,0,662,663,1,0,0,0,663,41,1,0,0,0,664,665,3,262,131,0,665,43,
        1,0,0,0,666,675,5,34,0,0,667,676,3,34,17,0,668,672,3,28,14,0,669,
        671,3,46,23,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,
        673,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,675,667,1,0,0,0,675,
        668,1,0,0,0,676,45,1,0,0,0,677,678,5,108,0,0,678,679,3,32,16,0,679,
        47,1,0,0,0,680,681,5,90,0,0,681,682,3,50,25,0,682,683,5,89,0,0,683,
        49,1,0,0,0,684,689,3,52,26,0,685,686,5,83,0,0,686,688,3,52,26,0,
        687,685,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,
        690,51,1,0,0,0,691,689,1,0,0,0,692,695,3,24,12,0,693,695,3,54,27,
        0,694,692,1,0,0,0,694,693,1,0,0,0,695,53,1,0,0,0,696,698,3,262,131,
        0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,
        0,700,702,1,0,0,0,701,699,1,0,0,0,702,704,5,93,0,0,703,705,3,56,
        28,0,704,703,1,0,0,0,704,705,1,0,0,0,705,55,1,0,0,0,706,707,5,34,
        0,0,707,711,3,24,12,0,708,709,5,57,0,0,709,711,3,24,12,0,710,706,
        1,0,0,0,710,708,1,0,0,0,711,57,1,0,0,0,712,715,3,2,1,0,713,714,5,
        84,0,0,714,716,3,58,29,0,715,713,1,0,0,0,715,716,1,0,0,0,716,59,
        1,0,0,0,717,720,3,2,1,0,718,719,5,84,0,0,719,721,3,60,30,0,720,718,
        1,0,0,0,720,721,1,0,0,0,721,61,1,0,0,0,722,725,3,60,30,0,723,724,
        5,84,0,0,724,726,3,4,2,0,725,723,1,0,0,0,725,726,1,0,0,0,726,63,
        1,0,0,0,727,730,3,2,1,0,728,729,5,84,0,0,729,731,3,64,32,0,730,728,
        1,0,0,0,730,731,1,0,0,0,731,65,1,0,0,0,732,733,3,70,35,0,733,734,
        5,84,0,0,734,736,1,0,0,0,735,732,1,0,0,0,735,736,1,0,0,0,736,737,
        1,0,0,0,737,738,3,2,1,0,738,67,1,0,0,0,739,740,3,6,3,0,740,69,1,
        0,0,0,741,744,3,2,1,0,742,743,5,84,0,0,743,745,3,70,35,0,744,742,
        1,0,0,0,744,745,1,0,0,0,745,71,1,0,0,0,746,749,3,74,37,0,747,749,
        3,76,38,0,748,746,1,0,0,0,748,747,1,0,0,0,749,73,1,0,0,0,750,752,
        3,78,39,0,751,750,1,0,0,0,751,752,1,0,0,0,752,756,1,0,0,0,753,755,
        3,82,41,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,
        1,0,0,0,757,762,1,0,0,0,758,756,1,0,0,0,759,761,3,92,46,0,760,759,
        1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,75,1,
        0,0,0,764,762,1,0,0,0,765,767,3,82,41,0,766,765,1,0,0,0,767,770,
        1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,768,
        1,0,0,0,771,772,3,94,47,0,772,77,1,0,0,0,773,775,3,80,40,0,774,773,
        1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,
        1,0,0,0,778,776,1,0,0,0,779,780,5,49,0,0,780,785,3,2,1,0,781,782,
        5,84,0,0,782,784,3,2,1,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,
        1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,789,
        5,82,0,0,789,79,1,0,0,0,790,791,3,262,131,0,791,81,1,0,0,0,792,797,
        3,84,42,0,793,797,3,86,43,0,794,797,3,88,44,0,795,797,3,90,45,0,
        796,792,1,0,0,0,796,793,1,0,0,0,796,794,1,0,0,0,796,795,1,0,0,0,
        797,83,1,0,0,0,798,799,5,42,0,0,799,800,3,62,31,0,800,801,5,82,0,
        0,801,85,1,0,0,0,802,803,5,42,0,0,803,804,3,64,32,0,804,805,5,84,
        0,0,805,806,5,106,0,0,806,807,5,82,0,0,807,87,1,0,0,0,808,809,5,
        42,0,0,809,810,5,55,0,0,810,811,3,62,31,0,811,812,5,84,0,0,812,813,
        3,2,1,0,813,814,5,82,0,0,814,89,1,0,0,0,815,816,5,42,0,0,816,817,
        5,55,0,0,817,818,3,62,31,0,818,819,5,84,0,0,819,820,5,106,0,0,820,
        821,5,82,0,0,821,91,1,0,0,0,822,826,3,100,50,0,823,826,3,228,114,
        0,824,826,5,82,0,0,825,822,1,0,0,0,825,823,1,0,0,0,825,824,1,0,0,
        0,826,93,1,0,0,0,827,829,3,262,131,0,828,827,1,0,0,0,829,832,1,0,
        0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,830,1,0,
        0,0,833,835,5,5,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,
        0,0,836,837,5,2,0,0,837,842,3,2,1,0,838,839,5,84,0,0,839,841,3,2,
        1,0,840,838,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,
        0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,849,5,78,0,0,846,848,3,96,
        48,0,847,846,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,
        0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,5,79,0,0,853,95,1,0,
        0,0,854,858,5,10,0,0,855,857,3,98,49,0,856,855,1,0,0,0,857,860,1,
        0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,861,1,0,0,0,860,858,1,
        0,0,0,861,862,3,58,29,0,862,863,5,82,0,0,863,912,1,0,0,0,864,865,
        5,1,0,0,865,875,3,60,30,0,866,867,5,12,0,0,867,872,3,58,29,0,868,
        869,5,83,0,0,869,871,3,58,29,0,870,868,1,0,0,0,871,874,1,0,0,0,872,
        870,1,0,0,0,872,873,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,875,
        866,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,878,5,82,0,0,878,
        912,1,0,0,0,879,880,5,6,0,0,880,890,3,60,30,0,881,882,5,12,0,0,882,
        887,3,58,29,0,883,884,5,83,0,0,884,886,3,58,29,0,885,883,1,0,0,0,
        886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,891,1,0,0,0,
        889,887,1,0,0,0,890,881,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,
        892,893,5,82,0,0,893,912,1,0,0,0,894,895,5,14,0,0,895,896,3,62,31,
        0,896,897,5,82,0,0,897,912,1,0,0,0,898,899,5,8,0,0,899,900,3,62,
        31,0,900,901,5,16,0,0,901,906,3,62,31,0,902,903,5,83,0,0,903,905,
        3,62,31,0,904,902,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,
        1,0,0,0,907,909,1,0,0,0,908,906,1,0,0,0,909,910,5,82,0,0,910,912,
        1,0,0,0,911,854,1,0,0,0,911,864,1,0,0,0,911,879,1,0,0,0,911,894,
        1,0,0,0,911,898,1,0,0,0,912,97,1,0,0,0,913,914,7,6,0,0,914,99,1,
        0,0,0,915,919,3,102,51,0,916,919,3,198,99,0,917,919,3,210,105,0,
        918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,101,1,0,0,0,
        920,922,3,104,52,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,
        0,923,924,1,0,0,0,924,926,1,0,0,0,925,923,1,0,0,0,926,927,5,26,0,
        0,927,929,3,4,2,0,928,930,3,106,53,0,929,928,1,0,0,0,929,930,1,0,
        0,0,930,932,1,0,0,0,931,933,3,110,55,0,932,931,1,0,0,0,932,933,1,
        0,0,0,933,935,1,0,0,0,934,936,3,112,56,0,935,934,1,0,0,0,935,936,
        1,0,0,0,936,938,1,0,0,0,937,939,3,116,58,0,938,937,1,0,0,0,938,939,
        1,0,0,0,939,940,1,0,0,0,940,941,3,118,59,0,941,103,1,0,0,0,942,953,
        3,262,131,0,943,953,5,52,0,0,944,953,5,51,0,0,945,953,5,50,0,0,946,
        953,5,18,0,0,947,953,5,55,0,0,948,953,5,35,0,0,949,953,5,11,0,0,
        950,953,5,3,0,0,951,953,5,56,0,0,952,942,1,0,0,0,952,943,1,0,0,0,
        952,944,1,0,0,0,952,945,1,0,0,0,952,946,1,0,0,0,952,947,1,0,0,0,
        952,948,1,0,0,0,952,949,1,0,0,0,952,950,1,0,0,0,952,951,1,0,0,0,
        953,105,1,0,0,0,954,955,5,90,0,0,955,956,3,108,54,0,956,957,5,89,
        0,0,957,107,1,0,0,0,958,963,3,40,20,0,959,960,5,83,0,0,960,962,3,
        40,20,0,961,959,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,
        1,0,0,0,964,109,1,0,0,0,965,963,1,0,0,0,966,967,5,34,0,0,967,968,
        3,30,15,0,968,111,1,0,0,0,969,970,5,41,0,0,970,971,3,114,57,0,971,
        113,1,0,0,0,972,977,3,32,16,0,973,974,5,83,0,0,974,976,3,32,16,0,
        975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,
        978,115,1,0,0,0,979,977,1,0,0,0,980,981,5,7,0,0,981,986,3,62,31,
        0,982,983,5,83,0,0,983,985,3,62,31,0,984,982,1,0,0,0,985,988,1,0,
        0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,117,1,0,0,0,988,986,1,0,
        0,0,989,993,5,78,0,0,990,992,3,120,60,0,991,990,1,0,0,0,992,995,
        1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,993,
        1,0,0,0,996,997,5,79,0,0,997,119,1,0,0,0,998,1003,3,122,61,0,999,
        1003,3,182,91,0,1000,1003,3,184,92,0,1001,1003,3,186,93,0,1002,998,
        1,0,0,0,1002,999,1,0,0,0,1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,
        121,1,0,0,0,1004,1010,3,124,62,0,1005,1010,3,154,77,0,1006,1010,
        3,100,50,0,1007,1010,3,228,114,0,1008,1010,5,82,0,0,1009,1004,1,
        0,0,0,1009,1005,1,0,0,0,1009,1006,1,0,0,0,1009,1007,1,0,0,0,1009,
        1008,1,0,0,0,1010,123,1,0,0,0,1011,1013,3,126,63,0,1012,1011,1,0,
        0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1017,
        1,0,0,0,1016,1014,1,0,0,0,1017,1018,3,136,68,0,1018,1019,3,128,64,
        0,1019,1020,5,82,0,0,1020,125,1,0,0,0,1021,1030,3,262,131,0,1022,
        1030,5,52,0,0,1023,1030,5,51,0,0,1024,1030,5,50,0,0,1025,1030,5,
        55,0,0,1026,1030,5,35,0,0,1027,1030,5,63,0,0,1028,1030,5,66,0,0,
        1029,1021,1,0,0,0,1029,1022,1,0,0,0,1029,1023,1,0,0,0,1029,1024,
        1,0,0,0,1029,1025,1,0,0,0,1029,1026,1,0,0,0,1029,1027,1,0,0,0,1029,
        1028,1,0,0,0,1030,127,1,0,0,0,1031,1036,3,130,65,0,1032,1033,5,83,
        0,0,1033,1035,3,130,65,0,1034,1032,1,0,0,0,1035,1038,1,0,0,0,1036,
        1034,1,0,0,0,1036,1037,1,0,0,0,1037,129,1,0,0,0,1038,1036,1,0,0,
        0,1039,1042,3,132,66,0,1040,1041,5,88,0,0,1041,1043,3,134,67,0,1042,
        1040,1,0,0,0,1042,1043,1,0,0,0,1043,131,1,0,0,0,1044,1046,3,2,1,
        0,1045,1047,3,38,19,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,133,
        1,0,0,0,1048,1051,3,396,198,0,1049,1051,3,280,140,0,1050,1048,1,
        0,0,0,1050,1049,1,0,0,0,1051,135,1,0,0,0,1052,1055,3,138,69,0,1053,
        1055,3,140,70,0,1054,1052,1,0,0,0,1054,1053,1,0,0,0,1055,137,1,0,
        0,0,1056,1059,3,18,9,0,1057,1059,5,20,0,0,1058,1056,1,0,0,0,1058,
        1057,1,0,0,0,1059,139,1,0,0,0,1060,1064,3,142,71,0,1061,1064,3,150,
        75,0,1062,1064,3,152,76,0,1063,1060,1,0,0,0,1063,1061,1,0,0,0,1063,
        1062,1,0,0,0,1064,141,1,0,0,0,1065,1066,3,60,30,0,1066,1070,5,84,
        0,0,1067,1069,3,262,131,0,1068,1067,1,0,0,0,1069,1072,1,0,0,0,1070,
        1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,
        0,1073,1065,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1077,
        3,4,2,0,1076,1078,3,48,24,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,
        1078,1080,1,0,0,0,1079,1081,3,144,72,0,1080,1079,1,0,0,0,1080,1081,
        1,0,0,0,1081,143,1,0,0,0,1082,1086,5,84,0,0,1083,1085,3,262,131,
        0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,
        1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1091,3,4,2,0,1090,
        1092,3,48,24,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,
        0,0,1093,1095,3,144,72,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,
        145,1,0,0,0,1096,1098,3,4,2,0,1097,1099,3,48,24,0,1098,1097,1,0,
        0,0,1098,1099,1,0,0,0,1099,1116,1,0,0,0,1100,1103,3,60,30,0,1101,
        1103,3,142,71,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1104,1,
        0,0,0,1104,1108,5,84,0,0,1105,1107,3,262,131,0,1106,1105,1,0,0,0,
        1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,
        1,0,0,0,1110,1108,1,0,0,0,1111,1113,3,4,2,0,1112,1114,3,48,24,0,
        1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,1096,
        1,0,0,0,1115,1102,1,0,0,0,1116,147,1,0,0,0,1117,1118,3,146,73,0,
        1118,149,1,0,0,0,1119,1120,3,4,2,0,1120,151,1,0,0,0,1121,1125,3,
        138,69,0,1122,1125,3,142,71,0,1123,1125,3,150,75,0,1124,1121,1,0,
        0,0,1124,1122,1,0,0,0,1124,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1127,
        3,38,19,0,1127,153,1,0,0,0,1128,1130,3,156,78,0,1129,1128,1,0,0,
        0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1134,
        1,0,0,0,1133,1131,1,0,0,0,1134,1135,3,158,79,0,1135,1136,3,180,90,
        0,1136,155,1,0,0,0,1137,1148,3,262,131,0,1138,1148,5,52,0,0,1139,
        1148,5,51,0,0,1140,1148,5,50,0,0,1141,1148,5,18,0,0,1142,1148,5,
        55,0,0,1143,1148,5,35,0,0,1144,1148,5,59,0,0,1145,1148,5,47,0,0,
        1146,1148,5,56,0,0,1147,1137,1,0,0,0,1147,1138,1,0,0,0,1147,1139,
        1,0,0,0,1147,1140,1,0,0,0,1147,1141,1,0,0,0,1147,1142,1,0,0,0,1147,
        1143,1,0,0,0,1147,1144,1,0,0,0,1147,1145,1,0,0,0,1147,1146,1,0,0,
        0,1148,157,1,0,0,0,1149,1153,3,106,53,0,1150,1152,3,262,131,0,1151,
        1150,1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,
        0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1156,1149,1,0,0,0,1156,1157,
        1,0,0,0,1157,1158,1,0,0,0,1158,1159,3,160,80,0,1159,1161,3,162,81,
        0,1160,1162,3,174,87,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,
        159,1,0,0,0,1163,1166,3,136,68,0,1164,1166,5,65,0,0,1165,1163,1,
        0,0,0,1165,1164,1,0,0,0,1166,161,1,0,0,0,1167,1168,3,2,1,0,1168,
        1172,5,76,0,0,1169,1170,3,164,82,0,1170,1171,5,83,0,0,1171,1173,
        1,0,0,0,1172,1169,1,0,0,0,1172,1173,1,0,0,0,1173,1175,1,0,0,0,1174,
        1176,3,166,83,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,
        0,0,0,1177,1179,5,77,0,0,1178,1180,3,38,19,0,1179,1178,1,0,0,0,1179,
        1180,1,0,0,0,1180,163,1,0,0,0,1181,1183,3,262,131,0,1182,1181,1,
        0,0,0,1183,1186,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,
        1187,1,0,0,0,1186,1184,1,0,0,0,1187,1191,3,136,68,0,1188,1189,3,
        2,1,0,1189,1190,5,84,0,0,1190,1192,1,0,0,0,1191,1188,1,0,0,0,1191,
        1192,1,0,0,0,1192,1193,1,0,0,0,1193,1194,5,60,0,0,1194,165,1,0,0,
        0,1195,1200,3,168,84,0,1196,1197,5,83,0,0,1197,1199,3,168,84,0,1198,
        1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,1201,1,0,0,
        0,1201,167,1,0,0,0,1202,1200,1,0,0,0,1203,1205,3,172,86,0,1204,1203,
        1,0,0,0,1205,1208,1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,
        1209,1,0,0,0,1208,1206,1,0,0,0,1209,1210,3,136,68,0,1210,1211,3,
        132,66,0,1211,1214,1,0,0,0,1212,1214,3,170,85,0,1213,1206,1,0,0,
        0,1213,1212,1,0,0,0,1214,169,1,0,0,0,1215,1217,3,172,86,0,1216,1215,
        1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,
        1221,1,0,0,0,1220,1218,1,0,0,0,1221,1225,3,136,68,0,1222,1224,3,
        262,131,0,1223,1222,1,0,0,0,1224,1227,1,0,0,0,1225,1223,1,0,0,0,
        1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1225,1,0,0,0,1228,1229,
        5,85,0,0,1229,1230,3,2,1,0,1230,171,1,0,0,0,1231,1234,3,262,131,
        0,1232,1234,5,35,0,0,1233,1231,1,0,0,0,1233,1232,1,0,0,0,1234,173,
        1,0,0,0,1235,1236,5,62,0,0,1236,1237,3,176,88,0,1237,175,1,0,0,0,
        1238,1243,3,178,89,0,1239,1240,5,83,0,0,1240,1242,3,178,89,0,1241,
        1239,1,0,0,0,1242,1245,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,
        0,1244,177,1,0,0,0,1245,1243,1,0,0,0,1246,1249,3,30,15,0,1247,1249,
        3,34,17,0,1248,1246,1,0,0,0,1248,1247,1,0,0,0,1249,179,1,0,0,0,1250,
        1253,3,284,142,0,1251,1253,5,82,0,0,1252,1250,1,0,0,0,1252,1251,
        1,0,0,0,1253,181,1,0,0,0,1254,1255,3,284,142,0,1255,183,1,0,0,0,
        1256,1257,5,55,0,0,1257,1258,3,284,142,0,1258,185,1,0,0,0,1259,1261,
        3,188,94,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,
        1262,1263,1,0,0,0,1263,1265,1,0,0,0,1264,1262,1,0,0,0,1265,1267,
        3,190,95,0,1266,1268,3,174,87,0,1267,1266,1,0,0,0,1267,1268,1,0,
        0,0,1268,1269,1,0,0,0,1269,1270,3,194,97,0,1270,187,1,0,0,0,1271,
        1276,3,262,131,0,1272,1276,5,52,0,0,1273,1276,5,51,0,0,1274,1276,
        5,50,0,0,1275,1271,1,0,0,0,1275,1272,1,0,0,0,1275,1273,1,0,0,0,1275,
        1274,1,0,0,0,1276,189,1,0,0,0,1277,1279,3,106,53,0,1278,1277,1,0,
        0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,3,192,96,0,1281,
        1285,5,76,0,0,1282,1283,3,164,82,0,1283,1284,5,83,0,0,1284,1286,
        1,0,0,0,1285,1282,1,0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,
        1289,3,166,83,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,
        0,0,0,1290,1291,5,77,0,0,1291,191,1,0,0,0,1292,1293,3,4,2,0,1293,
        193,1,0,0,0,1294,1296,5,78,0,0,1295,1297,3,196,98,0,1296,1295,1,
        0,0,0,1296,1297,1,0,0,0,1297,1299,1,0,0,0,1298,1300,3,286,143,0,
        1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1302,
        5,79,0,0,1302,195,1,0,0,0,1303,1305,3,48,24,0,1304,1303,1,0,0,0,
        1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,7,7,0,0,1307,1309,
        5,76,0,0,1308,1310,3,430,215,0,1309,1308,1,0,0,0,1309,1310,1,0,0,
        0,1310,1311,1,0,0,0,1311,1312,5,77,0,0,1312,1330,5,82,0,0,1313,1316,
        3,66,33,0,1314,1316,3,398,199,0,1315,1313,1,0,0,0,1315,1314,1,0,
        0,0,1316,1317,1,0,0,0,1317,1319,5,84,0,0,1318,1320,3,48,24,0,1319,
        1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,5,57,
        0,0,1322,1324,5,76,0,0,1323,1325,3,430,215,0,1324,1323,1,0,0,0,1324,
        1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,5,77,0,0,1327,1328,5,82,
        0,0,1328,1330,1,0,0,0,1329,1304,1,0,0,0,1329,1315,1,0,0,0,1330,197,
        1,0,0,0,1331,1333,3,104,52,0,1332,1331,1,0,0,0,1333,1336,1,0,0,0,
        1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1334,
        1,0,0,0,1337,1338,5,33,0,0,1338,1340,3,4,2,0,1339,1341,3,112,56,
        0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,1342,1343,
        3,200,100,0,1343,199,1,0,0,0,1344,1346,5,78,0,0,1345,1347,3,202,
        101,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1349,1,0,0,0,1348,
        1350,5,83,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1352,1,0,
        0,0,1351,1353,3,208,104,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,
        1354,1,0,0,0,1354,1355,5,79,0,0,1355,201,1,0,0,0,1356,1361,3,204,
        102,0,1357,1358,5,83,0,0,1358,1360,3,204,102,0,1359,1357,1,0,0,0,
        1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,203,1,
        0,0,0,1363,1361,1,0,0,0,1364,1366,3,206,103,0,1365,1364,1,0,0,0,
        1366,1369,1,0,0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1370,
        1,0,0,0,1369,1367,1,0,0,0,1370,1376,3,2,1,0,1371,1373,5,76,0,0,1372,
        1374,3,430,215,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,
        0,0,0,1375,1377,5,77,0,0,1376,1371,1,0,0,0,1376,1377,1,0,0,0,1377,
        1379,1,0,0,0,1378,1380,3,118,59,0,1379,1378,1,0,0,0,1379,1380,1,
        0,0,0,1380,205,1,0,0,0,1381,1382,3,262,131,0,1382,207,1,0,0,0,1383,
        1387,5,82,0,0,1384,1386,3,120,60,0,1385,1384,1,0,0,0,1386,1389,1,
        0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,209,1,0,0,0,1389,
        1387,1,0,0,0,1390,1392,3,104,52,0,1391,1390,1,0,0,0,1392,1395,1,
        0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,
        1393,1,0,0,0,1396,1397,5,9,0,0,1397,1399,3,4,2,0,1398,1400,3,106,
        53,0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,
        1403,3,212,106,0,1402,1404,3,112,56,0,1403,1402,1,0,0,0,1403,1404,
        1,0,0,0,1404,1405,1,0,0,0,1405,1406,3,222,111,0,1406,211,1,0,0,0,
        1407,1409,5,76,0,0,1408,1410,3,214,107,0,1409,1408,1,0,0,0,1409,
        1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,5,77,0,0,1412,213,1,0,0,
        0,1413,1418,3,216,108,0,1414,1415,5,83,0,0,1415,1417,3,216,108,0,
        1416,1414,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,
        1,0,0,0,1419,215,1,0,0,0,1420,1418,1,0,0,0,1421,1423,3,220,110,0,
        1422,1421,1,0,0,0,1423,1426,1,0,0,0,1424,1422,1,0,0,0,1424,1425,
        1,0,0,0,1425,1427,1,0,0,0,1426,1424,1,0,0,0,1427,1428,3,136,68,0,
        1428,1429,3,2,1,0,1429,1432,1,0,0,0,1430,1432,3,218,109,0,1431,1424,
        1,0,0,0,1431,1430,1,0,0,0,1432,217,1,0,0,0,1433,1435,3,220,110,0,
        1434,1433,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,0,0,0,1436,1437,
        1,0,0,0,1437,1439,1,0,0,0,1438,1436,1,0,0,0,1439,1443,3,136,68,0,
        1440,1442,3,262,131,0,1441,1440,1,0,0,0,1442,1445,1,0,0,0,1443,1441,
        1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,0,1446,
        1447,5,85,0,0,1447,1448,3,2,1,0,1448,219,1,0,0,0,1449,1450,3,262,
        131,0,1450,221,1,0,0,0,1451,1455,5,78,0,0,1452,1454,3,224,112,0,
        1453,1452,1,0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,0,1455,1456,
        1,0,0,0,1456,1458,1,0,0,0,1457,1455,1,0,0,0,1458,1459,5,79,0,0,1459,
        223,1,0,0,0,1460,1463,3,120,60,0,1461,1463,3,226,113,0,1462,1460,
        1,0,0,0,1462,1461,1,0,0,0,1463,225,1,0,0,0,1464,1466,3,188,94,0,
        1465,1464,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,
        1,0,0,0,1468,1470,1,0,0,0,1469,1467,1,0,0,0,1470,1471,3,192,96,0,
        1471,1472,3,194,97,0,1472,227,1,0,0,0,1473,1476,3,230,115,0,1474,
        1476,3,250,125,0,1475,1473,1,0,0,0,1475,1474,1,0,0,0,1476,229,1,
        0,0,0,1477,1479,3,232,116,0,1478,1477,1,0,0,0,1479,1482,1,0,0,0,
        1480,1478,1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,1482,1480,
        1,0,0,0,1483,1484,5,45,0,0,1484,1486,3,4,2,0,1485,1487,3,106,53,
        0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1490,
        3,234,117,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1492,1,0,0,
        0,1491,1493,3,236,118,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,
        1494,1,0,0,0,1494,1495,3,238,119,0,1495,231,1,0,0,0,1496,1506,3,
        262,131,0,1497,1506,5,52,0,0,1498,1506,5,51,0,0,1499,1506,5,50,0,
        0,1500,1506,5,18,0,0,1501,1506,5,55,0,0,1502,1506,5,11,0,0,1503,
        1506,5,3,0,0,1504,1506,5,56,0,0,1505,1496,1,0,0,0,1505,1497,1,0,
        0,0,1505,1498,1,0,0,0,1505,1499,1,0,0,0,1505,1500,1,0,0,0,1505,1501,
        1,0,0,0,1505,1502,1,0,0,0,1505,1503,1,0,0,0,1505,1504,1,0,0,0,1506,
        233,1,0,0,0,1507,1508,5,34,0,0,1508,1509,3,114,57,0,1509,235,1,0,
        0,0,1510,1511,5,7,0,0,1511,1516,3,62,31,0,1512,1513,5,83,0,0,1513,
        1515,3,62,31,0,1514,1512,1,0,0,0,1515,1518,1,0,0,0,1516,1514,1,0,
        0,0,1516,1517,1,0,0,0,1517,237,1,0,0,0,1518,1516,1,0,0,0,1519,1523,
        5,78,0,0,1520,1522,3,240,120,0,1521,1520,1,0,0,0,1522,1525,1,0,0,
        0,1523,1521,1,0,0,0,1523,1524,1,0,0,0,1524,1526,1,0,0,0,1525,1523,
        1,0,0,0,1526,1527,5,79,0,0,1527,239,1,0,0,0,1528,1534,3,242,121,
        0,1529,1534,3,246,123,0,1530,1534,3,100,50,0,1531,1534,3,228,114,
        0,1532,1534,5,82,0,0,1533,1528,1,0,0,0,1533,1529,1,0,0,0,1533,1530,
        1,0,0,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,241,1,0,0,0,1535,
        1537,3,244,122,0,1536,1535,1,0,0,0,1537,1540,1,0,0,0,1538,1536,1,
        0,0,0,1538,1539,1,0,0,0,1539,1541,1,0,0,0,1540,1538,1,0,0,0,1541,
        1542,3,136,68,0,1542,1543,3,128,64,0,1543,1544,5,82,0,0,1544,243,
        1,0,0,0,1545,1550,3,262,131,0,1546,1550,5,52,0,0,1547,1550,5,55,
        0,0,1548,1550,5,35,0,0,1549,1545,1,0,0,0,1549,1546,1,0,0,0,1549,
        1547,1,0,0,0,1549,1548,1,0,0,0,1550,245,1,0,0,0,1551,1553,3,248,
        124,0,1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,
        1555,1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,0,1557,1558,3,158,
        79,0,1558,1559,3,180,90,0,1559,247,1,0,0,0,1560,1568,3,262,131,0,
        1561,1568,5,52,0,0,1562,1568,5,50,0,0,1563,1568,5,18,0,0,1564,1568,
        5,29,0,0,1565,1568,5,55,0,0,1566,1568,5,56,0,0,1567,1560,1,0,0,0,
        1567,1561,1,0,0,0,1567,1562,1,0,0,0,1567,1563,1,0,0,0,1567,1564,
        1,0,0,0,1567,1565,1,0,0,0,1567,1566,1,0,0,0,1568,249,1,0,0,0,1569,
        1571,3,232,116,0,1570,1569,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,
        0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,1572,1,0,0,0,1575,
        1576,5,86,0,0,1576,1577,5,45,0,0,1577,1578,3,4,2,0,1578,1579,3,252,
        126,0,1579,251,1,0,0,0,1580,1584,5,78,0,0,1581,1583,3,254,127,0,
        1582,1581,1,0,0,0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1584,1585,
        1,0,0,0,1585,1587,1,0,0,0,1586,1584,1,0,0,0,1587,1588,5,79,0,0,1588,
        253,1,0,0,0,1589,1595,3,256,128,0,1590,1595,3,242,121,0,1591,1595,
        3,100,50,0,1592,1595,3,228,114,0,1593,1595,5,82,0,0,1594,1589,1,
        0,0,0,1594,1590,1,0,0,0,1594,1591,1,0,0,0,1594,1592,1,0,0,0,1594,
        1593,1,0,0,0,1595,255,1,0,0,0,1596,1598,3,258,129,0,1597,1596,1,
        0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,
        1602,1,0,0,0,1601,1599,1,0,0,0,1602,1603,3,136,68,0,1603,1604,3,
        2,1,0,1604,1605,5,76,0,0,1605,1607,5,77,0,0,1606,1608,3,38,19,0,
        1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1611,
        3,260,130,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,
        0,1612,1613,5,82,0,0,1613,257,1,0,0,0,1614,1618,3,262,131,0,1615,
        1618,5,52,0,0,1616,1618,5,18,0,0,1617,1614,1,0,0,0,1617,1615,1,0,
        0,0,1617,1616,1,0,0,0,1618,259,1,0,0,0,1619,1620,5,29,0,0,1620,1621,
        3,270,135,0,1621,261,1,0,0,0,1622,1626,3,264,132,0,1623,1626,3,276,
        138,0,1624,1626,3,278,139,0,1625,1622,1,0,0,0,1625,1623,1,0,0,0,
        1625,1624,1,0,0,0,1626,263,1,0,0,0,1627,1628,5,86,0,0,1628,1629,
        3,62,31,0,1629,1631,5,76,0,0,1630,1632,3,266,133,0,1631,1630,1,0,
        0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1634,5,77,0,0,1634,
        265,1,0,0,0,1635,1640,3,268,134,0,1636,1637,5,83,0,0,1637,1639,3,
        268,134,0,1638,1636,1,0,0,0,1639,1642,1,0,0,0,1640,1638,1,0,0,0,
        1640,1641,1,0,0,0,1641,267,1,0,0,0,1642,1640,1,0,0,0,1643,1644,3,
        2,1,0,1644,1645,5,88,0,0,1645,1646,3,270,135,0,1646,269,1,0,0,0,
        1647,1651,3,472,236,0,1648,1651,3,272,136,0,1649,1651,3,262,131,
        0,1650,1647,1,0,0,0,1650,1648,1,0,0,0,1650,1649,1,0,0,0,1651,271,
        1,0,0,0,1652,1654,5,78,0,0,1653,1655,3,274,137,0,1654,1653,1,0,0,
        0,1654,1655,1,0,0,0,1655,1657,1,0,0,0,1656,1658,5,83,0,0,1657,1656,
        1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,5,79,0,0,1660,
        273,1,0,0,0,1661,1666,3,270,135,0,1662,1663,5,83,0,0,1663,1665,3,
        270,135,0,1664,1662,1,0,0,0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,
        1666,1667,1,0,0,0,1667,275,1,0,0,0,1668,1666,1,0,0,0,1669,1670,5,
        86,0,0,1670,1671,3,62,31,0,1671,277,1,0,0,0,1672,1673,5,86,0,0,1673,
        1674,3,62,31,0,1674,1675,5,76,0,0,1675,1676,3,270,135,0,1676,1677,
        5,77,0,0,1677,279,1,0,0,0,1678,1680,5,78,0,0,1679,1681,3,282,141,
        0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,1682,1684,
        5,83,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,
        1686,5,79,0,0,1686,281,1,0,0,0,1687,1692,3,134,67,0,1688,1689,5,
        83,0,0,1689,1691,3,134,67,0,1690,1688,1,0,0,0,1691,1694,1,0,0,0,
        1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,283,1,0,0,0,1694,1692,1,
        0,0,0,1695,1697,5,78,0,0,1696,1698,3,286,143,0,1697,1696,1,0,0,0,
        1697,1698,1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,79,0,0,1700,285,
        1,0,0,0,1701,1705,3,288,144,0,1702,1704,3,288,144,0,1703,1702,1,
        0,0,0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,
        287,1,0,0,0,1707,1705,1,0,0,0,1708,1712,3,290,145,0,1709,1712,3,
        296,148,0,1710,1712,3,298,149,0,1711,1708,1,0,0,0,1711,1709,1,0,
        0,0,1711,1710,1,0,0,0,1712,289,1,0,0,0,1713,1716,3,100,50,0,1714,
        1716,3,230,115,0,1715,1713,1,0,0,0,1715,1714,1,0,0,0,1716,291,1,
        0,0,0,1717,1719,3,172,86,0,1718,1717,1,0,0,0,1719,1722,1,0,0,0,1720,
        1718,1,0,0,0,1720,1721,1,0,0,0,1721,1723,1,0,0,0,1722,1720,1,0,0,
        0,1723,1725,3,294,147,0,1724,1726,3,128,64,0,1725,1724,1,0,0,0,1725,
        1726,1,0,0,0,1726,293,1,0,0,0,1727,1730,3,136,68,0,1728,1730,5,15,
        0,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,295,1,0,0,0,1731,1732,
        3,292,146,0,1732,1733,5,82,0,0,1733,297,1,0,0,0,1734,1741,3,302,
        151,0,1735,1741,3,306,153,0,1736,1741,3,314,157,0,1737,1741,3,316,
        158,0,1738,1741,3,334,167,0,1739,1741,3,340,170,0,1740,1734,1,0,
        0,0,1740,1735,1,0,0,0,1740,1736,1,0,0,0,1740,1737,1,0,0,0,1740,1738,
        1,0,0,0,1740,1739,1,0,0,0,1741,299,1,0,0,0,1742,1748,3,302,151,0,
        1743,1748,3,308,154,0,1744,1748,3,318,159,0,1745,1748,3,336,168,
        0,1746,1748,3,342,171,0,1747,1742,1,0,0,0,1747,1743,1,0,0,0,1747,
        1744,1,0,0,0,1747,1745,1,0,0,0,1747,1746,1,0,0,0,1748,301,1,0,0,
        0,1749,1763,3,284,142,0,1750,1763,3,304,152,0,1751,1763,3,310,155,
        0,1752,1763,3,320,160,0,1753,1763,3,322,161,0,1754,1763,3,338,169,
        0,1755,1763,3,358,179,0,1756,1763,3,360,180,0,1757,1763,3,362,181,
        0,1758,1763,3,366,183,0,1759,1763,3,364,182,0,1760,1763,3,368,184,
        0,1761,1763,3,390,195,0,1762,1749,1,0,0,0,1762,1750,1,0,0,0,1762,
        1751,1,0,0,0,1762,1752,1,0,0,0,1762,1753,1,0,0,0,1762,1754,1,0,0,
        0,1762,1755,1,0,0,0,1762,1756,1,0,0,0,1762,1757,1,0,0,0,1762,1758,
        1,0,0,0,1762,1759,1,0,0,0,1762,1760,1,0,0,0,1762,1761,1,0,0,0,1763,
        303,1,0,0,0,1764,1765,5,82,0,0,1765,305,1,0,0,0,1766,1767,3,2,1,
        0,1767,1768,5,94,0,0,1768,1769,3,298,149,0,1769,307,1,0,0,0,1770,
        1771,3,2,1,0,1771,1772,5,94,0,0,1772,1773,3,300,150,0,1773,309,1,
        0,0,0,1774,1775,3,312,156,0,1775,1776,5,82,0,0,1776,311,1,0,0,0,
        1777,1785,3,476,238,0,1778,1785,3,444,222,0,1779,1785,3,446,223,
        0,1780,1785,3,438,219,0,1781,1785,3,440,220,0,1782,1785,3,428,214,
        0,1783,1785,3,406,203,0,1784,1777,1,0,0,0,1784,1778,1,0,0,0,1784,
        1779,1,0,0,0,1784,1780,1,0,0,0,1784,1781,1,0,0,0,1784,1782,1,0,0,
        0,1784,1783,1,0,0,0,1785,313,1,0,0,0,1786,1787,5,39,0,0,1787,1788,
        5,76,0,0,1788,1789,3,396,198,0,1789,1790,5,77,0,0,1790,1791,3,298,
        149,0,1791,315,1,0,0,0,1792,1793,5,39,0,0,1793,1794,5,76,0,0,1794,
        1795,3,396,198,0,1795,1796,5,77,0,0,1796,1797,3,300,150,0,1797,1798,
        5,32,0,0,1798,1799,3,298,149,0,1799,317,1,0,0,0,1800,1801,5,39,0,
        0,1801,1802,5,76,0,0,1802,1803,3,396,198,0,1803,1804,5,77,0,0,1804,
        1805,3,300,150,0,1805,1806,5,32,0,0,1806,1807,3,300,150,0,1807,319,
        1,0,0,0,1808,1809,5,19,0,0,1809,1812,3,396,198,0,1810,1811,5,94,
        0,0,1811,1813,3,396,198,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,
        1814,1,0,0,0,1814,1815,5,82,0,0,1815,321,1,0,0,0,1816,1817,5,58,
        0,0,1817,1818,5,76,0,0,1818,1819,3,396,198,0,1819,1820,5,77,0,0,
        1820,1821,3,324,162,0,1821,323,1,0,0,0,1822,1823,5,78,0,0,1823,1827,
        3,326,163,0,1824,1826,3,326,163,0,1825,1824,1,0,0,0,1826,1829,1,
        0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1830,1,0,0,0,1829,
        1827,1,0,0,0,1830,1831,5,79,0,0,1831,1849,1,0,0,0,1832,1836,5,78,
        0,0,1833,1835,3,328,164,0,1834,1833,1,0,0,0,1835,1838,1,0,0,0,1836,
        1834,1,0,0,0,1836,1837,1,0,0,0,1837,1844,1,0,0,0,1838,1836,1,0,0,
        0,1839,1840,3,330,165,0,1840,1841,5,94,0,0,1841,1843,1,0,0,0,1842,
        1839,1,0,0,0,1843,1846,1,0,0,0,1844,1842,1,0,0,0,1844,1845,1,0,0,
        0,1845,1847,1,0,0,0,1846,1844,1,0,0,0,1847,1849,5,79,0,0,1848,1822,
        1,0,0,0,1848,1832,1,0,0,0,1849,325,1,0,0,0,1850,1851,3,330,165,0,
        1851,1857,5,95,0,0,1852,1853,3,396,198,0,1853,1854,5,82,0,0,1854,
        1858,1,0,0,0,1855,1858,3,284,142,0,1856,1858,3,364,182,0,1857,1852,
        1,0,0,0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,327,1,0,0,0,1859,
        1860,3,330,165,0,1860,1866,5,94,0,0,1861,1862,3,330,165,0,1862,1863,
        5,94,0,0,1863,1865,1,0,0,0,1864,1861,1,0,0,0,1865,1868,1,0,0,0,1866,
        1864,1,0,0,0,1866,1867,1,0,0,0,1867,1869,1,0,0,0,1868,1866,1,0,0,
        0,1869,1870,3,286,143,0,1870,329,1,0,0,0,1871,1872,5,23,0,0,1872,
        1877,3,332,166,0,1873,1874,5,83,0,0,1874,1876,3,332,166,0,1875,1873,
        1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,1877,1878,1,0,0,0,1878,
        1882,1,0,0,0,1879,1877,1,0,0,0,1880,1882,5,29,0,0,1881,1871,1,0,
        0,0,1881,1880,1,0,0,0,1882,331,1,0,0,0,1883,1884,3,472,236,0,1884,
        333,1,0,0,0,1885,1886,5,67,0,0,1886,1887,5,76,0,0,1887,1888,3,396,
        198,0,1888,1889,5,77,0,0,1889,1890,3,298,149,0,1890,335,1,0,0,0,
        1891,1892,5,67,0,0,1892,1893,5,76,0,0,1893,1894,3,396,198,0,1894,
        1895,5,77,0,0,1895,1896,3,300,150,0,1896,337,1,0,0,0,1897,1898,5,
        30,0,0,1898,1899,3,298,149,0,1899,1900,5,67,0,0,1900,1901,5,76,0,
        0,1901,1902,3,396,198,0,1902,1903,5,77,0,0,1903,1904,5,82,0,0,1904,
        339,1,0,0,0,1905,1908,3,344,172,0,1906,1908,3,354,177,0,1907,1905,
        1,0,0,0,1907,1906,1,0,0,0,1908,341,1,0,0,0,1909,1912,3,346,173,0,
        1910,1912,3,356,178,0,1911,1909,1,0,0,0,1911,1910,1,0,0,0,1912,343,
        1,0,0,0,1913,1914,5,38,0,0,1914,1916,5,76,0,0,1915,1917,3,348,174,
        0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1920,
        5,82,0,0,1919,1921,3,396,198,0,1920,1919,1,0,0,0,1920,1921,1,0,0,
        0,1921,1922,1,0,0,0,1922,1924,5,82,0,0,1923,1925,3,350,175,0,1924,
        1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1927,5,77,
        0,0,1927,1928,3,298,149,0,1928,345,1,0,0,0,1929,1930,5,38,0,0,1930,
        1932,5,76,0,0,1931,1933,3,348,174,0,1932,1931,1,0,0,0,1932,1933,
        1,0,0,0,1933,1934,1,0,0,0,1934,1936,5,82,0,0,1935,1937,3,396,198,
        0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,1940,
        5,82,0,0,1939,1941,3,350,175,0,1940,1939,1,0,0,0,1940,1941,1,0,0,
        0,1941,1942,1,0,0,0,1942,1943,5,77,0,0,1943,1944,3,300,150,0,1944,
        347,1,0,0,0,1945,1948,3,352,176,0,1946,1948,3,292,146,0,1947,1945,
        1,0,0,0,1947,1946,1,0,0,0,1948,349,1,0,0,0,1949,1950,3,352,176,0,
        1950,351,1,0,0,0,1951,1956,3,312,156,0,1952,1953,5,83,0,0,1953,1955,
        3,312,156,0,1954,1952,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,0,
        0,1956,1957,1,0,0,0,1957,353,1,0,0,0,1958,1956,1,0,0,0,1959,1960,
        5,38,0,0,1960,1961,5,76,0,0,1961,1962,3,292,146,0,1962,1963,5,94,
        0,0,1963,1964,3,396,198,0,1964,1965,5,77,0,0,1965,1966,3,298,149,
        0,1966,355,1,0,0,0,1967,1968,5,38,0,0,1968,1969,5,76,0,0,1969,1970,
        3,292,146,0,1970,1971,5,94,0,0,1971,1972,3,396,198,0,1972,1973,5,
        77,0,0,1973,1974,3,300,150,0,1974,357,1,0,0,0,1975,1977,5,21,0,0,
        1976,1978,3,2,1,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,
        1,0,0,0,1979,1980,5,82,0,0,1980,359,1,0,0,0,1981,1983,5,28,0,0,1982,
        1984,3,2,1,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,
        0,1985,1986,5,82,0,0,1986,361,1,0,0,0,1987,1989,5,53,0,0,1988,1990,
        3,396,198,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,
        0,1991,1992,5,82,0,0,1992,363,1,0,0,0,1993,1994,5,61,0,0,1994,1995,
        3,396,198,0,1995,1996,5,82,0,0,1996,365,1,0,0,0,1997,1998,5,59,0,
        0,1998,1999,5,76,0,0,1999,2000,3,396,198,0,2000,2001,5,77,0,0,2001,
        2002,3,284,142,0,2002,367,1,0,0,0,2003,2004,5,64,0,0,2004,2005,3,
        284,142,0,2005,2006,3,370,185,0,2006,2020,1,0,0,0,2007,2008,5,64,
        0,0,2008,2009,3,284,142,0,2009,2010,3,378,189,0,2010,2020,1,0,0,
        0,2011,2012,5,64,0,0,2012,2014,3,284,142,0,2013,2015,3,370,185,0,
        2014,2013,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,
        3,378,189,0,2017,2020,1,0,0,0,2018,2020,3,380,190,0,2019,2003,1,
        0,0,0,2019,2007,1,0,0,0,2019,2011,1,0,0,0,2019,2018,1,0,0,0,2020,
        369,1,0,0,0,2021,2025,3,372,186,0,2022,2024,3,372,186,0,2023,2022,
        1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,
        371,1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,24,0,0,2029,2030,5,76,
        0,0,2030,2031,3,374,187,0,2031,2032,5,77,0,0,2032,2033,3,284,142,
        0,2033,373,1,0,0,0,2034,2036,3,172,86,0,2035,2034,1,0,0,0,2036,2039,
        1,0,0,0,2037,2035,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,
        2037,1,0,0,0,2040,2041,3,376,188,0,2041,2042,3,132,66,0,2042,375,
        1,0,0,0,2043,2048,3,146,73,0,2044,2045,5,109,0,0,2045,2047,3,30,
        15,0,2046,2044,1,0,0,0,2047,2050,1,0,0,0,2048,2046,1,0,0,0,2048,
        2049,1,0,0,0,2049,377,1,0,0,0,2050,2048,1,0,0,0,2051,2052,5,36,0,
        0,2052,2053,3,284,142,0,2053,379,1,0,0,0,2054,2055,5,64,0,0,2055,
        2056,3,382,191,0,2056,2058,3,284,142,0,2057,2059,3,370,185,0,2058,
        2057,1,0,0,0,2058,2059,1,0,0,0,2059,2061,1,0,0,0,2060,2062,3,378,
        189,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,381,1,0,0,0,2063,
        2064,5,76,0,0,2064,2066,3,384,192,0,2065,2067,5,82,0,0,2066,2065,
        1,0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,77,0,0,2069,
        383,1,0,0,0,2070,2075,3,386,193,0,2071,2072,5,82,0,0,2072,2074,3,
        386,193,0,2073,2071,1,0,0,0,2074,2077,1,0,0,0,2075,2073,1,0,0,0,
        2075,2076,1,0,0,0,2076,385,1,0,0,0,2077,2075,1,0,0,0,2078,2081,3,
        292,146,0,2079,2081,3,388,194,0,2080,2078,1,0,0,0,2080,2079,1,0,
        0,0,2081,387,1,0,0,0,2082,2085,3,66,33,0,2083,2085,3,426,213,0,2084,
        2082,1,0,0,0,2084,2083,1,0,0,0,2085,389,1,0,0,0,2086,2087,5,17,0,
        0,2087,2088,3,396,198,0,2088,2089,5,82,0,0,2089,391,1,0,0,0,2090,
        2091,3,394,197,0,2091,393,1,0,0,0,2092,2093,3,292,146,0,2093,395,
        1,0,0,0,2094,2097,3,482,241,0,2095,2097,3,474,237,0,2096,2094,1,
        0,0,0,2096,2095,1,0,0,0,2097,397,1,0,0,0,2098,2101,3,400,200,0,2099,
        2101,3,414,207,0,2100,2098,1,0,0,0,2100,2099,1,0,0,0,2101,399,1,
        0,0,0,2102,2104,3,14,7,0,2103,2105,3,402,201,0,2104,2103,1,0,0,0,
        2104,2105,1,0,0,0,2105,2320,1,0,0,0,2106,2108,3,404,202,0,2107,2109,
        3,402,201,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2320,1,0,0,
        0,2110,2112,5,60,0,0,2111,2113,3,402,201,0,2112,2111,1,0,0,0,2112,
        2113,1,0,0,0,2113,2320,1,0,0,0,2114,2115,3,62,31,0,2115,2116,5,84,
        0,0,2116,2118,5,60,0,0,2117,2119,3,402,201,0,2118,2117,1,0,0,0,2118,
        2119,1,0,0,0,2119,2320,1,0,0,0,2120,2121,5,76,0,0,2121,2122,3,396,
        198,0,2122,2124,5,77,0,0,2123,2125,3,402,201,0,2124,2123,1,0,0,0,
        2124,2125,1,0,0,0,2125,2320,1,0,0,0,2126,2128,3,408,204,0,2127,2129,
        3,402,201,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2320,1,0,0,
        0,2130,2131,3,66,33,0,2131,2132,5,84,0,0,2132,2134,3,408,204,0,2133,
        2135,3,402,201,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,2320,1,
        0,0,0,2136,2137,3,414,207,0,2137,2138,5,84,0,0,2138,2140,3,408,204,
        0,2139,2141,3,402,201,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,
        2320,1,0,0,0,2142,2143,3,414,207,0,2143,2144,5,84,0,0,2144,2146,
        3,2,1,0,2145,2147,3,402,201,0,2146,2145,1,0,0,0,2146,2147,1,0,0,
        0,2147,2320,1,0,0,0,2148,2149,5,57,0,0,2149,2150,5,84,0,0,2150,2152,
        3,2,1,0,2151,2153,3,402,201,0,2152,2151,1,0,0,0,2152,2153,1,0,0,
        0,2153,2320,1,0,0,0,2154,2155,3,62,31,0,2155,2156,5,84,0,0,2156,
        2157,5,57,0,0,2157,2158,5,84,0,0,2158,2160,3,2,1,0,2159,2161,3,402,
        201,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2320,1,0,0,0,2162,
        2163,3,66,33,0,2163,2164,5,80,0,0,2164,2165,3,396,198,0,2165,2167,
        5,81,0,0,2166,2168,3,402,201,0,2167,2166,1,0,0,0,2167,2168,1,0,0,
        0,2168,2320,1,0,0,0,2169,2170,3,418,209,0,2170,2171,5,80,0,0,2171,
        2172,3,396,198,0,2172,2174,5,81,0,0,2173,2175,3,402,201,0,2174,2173,
        1,0,0,0,2174,2175,1,0,0,0,2175,2320,1,0,0,0,2176,2177,3,68,34,0,
        2177,2179,5,76,0,0,2178,2180,3,430,215,0,2179,2178,1,0,0,0,2179,
        2180,1,0,0,0,2180,2181,1,0,0,0,2181,2183,5,77,0,0,2182,2184,3,402,
        201,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2320,1,0,0,0,2185,
        2186,3,62,31,0,2186,2188,5,84,0,0,2187,2189,3,48,24,0,2188,2187,
        1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2191,3,2,1,0,2191,
        2193,5,76,0,0,2192,2194,3,430,215,0,2193,2192,1,0,0,0,2193,2194,
        1,0,0,0,2194,2195,1,0,0,0,2195,2197,5,77,0,0,2196,2198,3,402,201,
        0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,2320,1,0,0,0,2199,2200,
        3,66,33,0,2200,2202,5,84,0,0,2201,2203,3,48,24,0,2202,2201,1,0,0,
        0,2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,2205,3,2,1,0,2205,2207,
        5,76,0,0,2206,2208,3,430,215,0,2207,2206,1,0,0,0,2207,2208,1,0,0,
        0,2208,2209,1,0,0,0,2209,2211,5,77,0,0,2210,2212,3,402,201,0,2211,
        2210,1,0,0,0,2211,2212,1,0,0,0,2212,2320,1,0,0,0,2213,2214,3,414,
        207,0,2214,2216,5,84,0,0,2215,2217,3,48,24,0,2216,2215,1,0,0,0,2216,
        2217,1,0,0,0,2217,2218,1,0,0,0,2218,2219,3,2,1,0,2219,2221,5,76,
        0,0,2220,2222,3,430,215,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,
        2223,1,0,0,0,2223,2225,5,77,0,0,2224,2226,3,402,201,0,2225,2224,
        1,0,0,0,2225,2226,1,0,0,0,2226,2320,1,0,0,0,2227,2228,5,57,0,0,2228,
        2230,5,84,0,0,2229,2231,3,48,24,0,2230,2229,1,0,0,0,2230,2231,1,
        0,0,0,2231,2232,1,0,0,0,2232,2233,3,2,1,0,2233,2235,5,76,0,0,2234,
        2236,3,430,215,0,2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,2237,1,
        0,0,0,2237,2239,5,77,0,0,2238,2240,3,402,201,0,2239,2238,1,0,0,0,
        2239,2240,1,0,0,0,2240,2320,1,0,0,0,2241,2242,3,62,31,0,2242,2243,
        5,84,0,0,2243,2244,5,57,0,0,2244,2246,5,84,0,0,2245,2247,3,48,24,
        0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2248,1,0,0,0,2248,2249,
        3,2,1,0,2249,2251,5,76,0,0,2250,2252,3,430,215,0,2251,2250,1,0,0,
        0,2251,2252,1,0,0,0,2252,2253,1,0,0,0,2253,2255,5,77,0,0,2254,2256,
        3,402,201,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2320,1,0,0,
        0,2257,2258,3,66,33,0,2258,2260,5,87,0,0,2259,2261,3,48,24,0,2260,
        2259,1,0,0,0,2260,2261,1,0,0,0,2261,2262,1,0,0,0,2262,2264,3,2,1,
        0,2263,2265,3,402,201,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,
        2320,1,0,0,0,2266,2267,3,414,207,0,2267,2269,5,87,0,0,2268,2270,
        3,48,24,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,
        2271,2273,3,2,1,0,2272,2274,3,402,201,0,2273,2272,1,0,0,0,2273,2274,
        1,0,0,0,2274,2320,1,0,0,0,2275,2276,3,24,12,0,2276,2278,5,87,0,0,
        2277,2279,3,48,24,0,2278,2277,1,0,0,0,2278,2279,1,0,0,0,2279,2280,
        1,0,0,0,2280,2282,3,2,1,0,2281,2283,3,402,201,0,2282,2281,1,0,0,
        0,2282,2283,1,0,0,0,2283,2320,1,0,0,0,2284,2285,5,57,0,0,2285,2287,
        5,87,0,0,2286,2288,3,48,24,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,
        2288,2289,1,0,0,0,2289,2291,3,2,1,0,2290,2292,3,402,201,0,2291,2290,
        1,0,0,0,2291,2292,1,0,0,0,2292,2320,1,0,0,0,2293,2294,3,62,31,0,
        2294,2295,5,84,0,0,2295,2296,5,57,0,0,2296,2298,5,87,0,0,2297,2299,
        3,48,24,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,
        2300,2302,3,2,1,0,2301,2303,3,402,201,0,2302,2301,1,0,0,0,2302,2303,
        1,0,0,0,2303,2320,1,0,0,0,2304,2305,3,30,15,0,2305,2307,5,87,0,0,
        2306,2308,3,48,24,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,2309,
        1,0,0,0,2309,2311,5,48,0,0,2310,2312,3,402,201,0,2311,2310,1,0,0,
        0,2311,2312,1,0,0,0,2312,2320,1,0,0,0,2313,2314,3,36,18,0,2314,2315,
        5,87,0,0,2315,2317,5,48,0,0,2316,2318,3,402,201,0,2317,2316,1,0,
        0,0,2317,2318,1,0,0,0,2318,2320,1,0,0,0,2319,2102,1,0,0,0,2319,2106,
        1,0,0,0,2319,2110,1,0,0,0,2319,2114,1,0,0,0,2319,2120,1,0,0,0,2319,
        2126,1,0,0,0,2319,2130,1,0,0,0,2319,2136,1,0,0,0,2319,2142,1,0,0,
        0,2319,2148,1,0,0,0,2319,2154,1,0,0,0,2319,2162,1,0,0,0,2319,2169,
        1,0,0,0,2319,2176,1,0,0,0,2319,2185,1,0,0,0,2319,2199,1,0,0,0,2319,
        2213,1,0,0,0,2319,2227,1,0,0,0,2319,2241,1,0,0,0,2319,2257,1,0,0,
        0,2319,2266,1,0,0,0,2319,2275,1,0,0,0,2319,2284,1,0,0,0,2319,2293,
        1,0,0,0,2319,2304,1,0,0,0,2319,2313,1,0,0,0,2320,401,1,0,0,0,2321,
        2322,5,84,0,0,2322,2324,3,408,204,0,2323,2325,3,402,201,0,2324,2323,
        1,0,0,0,2324,2325,1,0,0,0,2325,2359,1,0,0,0,2326,2327,5,84,0,0,2327,
        2329,3,2,1,0,2328,2330,3,402,201,0,2329,2328,1,0,0,0,2329,2330,1,
        0,0,0,2330,2359,1,0,0,0,2331,2332,5,80,0,0,2332,2333,3,396,198,0,
        2333,2335,5,81,0,0,2334,2336,3,402,201,0,2335,2334,1,0,0,0,2335,
        2336,1,0,0,0,2336,2359,1,0,0,0,2337,2339,5,84,0,0,2338,2340,3,48,
        24,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,
        2342,3,2,1,0,2342,2344,5,76,0,0,2343,2345,3,430,215,0,2344,2343,
        1,0,0,0,2344,2345,1,0,0,0,2345,2346,1,0,0,0,2346,2348,5,77,0,0,2347,
        2349,3,402,201,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2359,1,
        0,0,0,2350,2352,5,87,0,0,2351,2353,3,48,24,0,2352,2351,1,0,0,0,2352,
        2353,1,0,0,0,2353,2354,1,0,0,0,2354,2356,3,2,1,0,2355,2357,3,402,
        201,0,2356,2355,1,0,0,0,2356,2357,1,0,0,0,2357,2359,1,0,0,0,2358,
        2321,1,0,0,0,2358,2326,1,0,0,0,2358,2331,1,0,0,0,2358,2337,1,0,0,
        0,2358,2350,1,0,0,0,2359,403,1,0,0,0,2360,2365,3,62,31,0,2361,2362,
        5,80,0,0,2362,2364,5,81,0,0,2363,2361,1,0,0,0,2364,2367,1,0,0,0,
        2365,2363,1,0,0,0,2365,2366,1,0,0,0,2366,2368,1,0,0,0,2367,2365,
        1,0,0,0,2368,2369,5,84,0,0,2369,2370,5,26,0,0,2370,2396,1,0,0,0,
        2371,2376,3,18,9,0,2372,2373,5,80,0,0,2373,2375,5,81,0,0,2374,2372,
        1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,
        2379,1,0,0,0,2378,2376,1,0,0,0,2379,2380,5,84,0,0,2380,2381,5,26,
        0,0,2381,2396,1,0,0,0,2382,2387,5,20,0,0,2383,2384,5,80,0,0,2384,
        2386,5,81,0,0,2385,2383,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,
        0,0,2387,2388,1,0,0,0,2388,2390,1,0,0,0,2389,2387,1,0,0,0,2390,2391,
        5,84,0,0,2391,2396,5,26,0,0,2392,2393,5,65,0,0,2393,2394,5,84,0,
        0,2394,2396,5,26,0,0,2395,2360,1,0,0,0,2395,2371,1,0,0,0,2395,2382,
        1,0,0,0,2395,2392,1,0,0,0,2396,405,1,0,0,0,2397,2407,3,408,204,0,
        2398,2399,3,66,33,0,2399,2400,5,84,0,0,2400,2401,3,408,204,0,2401,
        2407,1,0,0,0,2402,2403,3,398,199,0,2403,2404,5,84,0,0,2404,2405,
        3,408,204,0,2405,2407,1,0,0,0,2406,2397,1,0,0,0,2406,2398,1,0,0,
        0,2406,2402,1,0,0,0,2407,407,1,0,0,0,2408,2410,5,48,0,0,2409,2411,
        3,48,24,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,
        2412,2413,3,410,205,0,2413,2415,5,76,0,0,2414,2416,3,430,215,0,2415,
        2414,1,0,0,0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,2419,5,77,
        0,0,2418,2420,3,118,59,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,
        409,1,0,0,0,2421,2423,3,262,131,0,2422,2421,1,0,0,0,2423,2426,1,
        0,0,0,2424,2422,1,0,0,0,2424,2425,1,0,0,0,2425,2427,1,0,0,0,2426,
        2424,1,0,0,0,2427,2438,3,2,1,0,2428,2432,5,84,0,0,2429,2431,3,262,
        131,0,2430,2429,1,0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,
        2433,1,0,0,0,2433,2435,1,0,0,0,2434,2432,1,0,0,0,2435,2437,3,2,1,
        0,2436,2428,1,0,0,0,2437,2440,1,0,0,0,2438,2436,1,0,0,0,2438,2439,
        1,0,0,0,2439,2442,1,0,0,0,2440,2438,1,0,0,0,2441,2443,3,412,206,
        0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,411,1,0,0,0,2444,2447,
        3,48,24,0,2445,2447,5,4,0,0,2446,2444,1,0,0,0,2446,2445,1,0,0,0,
        2447,413,1,0,0,0,2448,2451,3,416,208,0,2449,2451,3,418,209,0,2450,
        2448,1,0,0,0,2450,2449,1,0,0,0,2451,415,1,0,0,0,2452,2453,5,48,0,
        0,2453,2454,3,16,8,0,2454,2456,3,420,210,0,2455,2457,3,38,19,0,2456,
        2455,1,0,0,0,2456,2457,1,0,0,0,2457,2465,1,0,0,0,2458,2459,5,48,
        0,0,2459,2460,3,30,15,0,2460,2462,3,420,210,0,2461,2463,3,38,19,
        0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2465,1,0,0,0,2464,2452,
        1,0,0,0,2464,2458,1,0,0,0,2465,417,1,0,0,0,2466,2467,5,48,0,0,2467,
        2468,3,16,8,0,2468,2469,3,38,19,0,2469,2470,3,280,140,0,2470,2477,
        1,0,0,0,2471,2472,5,48,0,0,2472,2473,3,28,14,0,2473,2474,3,38,19,
        0,2474,2475,3,280,140,0,2475,2477,1,0,0,0,2476,2466,1,0,0,0,2476,
        2471,1,0,0,0,2477,419,1,0,0,0,2478,2482,3,422,211,0,2479,2481,3,
        422,211,0,2480,2479,1,0,0,0,2481,2484,1,0,0,0,2482,2480,1,0,0,0,
        2482,2483,1,0,0,0,2483,421,1,0,0,0,2484,2482,1,0,0,0,2485,2487,3,
        262,131,0,2486,2485,1,0,0,0,2487,2490,1,0,0,0,2488,2486,1,0,0,0,
        2488,2489,1,0,0,0,2489,2491,1,0,0,0,2490,2488,1,0,0,0,2491,2492,
        5,80,0,0,2492,2493,3,396,198,0,2493,2494,5,81,0,0,2494,423,1,0,0,
        0,2495,2496,3,66,33,0,2496,2497,5,80,0,0,2497,2498,3,396,198,0,2498,
        2499,5,81,0,0,2499,2511,1,0,0,0,2500,2501,3,400,200,0,2501,2502,
        5,80,0,0,2502,2503,3,396,198,0,2503,2504,5,81,0,0,2504,2511,1,0,
        0,0,2505,2506,3,418,209,0,2506,2507,5,80,0,0,2507,2508,3,396,198,
        0,2508,2509,5,81,0,0,2509,2511,1,0,0,0,2510,2495,1,0,0,0,2510,2500,
        1,0,0,0,2510,2505,1,0,0,0,2511,425,1,0,0,0,2512,2513,3,398,199,0,
        2513,2514,5,84,0,0,2514,2515,3,2,1,0,2515,2526,1,0,0,0,2516,2517,
        5,57,0,0,2517,2518,5,84,0,0,2518,2526,3,2,1,0,2519,2520,3,62,31,
        0,2520,2521,5,84,0,0,2521,2522,5,57,0,0,2522,2523,5,84,0,0,2523,
        2524,3,2,1,0,2524,2526,1,0,0,0,2525,2512,1,0,0,0,2525,2516,1,0,0,
        0,2525,2519,1,0,0,0,2526,427,1,0,0,0,2527,2528,3,68,34,0,2528,2530,
        5,76,0,0,2529,2531,3,430,215,0,2530,2529,1,0,0,0,2530,2531,1,0,0,
        0,2531,2532,1,0,0,0,2532,2533,5,77,0,0,2533,2597,1,0,0,0,2534,2535,
        3,62,31,0,2535,2537,5,84,0,0,2536,2538,3,48,24,0,2537,2536,1,0,0,
        0,2537,2538,1,0,0,0,2538,2539,1,0,0,0,2539,2540,3,2,1,0,2540,2542,
        5,76,0,0,2541,2543,3,430,215,0,2542,2541,1,0,0,0,2542,2543,1,0,0,
        0,2543,2544,1,0,0,0,2544,2545,5,77,0,0,2545,2597,1,0,0,0,2546,2547,
        3,66,33,0,2547,2549,5,84,0,0,2548,2550,3,48,24,0,2549,2548,1,0,0,
        0,2549,2550,1,0,0,0,2550,2551,1,0,0,0,2551,2552,3,2,1,0,2552,2554,
        5,76,0,0,2553,2555,3,430,215,0,2554,2553,1,0,0,0,2554,2555,1,0,0,
        0,2555,2556,1,0,0,0,2556,2557,5,77,0,0,2557,2597,1,0,0,0,2558,2559,
        3,398,199,0,2559,2561,5,84,0,0,2560,2562,3,48,24,0,2561,2560,1,0,
        0,0,2561,2562,1,0,0,0,2562,2563,1,0,0,0,2563,2564,3,2,1,0,2564,2566,
        5,76,0,0,2565,2567,3,430,215,0,2566,2565,1,0,0,0,2566,2567,1,0,0,
        0,2567,2568,1,0,0,0,2568,2569,5,77,0,0,2569,2597,1,0,0,0,2570,2571,
        5,57,0,0,2571,2573,5,84,0,0,2572,2574,3,48,24,0,2573,2572,1,0,0,
        0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,2576,3,2,1,0,2576,2578,
        5,76,0,0,2577,2579,3,430,215,0,2578,2577,1,0,0,0,2578,2579,1,0,0,
        0,2579,2580,1,0,0,0,2580,2581,5,77,0,0,2581,2597,1,0,0,0,2582,2583,
        3,62,31,0,2583,2584,5,84,0,0,2584,2585,5,57,0,0,2585,2587,5,84,0,
        0,2586,2588,3,48,24,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2589,
        1,0,0,0,2589,2590,3,2,1,0,2590,2592,5,76,0,0,2591,2593,3,430,215,
        0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,1,0,0,0,2594,2595,
        5,77,0,0,2595,2597,1,0,0,0,2596,2527,1,0,0,0,2596,2534,1,0,0,0,2596,
        2546,1,0,0,0,2596,2558,1,0,0,0,2596,2570,1,0,0,0,2596,2582,1,0,0,
        0,2597,429,1,0,0,0,2598,2603,3,396,198,0,2599,2600,5,83,0,0,2600,
        2602,3,396,198,0,2601,2599,1,0,0,0,2602,2605,1,0,0,0,2603,2601,1,
        0,0,0,2603,2604,1,0,0,0,2604,431,1,0,0,0,2605,2603,1,0,0,0,2606,
        2607,3,66,33,0,2607,2609,5,87,0,0,2608,2610,3,48,24,0,2609,2608,
        1,0,0,0,2609,2610,1,0,0,0,2610,2611,1,0,0,0,2611,2612,3,2,1,0,2612,
        2654,1,0,0,0,2613,2614,3,398,199,0,2614,2616,5,87,0,0,2615,2617,
        3,48,24,0,2616,2615,1,0,0,0,2616,2617,1,0,0,0,2617,2618,1,0,0,0,
        2618,2619,3,2,1,0,2619,2654,1,0,0,0,2620,2621,3,24,12,0,2621,2623,
        5,87,0,0,2622,2624,3,48,24,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,
        2624,2625,1,0,0,0,2625,2626,3,2,1,0,2626,2654,1,0,0,0,2627,2628,
        5,57,0,0,2628,2630,5,87,0,0,2629,2631,3,48,24,0,2630,2629,1,0,0,
        0,2630,2631,1,0,0,0,2631,2632,1,0,0,0,2632,2654,3,2,1,0,2633,2634,
        3,62,31,0,2634,2635,5,84,0,0,2635,2636,5,57,0,0,2636,2638,5,87,0,
        0,2637,2639,3,48,24,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,2640,
        1,0,0,0,2640,2641,3,2,1,0,2641,2654,1,0,0,0,2642,2643,3,30,15,0,
        2643,2645,5,87,0,0,2644,2646,3,48,24,0,2645,2644,1,0,0,0,2645,2646,
        1,0,0,0,2646,2647,1,0,0,0,2647,2648,5,48,0,0,2648,2654,1,0,0,0,2649,
        2650,3,36,18,0,2650,2651,5,87,0,0,2651,2652,5,48,0,0,2652,2654,1,
        0,0,0,2653,2606,1,0,0,0,2653,2613,1,0,0,0,2653,2620,1,0,0,0,2653,
        2627,1,0,0,0,2653,2633,1,0,0,0,2653,2642,1,0,0,0,2653,2649,1,0,0,
        0,2654,433,1,0,0,0,2655,2657,3,398,199,0,2656,2658,3,436,218,0,2657,
        2656,1,0,0,0,2657,2658,1,0,0,0,2658,2664,1,0,0,0,2659,2661,3,66,
        33,0,2660,2662,3,436,218,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,
        2664,1,0,0,0,2663,2655,1,0,0,0,2663,2659,1,0,0,0,2664,435,1,0,0,
        0,2665,2667,5,102,0,0,2666,2668,3,436,218,0,2667,2666,1,0,0,0,2667,
        2668,1,0,0,0,2668,2674,1,0,0,0,2669,2671,5,103,0,0,2670,2672,3,436,
        218,0,2671,2670,1,0,0,0,2671,2672,1,0,0,0,2672,2674,1,0,0,0,2673,
        2665,1,0,0,0,2673,2669,1,0,0,0,2674,437,1,0,0,0,2675,2676,3,434,
        217,0,2676,2677,5,102,0,0,2677,439,1,0,0,0,2678,2679,3,434,217,0,
        2679,2680,5,103,0,0,2680,441,1,0,0,0,2681,2689,3,444,222,0,2682,
        2689,3,446,223,0,2683,2684,5,104,0,0,2684,2689,3,442,221,0,2685,
        2686,5,105,0,0,2686,2689,3,442,221,0,2687,2689,3,448,224,0,2688,
        2681,1,0,0,0,2688,2682,1,0,0,0,2688,2683,1,0,0,0,2688,2685,1,0,0,
        0,2688,2687,1,0,0,0,2689,443,1,0,0,0,2690,2691,5,102,0,0,2691,2692,
        3,442,221,0,2692,445,1,0,0,0,2693,2694,5,103,0,0,2694,2695,3,442,
        221,0,2695,447,1,0,0,0,2696,2704,3,434,217,0,2697,2698,5,92,0,0,
        2698,2704,3,442,221,0,2699,2700,5,91,0,0,2700,2704,3,442,221,0,2701,
        2704,3,450,225,0,2702,2704,3,494,247,0,2703,2696,1,0,0,0,2703,2697,
        1,0,0,0,2703,2699,1,0,0,0,2703,2701,1,0,0,0,2703,2702,1,0,0,0,2704,
        449,1,0,0,0,2705,2706,5,76,0,0,2706,2707,3,16,8,0,2707,2708,5,77,
        0,0,2708,2709,3,442,221,0,2709,2733,1,0,0,0,2710,2711,5,76,0,0,2711,
        2715,3,24,12,0,2712,2714,3,46,23,0,2713,2712,1,0,0,0,2714,2717,1,
        0,0,0,2715,2713,1,0,0,0,2715,2716,1,0,0,0,2716,2718,1,0,0,0,2717,
        2715,1,0,0,0,2718,2719,5,77,0,0,2719,2720,3,448,224,0,2720,2733,
        1,0,0,0,2721,2722,5,76,0,0,2722,2726,3,24,12,0,2723,2725,3,46,23,
        0,2724,2723,1,0,0,0,2725,2728,1,0,0,0,2726,2724,1,0,0,0,2726,2727,
        1,0,0,0,2727,2729,1,0,0,0,2728,2726,1,0,0,0,2729,2730,5,77,0,0,2730,
        2731,3,482,241,0,2731,2733,1,0,0,0,2732,2705,1,0,0,0,2732,2710,1,
        0,0,0,2732,2721,1,0,0,0,2733,451,1,0,0,0,2734,2735,6,226,-1,0,2735,
        2736,3,442,221,0,2736,2748,1,0,0,0,2737,2738,10,3,0,0,2738,2739,
        5,106,0,0,2739,2747,3,442,221,0,2740,2741,10,2,0,0,2741,2742,5,107,
        0,0,2742,2747,3,442,221,0,2743,2744,10,1,0,0,2744,2745,5,111,0,0,
        2745,2747,3,442,221,0,2746,2737,1,0,0,0,2746,2740,1,0,0,0,2746,2743,
        1,0,0,0,2747,2750,1,0,0,0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,
        453,1,0,0,0,2750,2748,1,0,0,0,2751,2752,6,227,-1,0,2752,2753,3,452,
        226,0,2753,2762,1,0,0,0,2754,2755,10,2,0,0,2755,2756,5,104,0,0,2756,
        2761,3,452,226,0,2757,2758,10,1,0,0,2758,2759,5,105,0,0,2759,2761,
        3,452,226,0,2760,2754,1,0,0,0,2760,2757,1,0,0,0,2761,2764,1,0,0,
        0,2762,2760,1,0,0,0,2762,2763,1,0,0,0,2763,455,1,0,0,0,2764,2762,
        1,0,0,0,2765,2766,6,228,-1,0,2766,2767,3,454,227,0,2767,2783,1,0,
        0,0,2768,2769,10,3,0,0,2769,2770,5,90,0,0,2770,2771,5,90,0,0,2771,
        2782,3,454,227,0,2772,2773,10,2,0,0,2773,2774,5,89,0,0,2774,2775,
        5,89,0,0,2775,2782,3,454,227,0,2776,2777,10,1,0,0,2777,2778,5,89,
        0,0,2778,2779,5,89,0,0,2779,2780,5,89,0,0,2780,2782,3,454,227,0,
        2781,2768,1,0,0,0,2781,2772,1,0,0,0,2781,2776,1,0,0,0,2782,2785,
        1,0,0,0,2783,2781,1,0,0,0,2783,2784,1,0,0,0,2784,457,1,0,0,0,2785,
        2783,1,0,0,0,2786,2787,6,229,-1,0,2787,2788,3,456,228,0,2788,2809,
        1,0,0,0,2789,2790,10,5,0,0,2790,2791,5,90,0,0,2791,2808,3,456,228,
        0,2792,2793,10,4,0,0,2793,2794,5,89,0,0,2794,2808,3,456,228,0,2795,
        2796,10,3,0,0,2796,2797,5,97,0,0,2797,2808,3,456,228,0,2798,2799,
        10,2,0,0,2799,2800,5,98,0,0,2800,2808,3,456,228,0,2801,2802,10,1,
        0,0,2802,2805,5,43,0,0,2803,2806,3,24,12,0,2804,2806,3,392,196,0,
        2805,2803,1,0,0,0,2805,2804,1,0,0,0,2806,2808,1,0,0,0,2807,2789,
        1,0,0,0,2807,2792,1,0,0,0,2807,2795,1,0,0,0,2807,2798,1,0,0,0,2807,
        2801,1,0,0,0,2808,2811,1,0,0,0,2809,2807,1,0,0,0,2809,2810,1,0,0,
        0,2810,459,1,0,0,0,2811,2809,1,0,0,0,2812,2813,6,230,-1,0,2813,2814,
        3,458,229,0,2814,2823,1,0,0,0,2815,2816,10,2,0,0,2816,2817,5,96,
        0,0,2817,2822,3,458,229,0,2818,2819,10,1,0,0,2819,2820,5,99,0,0,
        2820,2822,3,458,229,0,2821,2815,1,0,0,0,2821,2818,1,0,0,0,2822,2825,
        1,0,0,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,461,1,0,0,0,2825,
        2823,1,0,0,0,2826,2827,6,231,-1,0,2827,2828,3,460,230,0,2828,2834,
        1,0,0,0,2829,2830,10,1,0,0,2830,2831,5,108,0,0,2831,2833,3,460,230,
        0,2832,2829,1,0,0,0,2833,2836,1,0,0,0,2834,2832,1,0,0,0,2834,2835,
        1,0,0,0,2835,463,1,0,0,0,2836,2834,1,0,0,0,2837,2838,6,232,-1,0,
        2838,2839,3,462,231,0,2839,2845,1,0,0,0,2840,2841,10,1,0,0,2841,
        2842,5,110,0,0,2842,2844,3,462,231,0,2843,2840,1,0,0,0,2844,2847,
        1,0,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,465,1,0,0,0,2847,
        2845,1,0,0,0,2848,2849,6,233,-1,0,2849,2850,3,464,232,0,2850,2856,
        1,0,0,0,2851,2852,10,1,0,0,2852,2853,5,109,0,0,2853,2855,3,464,232,
        0,2854,2851,1,0,0,0,2855,2858,1,0,0,0,2856,2854,1,0,0,0,2856,2857,
        1,0,0,0,2857,467,1,0,0,0,2858,2856,1,0,0,0,2859,2860,6,234,-1,0,
        2860,2861,3,466,233,0,2861,2867,1,0,0,0,2862,2863,10,1,0,0,2863,
        2864,5,100,0,0,2864,2866,3,466,233,0,2865,2862,1,0,0,0,2866,2869,
        1,0,0,0,2867,2865,1,0,0,0,2867,2868,1,0,0,0,2868,469,1,0,0,0,2869,
        2867,1,0,0,0,2870,2871,6,235,-1,0,2871,2872,3,468,234,0,2872,2878,
        1,0,0,0,2873,2874,10,1,0,0,2874,2875,5,101,0,0,2875,2877,3,468,234,
        0,2876,2873,1,0,0,0,2877,2880,1,0,0,0,2878,2876,1,0,0,0,2878,2879,
        1,0,0,0,2879,471,1,0,0,0,2880,2878,1,0,0,0,2881,2895,3,470,235,0,
        2882,2883,3,470,235,0,2883,2884,5,93,0,0,2884,2885,3,396,198,0,2885,
        2886,5,94,0,0,2886,2887,3,472,236,0,2887,2895,1,0,0,0,2888,2889,
        3,470,235,0,2889,2890,5,93,0,0,2890,2891,3,396,198,0,2891,2892,5,
        94,0,0,2892,2893,3,482,241,0,2893,2895,1,0,0,0,2894,2881,1,0,0,0,
        2894,2882,1,0,0,0,2894,2888,1,0,0,0,2895,473,1,0,0,0,2896,2899,3,
        472,236,0,2897,2899,3,476,238,0,2898,2896,1,0,0,0,2898,2897,1,0,
        0,0,2899,475,1,0,0,0,2900,2901,3,478,239,0,2901,2902,3,480,240,0,
        2902,2903,3,396,198,0,2903,477,1,0,0,0,2904,2908,3,66,33,0,2905,
        2908,3,426,213,0,2906,2908,3,424,212,0,2907,2904,1,0,0,0,2907,2905,
        1,0,0,0,2907,2906,1,0,0,0,2908,479,1,0,0,0,2909,2910,7,8,0,0,2910,
        481,1,0,0,0,2911,2912,3,484,242,0,2912,2913,5,95,0,0,2913,2914,3,
        492,246,0,2914,483,1,0,0,0,2915,2917,5,76,0,0,2916,2918,3,486,243,
        0,2917,2916,1,0,0,0,2917,2918,1,0,0,0,2918,2919,1,0,0,0,2919,2922,
        5,77,0,0,2920,2922,3,2,1,0,2921,2915,1,0,0,0,2921,2920,1,0,0,0,2922,
        485,1,0,0,0,2923,2928,3,488,244,0,2924,2925,5,83,0,0,2925,2927,3,
        488,244,0,2926,2924,1,0,0,0,2927,2930,1,0,0,0,2928,2926,1,0,0,0,
        2928,2929,1,0,0,0,2929,2940,1,0,0,0,2930,2928,1,0,0,0,2931,2936,
        3,2,1,0,2932,2933,5,83,0,0,2933,2935,3,2,1,0,2934,2932,1,0,0,0,2935,
        2938,1,0,0,0,2936,2934,1,0,0,0,2936,2937,1,0,0,0,2937,2940,1,0,0,
        0,2938,2936,1,0,0,0,2939,2923,1,0,0,0,2939,2931,1,0,0,0,2940,487,
        1,0,0,0,2941,2943,3,172,86,0,2942,2941,1,0,0,0,2943,2946,1,0,0,0,
        2944,2942,1,0,0,0,2944,2945,1,0,0,0,2945,2947,1,0,0,0,2946,2944,
        1,0,0,0,2947,2948,3,490,245,0,2948,2949,3,132,66,0,2949,2952,1,0,
        0,0,2950,2952,3,170,85,0,2951,2944,1,0,0,0,2951,2950,1,0,0,0,2952,
        489,1,0,0,0,2953,2956,3,136,68,0,2954,2956,5,15,0,0,2955,2953,1,
        0,0,0,2955,2954,1,0,0,0,2956,491,1,0,0,0,2957,2960,3,396,198,0,2958,
        2960,3,284,142,0,2959,2957,1,0,0,0,2959,2958,1,0,0,0,2960,493,1,
        0,0,0,2961,2962,5,58,0,0,2962,2963,5,76,0,0,2963,2964,3,396,198,
        0,2964,2965,5,77,0,0,2965,2966,3,324,162,0,2966,495,1,0,0,0,2967,
        2968,3,396,198,0,2968,497,1,0,0,0,363,503,507,511,524,529,533,542,
        548,553,556,561,566,571,574,579,584,591,596,603,608,610,617,631,
        636,644,651,657,662,672,675,689,694,699,704,710,715,720,725,730,
        735,744,748,751,756,762,768,776,785,796,825,830,834,842,849,858,
        872,875,887,890,906,911,918,923,929,932,935,938,952,963,977,986,
        993,1002,1009,1014,1029,1036,1042,1046,1050,1054,1058,1063,1070,
        1073,1077,1080,1086,1091,1094,1098,1102,1108,1113,1115,1124,1131,
        1147,1153,1156,1161,1165,1172,1175,1179,1184,1191,1200,1206,1213,
        1218,1225,1233,1243,1248,1252,1262,1267,1275,1278,1285,1288,1296,
        1299,1304,1309,1315,1319,1324,1329,1334,1340,1346,1349,1352,1361,
        1367,1373,1376,1379,1387,1393,1399,1403,1409,1418,1424,1431,1436,
        1443,1455,1462,1467,1475,1480,1486,1489,1492,1505,1516,1523,1533,
        1538,1549,1554,1567,1572,1584,1594,1599,1607,1610,1617,1625,1631,
        1640,1650,1654,1657,1666,1680,1683,1692,1697,1705,1711,1715,1720,
        1725,1729,1740,1747,1762,1784,1812,1827,1836,1844,1848,1857,1866,
        1877,1881,1907,1911,1916,1920,1924,1932,1936,1940,1947,1956,1977,
        1983,1989,2014,2019,2025,2037,2048,2058,2061,2066,2075,2080,2084,
        2096,2100,2104,2108,2112,2118,2124,2128,2134,2140,2146,2152,2160,
        2167,2174,2179,2183,2188,2193,2197,2202,2207,2211,2216,2221,2225,
        2230,2235,2239,2246,2251,2255,2260,2264,2269,2273,2278,2282,2287,
        2291,2298,2302,2307,2311,2317,2319,2324,2329,2335,2339,2344,2348,
        2352,2356,2358,2365,2376,2387,2395,2406,2410,2415,2419,2424,2432,
        2438,2442,2446,2450,2456,2462,2464,2476,2482,2488,2510,2525,2530,
        2537,2542,2549,2554,2561,2566,2573,2578,2587,2592,2596,2603,2609,
        2616,2623,2630,2638,2645,2653,2657,2661,2663,2667,2671,2673,2688,
        2703,2715,2726,2732,2746,2748,2760,2762,2781,2783,2805,2807,2809,
        2821,2823,2834,2845,2856,2867,2878,2894,2898,2907,2917,2921,2928,
        2936,2939,2944,2951,2955,2959
    ]

class Java20Parser ( Parser ):

    grammarFileName = "Java20Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'exports'", "'module'", "'non-sealed'", 
                     "'<>'", "'open'", "'opens'", "'permits'", "'provides'", 
                     "'record'", "'requires'", "'sealed'", "'to'", "'transitive'", 
                     "'uses'", "'var'", "'with'", "'yield'", "'abstract'", 
                     "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
                     "'catch'", "'char'", "'class'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'enum'", 
                     "'extends'", "'final'", "'finally'", "'float'", "'for'", 
                     "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'native'", "'new'", 
                     "'package'", "'private'", "'protected'", "'public'", 
                     "'return'", "'short'", "'static'", "'strictfp'", "'super'", 
                     "'switch'", "'synchronized'", "'this'", "'throw'", 
                     "'throws'", "'transient'", "'try'", "'void'", "'volatile'", 
                     "'while'", "'_'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'...'", "'@'", "'::'", "'='", "'>'", "'<'", "'!'", 
                     "'~'", "'?'", "':'", "'->'", "'=='", "'<='", "'>='", 
                     "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                     "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", 
                     "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
                     "'>>='", "'>>>='" ]

    symbolicNames = [ "<INVALID>", "EXPORTS", "MODULE", "NONSEALED", "OACA", 
                      "OPEN", "OPENS", "PERMITS", "PROVIDES", "RECORD", 
                      "REQUIRES", "SEALED", "TO", "TRANSITIVE", "USES", 
                      "VAR", "WITH", "YIELD", "ABSTRACT", "ASSERT", "BOOLEAN", 
                      "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", 
                      "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
                      "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", 
                      "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", 
                      "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", 
                      "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
                      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "UNDER_SCORE", "IntegerLiteral", 
                      "FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", 
                      "StringLiteral", "TextBlock", "NullLiteral", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "SEMI", "COMMA", "DOT", "ELLIPSIS", "AT", "COLONCOLON", 
                      "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", 
                      "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", 
                      "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "URSHIFT_ASSIGN", "Identifier", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_start_ = 0
    RULE_identifier = 1
    RULE_typeIdentifier = 2
    RULE_unqualifiedMethodIdentifier = 3
    RULE_contextualKeyword = 4
    RULE_contextualKeywordMinusForTypeIdentifier = 5
    RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier = 6
    RULE_literal = 7
    RULE_primitiveType = 8
    RULE_numericType = 9
    RULE_integralType = 10
    RULE_floatingPointType = 11
    RULE_referenceType = 12
    RULE_coit = 13
    RULE_classOrInterfaceType = 14
    RULE_classType = 15
    RULE_interfaceType = 16
    RULE_typeVariable = 17
    RULE_arrayType = 18
    RULE_dims = 19
    RULE_typeParameter = 20
    RULE_typeParameterModifier = 21
    RULE_typeBound = 22
    RULE_additionalBound = 23
    RULE_typeArguments = 24
    RULE_typeArgumentList = 25
    RULE_typeArgument = 26
    RULE_wildcard = 27
    RULE_wildcardBounds = 28
    RULE_moduleName = 29
    RULE_packageName = 30
    RULE_typeName = 31
    RULE_packageOrTypeName = 32
    RULE_expressionName = 33
    RULE_methodName = 34
    RULE_ambiguousName = 35
    RULE_compilationUnit = 36
    RULE_ordinaryCompilationUnit = 37
    RULE_modularCompilationUnit = 38
    RULE_packageDeclaration = 39
    RULE_packageModifier = 40
    RULE_importDeclaration = 41
    RULE_singleTypeImportDeclaration = 42
    RULE_typeImportOnDemandDeclaration = 43
    RULE_singleStaticImportDeclaration = 44
    RULE_staticImportOnDemandDeclaration = 45
    RULE_topLevelClassOrInterfaceDeclaration = 46
    RULE_moduleDeclaration = 47
    RULE_moduleDirective = 48
    RULE_requiresModifier = 49
    RULE_classDeclaration = 50
    RULE_normalClassDeclaration = 51
    RULE_classModifier = 52
    RULE_typeParameters = 53
    RULE_typeParameterList = 54
    RULE_classExtends = 55
    RULE_classImplements = 56
    RULE_interfaceTypeList = 57
    RULE_classPermits = 58
    RULE_classBody = 59
    RULE_classBodyDeclaration = 60
    RULE_classMemberDeclaration = 61
    RULE_fieldDeclaration = 62
    RULE_fieldModifier = 63
    RULE_variableDeclaratorList = 64
    RULE_variableDeclarator = 65
    RULE_variableDeclaratorId = 66
    RULE_variableInitializer = 67
    RULE_unannType = 68
    RULE_unannPrimitiveType = 69
    RULE_unannReferenceType = 70
    RULE_unannClassOrInterfaceType = 71
    RULE_uCOIT = 72
    RULE_unannClassType = 73
    RULE_unannInterfaceType = 74
    RULE_unannTypeVariable = 75
    RULE_unannArrayType = 76
    RULE_methodDeclaration = 77
    RULE_methodModifier = 78
    RULE_methodHeader = 79
    RULE_result = 80
    RULE_methodDeclarator = 81
    RULE_receiverParameter = 82
    RULE_formalParameterList = 83
    RULE_formalParameter = 84
    RULE_variableArityParameter = 85
    RULE_variableModifier = 86
    RULE_throwsT = 87
    RULE_exceptionTypeList = 88
    RULE_exceptionType = 89
    RULE_methodBody = 90
    RULE_instanceInitializer = 91
    RULE_staticInitializer = 92
    RULE_constructorDeclaration = 93
    RULE_constructorModifier = 94
    RULE_constructorDeclarator = 95
    RULE_simpleTypeName = 96
    RULE_constructorBody = 97
    RULE_explicitConstructorInvocation = 98
    RULE_enumDeclaration = 99
    RULE_enumBody = 100
    RULE_enumConstantList = 101
    RULE_enumConstant = 102
    RULE_enumConstantModifier = 103
    RULE_enumBodyDeclarations = 104
    RULE_recordDeclaration = 105
    RULE_recordHeader = 106
    RULE_recordComponentList = 107
    RULE_recordComponent = 108
    RULE_variableArityRecordComponent = 109
    RULE_recordComponentModifier = 110
    RULE_recordBody = 111
    RULE_recordBodyDeclaration = 112
    RULE_compactConstructorDeclaration = 113
    RULE_interfaceDeclaration = 114
    RULE_normalInterfaceDeclaration = 115
    RULE_interfaceModifier = 116
    RULE_interfaceExtends = 117
    RULE_interfacePermits = 118
    RULE_interfaceBody = 119
    RULE_interfaceMemberDeclaration = 120
    RULE_constantDeclaration = 121
    RULE_constantModifier = 122
    RULE_interfaceMethodDeclaration = 123
    RULE_interfaceMethodModifier = 124
    RULE_annotationInterfaceDeclaration = 125
    RULE_annotationInterfaceBody = 126
    RULE_annotationInterfaceMemberDeclaration = 127
    RULE_annotationInterfaceElementDeclaration = 128
    RULE_annotationInterfaceElementModifier = 129
    RULE_defaultValue = 130
    RULE_annotation = 131
    RULE_normalAnnotation = 132
    RULE_elementValuePairList = 133
    RULE_elementValuePair = 134
    RULE_elementValue = 135
    RULE_elementValueArrayInitializer = 136
    RULE_elementValueList = 137
    RULE_markerAnnotation = 138
    RULE_singleElementAnnotation = 139
    RULE_arrayInitializer = 140
    RULE_variableInitializerList = 141
    RULE_block = 142
    RULE_blockStatements = 143
    RULE_blockStatement = 144
    RULE_localClassOrInterfaceDeclaration = 145
    RULE_localVariableDeclaration = 146
    RULE_localVariableType = 147
    RULE_localVariableDeclarationStatement = 148
    RULE_statement = 149
    RULE_statementNoShortIf = 150
    RULE_statementWithoutTrailingSubstatement = 151
    RULE_emptyStatement_ = 152
    RULE_labeledStatement = 153
    RULE_labeledStatementNoShortIf = 154
    RULE_expressionStatement = 155
    RULE_statementExpression = 156
    RULE_ifThenStatement = 157
    RULE_ifThenElseStatement = 158
    RULE_ifThenElseStatementNoShortIf = 159
    RULE_assertStatement = 160
    RULE_switchStatement = 161
    RULE_switchBlock = 162
    RULE_switchRule = 163
    RULE_switchBlockStatementGroup = 164
    RULE_switchLabel = 165
    RULE_caseConstant = 166
    RULE_whileStatement = 167
    RULE_whileStatementNoShortIf = 168
    RULE_doStatement = 169
    RULE_forStatement = 170
    RULE_forStatementNoShortIf = 171
    RULE_basicForStatement = 172
    RULE_basicForStatementNoShortIf = 173
    RULE_forInit = 174
    RULE_forUpdate = 175
    RULE_statementExpressionList = 176
    RULE_enhancedForStatement = 177
    RULE_enhancedForStatementNoShortIf = 178
    RULE_breakStatement = 179
    RULE_continueStatement = 180
    RULE_returnStatement = 181
    RULE_throwStatement = 182
    RULE_synchronizedStatement = 183
    RULE_tryStatement = 184
    RULE_catches = 185
    RULE_catchClause = 186
    RULE_catchFormalParameter = 187
    RULE_catchType = 188
    RULE_finallyBlock = 189
    RULE_tryWithResourcesStatement = 190
    RULE_resourceSpecification = 191
    RULE_resourceList = 192
    RULE_resource = 193
    RULE_variableAccess = 194
    RULE_yieldStatement = 195
    RULE_pattern = 196
    RULE_typePattern = 197
    RULE_expression = 198
    RULE_primary = 199
    RULE_primaryNoNewArray = 200
    RULE_pNNA = 201
    RULE_classLiteral = 202
    RULE_classInstanceCreationExpression = 203
    RULE_unqualifiedClassInstanceCreationExpression = 204
    RULE_classOrInterfaceTypeToInstantiate = 205
    RULE_typeArgumentsOrDiamond = 206
    RULE_arrayCreationExpression = 207
    RULE_arrayCreationExpressionWithoutInitializer = 208
    RULE_arrayCreationExpressionWithInitializer = 209
    RULE_dimExprs = 210
    RULE_dimExpr = 211
    RULE_arrayAccess = 212
    RULE_fieldAccess = 213
    RULE_methodInvocation = 214
    RULE_argumentList = 215
    RULE_methodReference = 216
    RULE_postfixExpression = 217
    RULE_pfE = 218
    RULE_postIncrementExpression = 219
    RULE_postDecrementExpression = 220
    RULE_unaryExpression = 221
    RULE_preIncrementExpression = 222
    RULE_preDecrementExpression = 223
    RULE_unaryExpressionNotPlusMinus = 224
    RULE_castExpression = 225
    RULE_multiplicativeExpression = 226
    RULE_additiveExpression = 227
    RULE_shiftExpression = 228
    RULE_relationalExpression = 229
    RULE_equalityExpression = 230
    RULE_andExpression = 231
    RULE_exclusiveOrExpression = 232
    RULE_inclusiveOrExpression = 233
    RULE_conditionalAndExpression = 234
    RULE_conditionalOrExpression = 235
    RULE_conditionalExpression = 236
    RULE_assignmentExpression = 237
    RULE_assignment = 238
    RULE_leftHandSide = 239
    RULE_assignmentOperator = 240
    RULE_lambdaExpression = 241
    RULE_lambdaParameters = 242
    RULE_lambdaParameterList = 243
    RULE_lambdaParameter = 244
    RULE_lambdaParameterType = 245
    RULE_lambdaBody = 246
    RULE_switchExpression = 247
    RULE_constantExpression = 248

    ruleNames =  [ "start_", "identifier", "typeIdentifier", "unqualifiedMethodIdentifier", 
                   "contextualKeyword", "contextualKeywordMinusForTypeIdentifier", 
                   "contextualKeywordMinusForUnqualifiedMethodIdentifier", 
                   "literal", "primitiveType", "numericType", "integralType", 
                   "floatingPointType", "referenceType", "coit", "classOrInterfaceType", 
                   "classType", "interfaceType", "typeVariable", "arrayType", 
                   "dims", "typeParameter", "typeParameterModifier", "typeBound", 
                   "additionalBound", "typeArguments", "typeArgumentList", 
                   "typeArgument", "wildcard", "wildcardBounds", "moduleName", 
                   "packageName", "typeName", "packageOrTypeName", "expressionName", 
                   "methodName", "ambiguousName", "compilationUnit", "ordinaryCompilationUnit", 
                   "modularCompilationUnit", "packageDeclaration", "packageModifier", 
                   "importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
                   "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", 
                   "topLevelClassOrInterfaceDeclaration", "moduleDeclaration", 
                   "moduleDirective", "requiresModifier", "classDeclaration", 
                   "normalClassDeclaration", "classModifier", "typeParameters", 
                   "typeParameterList", "classExtends", "classImplements", 
                   "interfaceTypeList", "classPermits", "classBody", "classBodyDeclaration", 
                   "classMemberDeclaration", "fieldDeclaration", "fieldModifier", 
                   "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "unannType", "unannPrimitiveType", 
                   "unannReferenceType", "unannClassOrInterfaceType", "uCOIT", 
                   "unannClassType", "unannInterfaceType", "unannTypeVariable", 
                   "unannArrayType", "methodDeclaration", "methodModifier", 
                   "methodHeader", "result", "methodDeclarator", "receiverParameter", 
                   "formalParameterList", "formalParameter", "variableArityParameter", 
                   "variableModifier", "throwsT", "exceptionTypeList", "exceptionType", 
                   "methodBody", "instanceInitializer", "staticInitializer", 
                   "constructorDeclaration", "constructorModifier", "constructorDeclarator", 
                   "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
                   "enumDeclaration", "enumBody", "enumConstantList", "enumConstant", 
                   "enumConstantModifier", "enumBodyDeclarations", "recordDeclaration", 
                   "recordHeader", "recordComponentList", "recordComponent", 
                   "variableArityRecordComponent", "recordComponentModifier", 
                   "recordBody", "recordBodyDeclaration", "compactConstructorDeclaration", 
                   "interfaceDeclaration", "normalInterfaceDeclaration", 
                   "interfaceModifier", "interfaceExtends", "interfacePermits", 
                   "interfaceBody", "interfaceMemberDeclaration", "constantDeclaration", 
                   "constantModifier", "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "annotationInterfaceDeclaration", "annotationInterfaceBody", 
                   "annotationInterfaceMemberDeclaration", "annotationInterfaceElementDeclaration", 
                   "annotationInterfaceElementModifier", "defaultValue", 
                   "annotation", "normalAnnotation", "elementValuePairList", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "elementValueList", "markerAnnotation", "singleElementAnnotation", 
                   "arrayInitializer", "variableInitializerList", "block", 
                   "blockStatements", "blockStatement", "localClassOrInterfaceDeclaration", 
                   "localVariableDeclaration", "localVariableType", "localVariableDeclarationStatement", 
                   "statement", "statementNoShortIf", "statementWithoutTrailingSubstatement", 
                   "emptyStatement_", "labeledStatement", "labeledStatementNoShortIf", 
                   "expressionStatement", "statementExpression", "ifThenStatement", 
                   "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                   "assertStatement", "switchStatement", "switchBlock", 
                   "switchRule", "switchBlockStatementGroup", "switchLabel", 
                   "caseConstant", "whileStatement", "whileStatementNoShortIf", 
                   "doStatement", "forStatement", "forStatementNoShortIf", 
                   "basicForStatement", "basicForStatementNoShortIf", "forInit", 
                   "forUpdate", "statementExpressionList", "enhancedForStatement", 
                   "enhancedForStatementNoShortIf", "breakStatement", "continueStatement", 
                   "returnStatement", "throwStatement", "synchronizedStatement", 
                   "tryStatement", "catches", "catchClause", "catchFormalParameter", 
                   "catchType", "finallyBlock", "tryWithResourcesStatement", 
                   "resourceSpecification", "resourceList", "resource", 
                   "variableAccess", "yieldStatement", "pattern", "typePattern", 
                   "expression", "primary", "primaryNoNewArray", "pNNA", 
                   "classLiteral", "classInstanceCreationExpression", "unqualifiedClassInstanceCreationExpression", 
                   "classOrInterfaceTypeToInstantiate", "typeArgumentsOrDiamond", 
                   "arrayCreationExpression", "arrayCreationExpressionWithoutInitializer", 
                   "arrayCreationExpressionWithInitializer", "dimExprs", 
                   "dimExpr", "arrayAccess", "fieldAccess", "methodInvocation", 
                   "argumentList", "methodReference", "postfixExpression", 
                   "pfE", "postIncrementExpression", "postDecrementExpression", 
                   "unaryExpression", "preIncrementExpression", "preDecrementExpression", 
                   "unaryExpressionNotPlusMinus", "castExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "conditionalAndExpression", 
                   "conditionalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignment", "leftHandSide", "assignmentOperator", "lambdaExpression", 
                   "lambdaParameters", "lambdaParameterList", "lambdaParameter", 
                   "lambdaParameterType", "lambdaBody", "switchExpression", 
                   "constantExpression" ]

    EOF = Token.EOF
    EXPORTS=1
    MODULE=2
    NONSEALED=3
    OACA=4
    OPEN=5
    OPENS=6
    PERMITS=7
    PROVIDES=8
    RECORD=9
    REQUIRES=10
    SEALED=11
    TO=12
    TRANSITIVE=13
    USES=14
    VAR=15
    WITH=16
    YIELD=17
    ABSTRACT=18
    ASSERT=19
    BOOLEAN=20
    BREAK=21
    BYTE=22
    CASE=23
    CATCH=24
    CHAR=25
    CLASS=26
    CONST=27
    CONTINUE=28
    DEFAULT=29
    DO=30
    DOUBLE=31
    ELSE=32
    ENUM=33
    EXTENDS=34
    FINAL=35
    FINALLY=36
    FLOAT=37
    FOR=38
    IF=39
    GOTO=40
    IMPLEMENTS=41
    IMPORT=42
    INSTANCEOF=43
    INT=44
    INTERFACE=45
    LONG=46
    NATIVE=47
    NEW=48
    PACKAGE=49
    PRIVATE=50
    PROTECTED=51
    PUBLIC=52
    RETURN=53
    SHORT=54
    STATIC=55
    STRICTFP=56
    SUPER=57
    SWITCH=58
    SYNCHRONIZED=59
    THIS=60
    THROW=61
    THROWS=62
    TRANSIENT=63
    TRY=64
    VOID=65
    VOLATILE=66
    WHILE=67
    UNDER_SCORE=68
    IntegerLiteral=69
    FloatingPointLiteral=70
    BooleanLiteral=71
    CharacterLiteral=72
    StringLiteral=73
    TextBlock=74
    NullLiteral=75
    LPAREN=76
    RPAREN=77
    LBRACE=78
    RBRACE=79
    LBRACK=80
    RBRACK=81
    SEMI=82
    COMMA=83
    DOT=84
    ELLIPSIS=85
    AT=86
    COLONCOLON=87
    ASSIGN=88
    GT=89
    LT=90
    BANG=91
    TILDE=92
    QUESTION=93
    COLON=94
    ARROW=95
    EQUAL=96
    LE=97
    GE=98
    NOTEQUAL=99
    AND=100
    OR=101
    INC=102
    DEC=103
    ADD=104
    SUB=105
    MUL=106
    DIV=107
    BITAND=108
    BITOR=109
    CARET=110
    MOD=111
    ADD_ASSIGN=112
    SUB_ASSIGN=113
    MUL_ASSIGN=114
    DIV_ASSIGN=115
    AND_ASSIGN=116
    OR_ASSIGN=117
    XOR_ASSIGN=118
    MOD_ASSIGN=119
    LSHIFT_ASSIGN=120
    RSHIFT_ASSIGN=121
    URSHIFT_ASSIGN=122
    Identifier=123
    WS=124
    COMMENT=125
    LINE_COMMENT=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Start_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compilationUnit(self):
            return self.getTypedRuleContext(Java20Parser.CompilationUnitContext,0)


        def EOF(self):
            return self.getToken(Java20Parser.EOF, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_start_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_" ):
                listener.enterStart_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_" ):
                listener.exitStart_(self)




    def start_(self):

        localctx = Java20Parser.Start_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.compilationUnit()
            self.state = 499
            self.match(Java20Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java20Parser.Identifier, 0)

        def contextualKeyword(self):
            return self.getTypedRuleContext(Java20Parser.ContextualKeywordContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = Java20Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_identifier)
        try:
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(Java20Parser.Identifier)
                pass
            elif token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.contextualKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java20Parser.Identifier, 0)

        def contextualKeywordMinusForTypeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.ContextualKeywordMinusForTypeIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = Java20Parser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeIdentifier)
        try:
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.match(Java20Parser.Identifier)
                pass
            elif token in [1, 2, 3, 5, 6, 8, 10, 12, 13, 14, 16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.contextualKeywordMinusForTypeIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedMethodIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java20Parser.Identifier, 0)

        def contextualKeywordMinusForUnqualifiedMethodIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.ContextualKeywordMinusForUnqualifiedMethodIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unqualifiedMethodIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedMethodIdentifier" ):
                listener.enterUnqualifiedMethodIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedMethodIdentifier" ):
                listener.exitUnqualifiedMethodIdentifier(self)




    def unqualifiedMethodIdentifier(self):

        localctx = Java20Parser.UnqualifiedMethodIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedMethodIdentifier)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.match(Java20Parser.Identifier)
                pass
            elif token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.contextualKeywordMinusForUnqualifiedMethodIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORTS(self):
            return self.getToken(Java20Parser.EXPORTS, 0)

        def MODULE(self):
            return self.getToken(Java20Parser.MODULE, 0)

        def NONSEALED(self):
            return self.getToken(Java20Parser.NONSEALED, 0)

        def OPEN(self):
            return self.getToken(Java20Parser.OPEN, 0)

        def OPENS(self):
            return self.getToken(Java20Parser.OPENS, 0)

        def PERMITS(self):
            return self.getToken(Java20Parser.PERMITS, 0)

        def PROVIDES(self):
            return self.getToken(Java20Parser.PROVIDES, 0)

        def RECORD(self):
            return self.getToken(Java20Parser.RECORD, 0)

        def REQUIRES(self):
            return self.getToken(Java20Parser.REQUIRES, 0)

        def SEALED(self):
            return self.getToken(Java20Parser.SEALED, 0)

        def TO(self):
            return self.getToken(Java20Parser.TO, 0)

        def TRANSITIVE(self):
            return self.getToken(Java20Parser.TRANSITIVE, 0)

        def USES(self):
            return self.getToken(Java20Parser.USES, 0)

        def VAR(self):
            return self.getToken(Java20Parser.VAR, 0)

        def WITH(self):
            return self.getToken(Java20Parser.WITH, 0)

        def YIELD(self):
            return self.getToken(Java20Parser.YIELD, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_contextualKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualKeyword" ):
                listener.enterContextualKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualKeyword" ):
                listener.exitContextualKeyword(self)




    def contextualKeyword(self):

        localctx = Java20Parser.ContextualKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_contextualKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualKeywordMinusForTypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORTS(self):
            return self.getToken(Java20Parser.EXPORTS, 0)

        def MODULE(self):
            return self.getToken(Java20Parser.MODULE, 0)

        def NONSEALED(self):
            return self.getToken(Java20Parser.NONSEALED, 0)

        def OPEN(self):
            return self.getToken(Java20Parser.OPEN, 0)

        def OPENS(self):
            return self.getToken(Java20Parser.OPENS, 0)

        def PROVIDES(self):
            return self.getToken(Java20Parser.PROVIDES, 0)

        def REQUIRES(self):
            return self.getToken(Java20Parser.REQUIRES, 0)

        def TO(self):
            return self.getToken(Java20Parser.TO, 0)

        def TRANSITIVE(self):
            return self.getToken(Java20Parser.TRANSITIVE, 0)

        def USES(self):
            return self.getToken(Java20Parser.USES, 0)

        def WITH(self):
            return self.getToken(Java20Parser.WITH, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_contextualKeywordMinusForTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualKeywordMinusForTypeIdentifier" ):
                listener.enterContextualKeywordMinusForTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualKeywordMinusForTypeIdentifier" ):
                listener.exitContextualKeywordMinusForTypeIdentifier(self)




    def contextualKeywordMinusForTypeIdentifier(self):

        localctx = Java20Parser.ContextualKeywordMinusForTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_contextualKeywordMinusForTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 95598) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualKeywordMinusForUnqualifiedMethodIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORTS(self):
            return self.getToken(Java20Parser.EXPORTS, 0)

        def MODULE(self):
            return self.getToken(Java20Parser.MODULE, 0)

        def NONSEALED(self):
            return self.getToken(Java20Parser.NONSEALED, 0)

        def OPEN(self):
            return self.getToken(Java20Parser.OPEN, 0)

        def OPENS(self):
            return self.getToken(Java20Parser.OPENS, 0)

        def PERMITS(self):
            return self.getToken(Java20Parser.PERMITS, 0)

        def PROVIDES(self):
            return self.getToken(Java20Parser.PROVIDES, 0)

        def RECORD(self):
            return self.getToken(Java20Parser.RECORD, 0)

        def REQUIRES(self):
            return self.getToken(Java20Parser.REQUIRES, 0)

        def SEALED(self):
            return self.getToken(Java20Parser.SEALED, 0)

        def TO(self):
            return self.getToken(Java20Parser.TO, 0)

        def TRANSITIVE(self):
            return self.getToken(Java20Parser.TRANSITIVE, 0)

        def USES(self):
            return self.getToken(Java20Parser.USES, 0)

        def VAR(self):
            return self.getToken(Java20Parser.VAR, 0)

        def WITH(self):
            return self.getToken(Java20Parser.WITH, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualKeywordMinusForUnqualifiedMethodIdentifier" ):
                listener.enterContextualKeywordMinusForUnqualifiedMethodIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualKeywordMinusForUnqualifiedMethodIdentifier" ):
                listener.exitContextualKeywordMinusForUnqualifiedMethodIdentifier(self)




    def contextualKeywordMinusForUnqualifiedMethodIdentifier(self):

        localctx = Java20Parser.ContextualKeywordMinusForUnqualifiedMethodIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 131054) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(Java20Parser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(Java20Parser.FloatingPointLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(Java20Parser.BooleanLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(Java20Parser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(Java20Parser.StringLiteral, 0)

        def TextBlock(self):
            return self.getToken(Java20Parser.TextBlock, 0)

        def NullLiteral(self):
            return self.getToken(Java20Parser.NullLiteral, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = Java20Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericType(self):
            return self.getTypedRuleContext(Java20Parser.NumericTypeContext,0)


        def BOOLEAN(self):
            return self.getToken(Java20Parser.BOOLEAN, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = Java20Parser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 521
                self.annotation()
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 31, 37, 44, 46, 54]:
                self.state = 527
                self.numericType()
                pass
            elif token in [20]:
                self.state = 528
                self.match(Java20Parser.BOOLEAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integralType(self):
            return self.getTypedRuleContext(Java20Parser.IntegralTypeContext,0)


        def floatingPointType(self):
            return self.getTypedRuleContext(Java20Parser.FloatingPointTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)




    def numericType(self):

        localctx = Java20Parser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_numericType)
        try:
            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 44, 46, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.integralType()
                pass
            elif token in [31, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.floatingPointType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(Java20Parser.BYTE, 0)

        def SHORT(self):
            return self.getToken(Java20Parser.SHORT, 0)

        def INT(self):
            return self.getToken(Java20Parser.INT, 0)

        def LONG(self):
            return self.getToken(Java20Parser.LONG, 0)

        def CHAR(self):
            return self.getToken(Java20Parser.CHAR, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_integralType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegralType" ):
                listener.enterIntegralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegralType" ):
                listener.exitIntegralType(self)




    def integralType(self):

        localctx = Java20Parser.IntegralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_integralType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18102359477452800) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingPointTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(Java20Parser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(Java20Parser.DOUBLE, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_floatingPointType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatingPointType" ):
                listener.enterFloatingPointType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatingPointType" ):
                listener.exitFloatingPointType(self)




    def floatingPointType(self):

        localctx = Java20Parser.FloatingPointTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_floatingPointType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            _la = self._input.LA(1)
            if not(_la==31 or _la==37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.ClassOrInterfaceTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java20Parser.TypeVariableContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(Java20Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)




    def referenceType(self):

        localctx = Java20Parser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_referenceType)
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.classOrInterfaceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.typeVariable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 541
                self.arrayType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def coit(self):
            return self.getTypedRuleContext(Java20Parser.CoitContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_coit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoit" ):
                listener.enterCoit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoit" ):
                listener.exitCoit(self)




    def coit(self):

        localctx = Java20Parser.CoitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_coit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(Java20Parser.DOT)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 545
                self.annotation()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 551
            self.typeIdentifier()
            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 552
                self.typeArguments()


            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 555
                self.coit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def coit(self):
            return self.getTypedRuleContext(Java20Parser.CoitContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = Java20Parser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 558
                self.packageName()
                self.state = 559
                self.match(Java20Parser.DOT)


            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 563
                self.annotation()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 569
            self.typeIdentifier()
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 570
                self.typeArguments()


            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 573
                self.coit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = Java20Parser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 576
                    self.annotation()
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 582
                self.typeIdentifier()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 583
                    self.typeArguments()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.packageName()
                self.state = 587
                self.match(Java20Parser.DOT)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 588
                    self.annotation()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 594
                self.typeIdentifier()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 595
                    self.typeArguments()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 598
                self.classOrInterfaceType()
                self.state = 599
                self.match(Java20Parser.DOT)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 600
                    self.annotation()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 606
                self.typeIdentifier()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 607
                    self.typeArguments()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)




    def interfaceType(self):

        localctx = Java20Parser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariable" ):
                listener.enterTypeVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariable" ):
                listener.exitTypeVariable(self)




    def typeVariable(self):

        localctx = Java20Parser.TypeVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 614
                self.annotation()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 620
            self.typeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(Java20Parser.PrimitiveTypeContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java20Parser.TypeVariableContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = Java20Parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_arrayType)
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.primitiveType()
                self.state = 623
                self.dims()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.classType()
                self.state = 626
                self.dims()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.typeVariable()
                self.state = 629
                self.dims()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.LBRACK)
            else:
                return self.getToken(Java20Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.RBRACK)
            else:
                return self.getToken(Java20Parser.RBRACK, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_dims

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDims" ):
                listener.enterDims(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDims" ):
                listener.exitDims(self)




    def dims(self):

        localctx = Java20Parser.DimsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_dims)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 633
                self.annotation()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 639
            self.match(Java20Parser.LBRACK)
            self.state = 640
            self.match(Java20Parser.RBRACK)
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 641
                        self.annotation()
                        self.state = 646
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 647
                    self.match(Java20Parser.LBRACK)
                    self.state = 648
                    self.match(Java20Parser.RBRACK) 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def typeParameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeParameterModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeParameterModifierContext,i)


        def typeBound(self):
            return self.getTypedRuleContext(Java20Parser.TypeBoundContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = Java20Parser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 654
                self.typeParameterModifier()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 660
            self.typeIdentifier()
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 661
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)




    def typeParameterModifier(self):

        localctx = Java20Parser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java20Parser.EXTENDS, 0)

        def typeVariable(self):
            return self.getTypedRuleContext(Java20Parser.TypeVariableContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.ClassOrInterfaceTypeContext,0)


        def additionalBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AdditionalBoundContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AdditionalBoundContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = Java20Parser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(Java20Parser.EXTENDS)
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 667
                self.typeVariable()
                pass

            elif la_ == 2:
                self.state = 668
                self.classOrInterfaceType()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 669
                    self.additionalBound()
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionalBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITAND(self):
            return self.getToken(Java20Parser.BITAND, 0)

        def interfaceType(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_additionalBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditionalBound" ):
                listener.enterAdditionalBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditionalBound" ):
                listener.exitAdditionalBound(self)




    def additionalBound(self):

        localctx = Java20Parser.AdditionalBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_additionalBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(Java20Parser.BITAND)
            self.state = 678
            self.interfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Java20Parser.LT, 0)

        def typeArgumentList(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentListContext,0)


        def GT(self):
            return self.getToken(Java20Parser.GT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = Java20Parser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(Java20Parser.LT)
            self.state = 681
            self.typeArgumentList()
            self.state = 682
            self.match(Java20Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentList" ):
                listener.enterTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentList" ):
                listener.exitTypeArgumentList(self)




    def typeArgumentList(self):

        localctx = Java20Parser.TypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.typeArgument()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 685
                self.match(Java20Parser.COMMA)
                self.state = 686
                self.typeArgument()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def wildcard(self):
            return self.getTypedRuleContext(Java20Parser.WildcardContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = Java20Parser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typeArgument)
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.referenceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Java20Parser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def wildcardBounds(self):
            return self.getTypedRuleContext(Java20Parser.WildcardBoundsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard" ):
                listener.enterWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard" ):
                listener.exitWildcard(self)




    def wildcard(self):

        localctx = Java20Parser.WildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 696
                self.annotation()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            self.match(Java20Parser.QUESTION)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==57:
                self.state = 703
                self.wildcardBounds()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java20Parser.EXTENDS, 0)

        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_wildcardBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardBounds" ):
                listener.enterWildcardBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardBounds" ):
                listener.exitWildcardBounds(self)




    def wildcardBounds(self):

        localctx = Java20Parser.WildcardBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_wildcardBounds)
        try:
            self.state = 710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.match(Java20Parser.EXTENDS)
                self.state = 707
                self.referenceType()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.match(Java20Parser.SUPER)
                self.state = 709
                self.referenceType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def moduleName(self):
            return self.getTypedRuleContext(Java20Parser.ModuleNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = Java20Parser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_moduleName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.identifier()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 713
                self.match(Java20Parser.DOT)
                self.state = 714
                self.moduleName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)




    def packageName(self):

        localctx = Java20Parser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.identifier()
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 718
                self.match(Java20Parser.DOT)
                self.state = 719
                self.packageName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = Java20Parser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.packageName()
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 723
                self.match(Java20Parser.DOT)
                self.state = 724
                self.typeIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageOrTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def packageOrTypeName(self):
            return self.getTypedRuleContext(Java20Parser.PackageOrTypeNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_packageOrTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageOrTypeName" ):
                listener.enterPackageOrTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageOrTypeName" ):
                listener.exitPackageOrTypeName(self)




    def packageOrTypeName(self):

        localctx = Java20Parser.PackageOrTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_packageOrTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.identifier()
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(Java20Parser.DOT)
                self.state = 729
                self.packageOrTypeName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def ambiguousName(self):
            return self.getTypedRuleContext(Java20Parser.AmbiguousNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_expressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionName" ):
                listener.enterExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionName" ):
                listener.exitExpressionName(self)




    def expressionName(self):

        localctx = Java20Parser.ExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expressionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 732
                self.ambiguousName()
                self.state = 733
                self.match(Java20Parser.DOT)


            self.state = 737
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedMethodIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.UnqualifiedMethodIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)




    def methodName(self):

        localctx = Java20Parser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.unqualifiedMethodIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def ambiguousName(self):
            return self.getTypedRuleContext(Java20Parser.AmbiguousNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_ambiguousName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousName" ):
                listener.enterAmbiguousName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousName" ):
                listener.exitAmbiguousName(self)




    def ambiguousName(self):

        localctx = Java20Parser.AmbiguousNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ambiguousName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.identifier()
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 742
                self.match(Java20Parser.DOT)
                self.state = 743
                self.ambiguousName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinaryCompilationUnit(self):
            return self.getTypedRuleContext(Java20Parser.OrdinaryCompilationUnitContext,0)


        def modularCompilationUnit(self):
            return self.getTypedRuleContext(Java20Parser.ModularCompilationUnitContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = Java20Parser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_compilationUnit)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.ordinaryCompilationUnit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.modularCompilationUnit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrdinaryCompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ImportDeclarationContext,i)


        def topLevelClassOrInterfaceDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TopLevelClassOrInterfaceDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TopLevelClassOrInterfaceDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_ordinaryCompilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinaryCompilationUnit" ):
                listener.enterOrdinaryCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinaryCompilationUnit" ):
                listener.exitOrdinaryCompilationUnit(self)




    def ordinaryCompilationUnit(self):

        localctx = Java20Parser.OrdinaryCompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ordinaryCompilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 750
                self.packageDeclaration()


            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==42:
                self.state = 753
                self.importDeclaration()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 116002917793925640) != 0) or _la==82 or _la==86:
                self.state = 759
                self.topLevelClassOrInterfaceDeclaration()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModularCompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ModuleDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_modularCompilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModularCompilationUnit" ):
                listener.enterModularCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModularCompilationUnit" ):
                listener.exitModularCompilationUnit(self)




    def modularCompilationUnit(self):

        localctx = Java20Parser.ModularCompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_modularCompilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==42:
                self.state = 765
                self.importDeclaration()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 771
            self.moduleDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(Java20Parser.PACKAGE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.IdentifierContext,i)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def packageModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.PackageModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.PackageModifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = Java20Parser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 773
                self.packageModifier()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 779
            self.match(Java20Parser.PACKAGE)
            self.state = 780
            self.identifier()
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84:
                self.state = 781
                self.match(Java20Parser.DOT)
                self.state = 782
                self.identifier()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 788
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_packageModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageModifier" ):
                listener.enterPackageModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageModifier" ):
                listener.exitPackageModifier(self)




    def packageModifier(self):

        localctx = Java20Parser.PackageModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_packageModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleTypeImportDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.SingleTypeImportDeclarationContext,0)


        def typeImportOnDemandDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.TypeImportOnDemandDeclarationContext,0)


        def singleStaticImportDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.SingleStaticImportDeclarationContext,0)


        def staticImportOnDemandDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.StaticImportOnDemandDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = Java20Parser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_importDeclaration)
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.singleTypeImportDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.typeImportOnDemandDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.singleStaticImportDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.staticImportOnDemandDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTypeImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java20Parser.IMPORT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_singleTypeImportDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeImportDeclaration" ):
                listener.enterSingleTypeImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeImportDeclaration" ):
                listener.exitSingleTypeImportDeclaration(self)




    def singleTypeImportDeclaration(self):

        localctx = Java20Parser.SingleTypeImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_singleTypeImportDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(Java20Parser.IMPORT)
            self.state = 799
            self.typeName()
            self.state = 800
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeImportOnDemandDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java20Parser.IMPORT, 0)

        def packageOrTypeName(self):
            return self.getTypedRuleContext(Java20Parser.PackageOrTypeNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def MUL(self):
            return self.getToken(Java20Parser.MUL, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeImportOnDemandDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeImportOnDemandDeclaration" ):
                listener.enterTypeImportOnDemandDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeImportOnDemandDeclaration" ):
                listener.exitTypeImportOnDemandDeclaration(self)




    def typeImportOnDemandDeclaration(self):

        localctx = Java20Parser.TypeImportOnDemandDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeImportOnDemandDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(Java20Parser.IMPORT)
            self.state = 803
            self.packageOrTypeName()
            self.state = 804
            self.match(Java20Parser.DOT)
            self.state = 805
            self.match(Java20Parser.MUL)
            self.state = 806
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStaticImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java20Parser.IMPORT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_singleStaticImportDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStaticImportDeclaration" ):
                listener.enterSingleStaticImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStaticImportDeclaration" ):
                listener.exitSingleStaticImportDeclaration(self)




    def singleStaticImportDeclaration(self):

        localctx = Java20Parser.SingleStaticImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_singleStaticImportDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(Java20Parser.IMPORT)
            self.state = 809
            self.match(Java20Parser.STATIC)
            self.state = 810
            self.typeName()
            self.state = 811
            self.match(Java20Parser.DOT)
            self.state = 812
            self.identifier()
            self.state = 813
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticImportOnDemandDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java20Parser.IMPORT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def MUL(self):
            return self.getToken(Java20Parser.MUL, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_staticImportOnDemandDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticImportOnDemandDeclaration" ):
                listener.enterStaticImportOnDemandDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticImportOnDemandDeclaration" ):
                listener.exitStaticImportOnDemandDeclaration(self)




    def staticImportOnDemandDeclaration(self):

        localctx = Java20Parser.StaticImportOnDemandDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_staticImportOnDemandDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(Java20Parser.IMPORT)
            self.state = 816
            self.match(Java20Parser.STATIC)
            self.state = 817
            self.typeName()
            self.state = 818
            self.match(Java20Parser.DOT)
            self.state = 819
            self.match(Java20Parser.MUL)
            self.state = 820
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelClassOrInterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_topLevelClassOrInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelClassOrInterfaceDeclaration" ):
                listener.enterTopLevelClassOrInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelClassOrInterfaceDeclaration" ):
                listener.exitTopLevelClassOrInterfaceDeclaration(self)




    def topLevelClassOrInterfaceDeclaration(self):

        localctx = Java20Parser.TopLevelClassOrInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_topLevelClassOrInterfaceDeclaration)
        try:
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.interfaceDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(Java20Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(Java20Parser.MODULE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.IdentifierContext,i)


        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def OPEN(self):
            return self.getToken(Java20Parser.OPEN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)




    def moduleDeclaration(self):

        localctx = Java20Parser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 827
                self.annotation()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 833
                self.match(Java20Parser.OPEN)


            self.state = 836
            self.match(Java20Parser.MODULE)
            self.state = 837
            self.identifier()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84:
                self.state = 838
                self.match(Java20Parser.DOT)
                self.state = 839
                self.identifier()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 845
            self.match(Java20Parser.LBRACE)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 17730) != 0):
                self.state = 846
                self.moduleDirective()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(Java20Parser.REQUIRES, 0)

        def moduleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ModuleNameContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ModuleNameContext,i)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(Java20Parser.EXPORTS, 0)

        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def TO(self):
            return self.getToken(Java20Parser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def OPENS(self):
            return self.getToken(Java20Parser.OPENS, 0)

        def USES(self):
            return self.getToken(Java20Parser.USES, 0)

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeNameContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeNameContext,i)


        def PROVIDES(self):
            return self.getToken(Java20Parser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(Java20Parser.WITH, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)




    def moduleDirective(self):

        localctx = Java20Parser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(Java20Parser.REQUIRES)
                self.state = 858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 855
                        self.requiresModifier() 
                    self.state = 860
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                self.state = 861
                self.moduleName()
                self.state = 862
                self.match(Java20Parser.SEMI)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.match(Java20Parser.EXPORTS)
                self.state = 865
                self.packageName()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 866
                    self.match(Java20Parser.TO)
                    self.state = 867
                    self.moduleName()
                    self.state = 872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==83:
                        self.state = 868
                        self.match(Java20Parser.COMMA)
                        self.state = 869
                        self.moduleName()
                        self.state = 874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 877
                self.match(Java20Parser.SEMI)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.match(Java20Parser.OPENS)
                self.state = 880
                self.packageName()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 881
                    self.match(Java20Parser.TO)
                    self.state = 882
                    self.moduleName()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==83:
                        self.state = 883
                        self.match(Java20Parser.COMMA)
                        self.state = 884
                        self.moduleName()
                        self.state = 889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 892
                self.match(Java20Parser.SEMI)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 894
                self.match(Java20Parser.USES)
                self.state = 895
                self.typeName()
                self.state = 896
                self.match(Java20Parser.SEMI)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 5)
                self.state = 898
                self.match(Java20Parser.PROVIDES)
                self.state = 899
                self.typeName()
                self.state = 900
                self.match(Java20Parser.WITH)
                self.state = 901
                self.typeName()
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==83:
                    self.state = 902
                    self.match(Java20Parser.COMMA)
                    self.state = 903
                    self.typeName()
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 909
                self.match(Java20Parser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(Java20Parser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)




    def requiresModifier(self):

        localctx = Java20Parser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            _la = self._input.LA(1)
            if not(_la==13 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalClassDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.NormalClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.EnumDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = Java20Parser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classDeclaration)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.normalClassDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.recordDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Java20Parser.CLASS, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(Java20Parser.ClassBodyContext,0)


        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(Java20Parser.TypeParametersContext,0)


        def classExtends(self):
            return self.getTypedRuleContext(Java20Parser.ClassExtendsContext,0)


        def classImplements(self):
            return self.getTypedRuleContext(Java20Parser.ClassImplementsContext,0)


        def classPermits(self):
            return self.getTypedRuleContext(Java20Parser.ClassPermitsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_normalClassDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalClassDeclaration" ):
                listener.enterNormalClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalClassDeclaration" ):
                listener.exitNormalClassDeclaration(self)




    def normalClassDeclaration(self):

        localctx = Java20Parser.NormalClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_normalClassDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 115967724764792840) != 0) or _la==86:
                self.state = 920
                self.classModifier()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 926
            self.match(Java20Parser.CLASS)
            self.state = 927
            self.typeIdentifier()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 928
                self.typeParameters()


            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 931
                self.classExtends()


            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 934
                self.classImplements()


            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 937
                self.classPermits()


            self.state = 940
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java20Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java20Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java20Parser.FINAL, 0)

        def SEALED(self):
            return self.getToken(Java20Parser.SEALED, 0)

        def NONSEALED(self):
            return self.getToken(Java20Parser.NONSEALED, 0)

        def STRICTFP(self):
            return self.getToken(Java20Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = Java20Parser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classModifier)
        try:
            self.state = 952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                self.match(Java20Parser.PROTECTED)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 945
                self.match(Java20Parser.PRIVATE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 946
                self.match(Java20Parser.ABSTRACT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 947
                self.match(Java20Parser.STATIC)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 7)
                self.state = 948
                self.match(Java20Parser.FINAL)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 8)
                self.state = 949
                self.match(Java20Parser.SEALED)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 9)
                self.state = 950
                self.match(Java20Parser.NONSEALED)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 10)
                self.state = 951
                self.match(Java20Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Java20Parser.LT, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(Java20Parser.TypeParameterListContext,0)


        def GT(self):
            return self.getToken(Java20Parser.GT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = Java20Parser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typeParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(Java20Parser.LT)
            self.state = 955
            self.typeParameterList()
            self.state = 956
            self.match(Java20Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)




    def typeParameterList(self):

        localctx = Java20Parser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.typeParameter()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 959
                self.match(Java20Parser.COMMA)
                self.state = 960
                self.typeParameter()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java20Parser.EXTENDS, 0)

        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classExtends

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtends" ):
                listener.enterClassExtends(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtends" ):
                listener.exitClassExtends(self)




    def classExtends(self):

        localctx = Java20Parser.ClassExtendsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classExtends)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(Java20Parser.EXTENDS)
            self.state = 967
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassImplementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(Java20Parser.IMPLEMENTS, 0)

        def interfaceTypeList(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceTypeListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classImplements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassImplements" ):
                listener.enterClassImplements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassImplements" ):
                listener.exitClassImplements(self)




    def classImplements(self):

        localctx = Java20Parser.ClassImplementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_classImplements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(Java20Parser.IMPLEMENTS)
            self.state = 970
            self.interfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.InterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java20Parser.InterfaceTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceTypeList" ):
                listener.enterInterfaceTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceTypeList" ):
                listener.exitInterfaceTypeList(self)




    def interfaceTypeList(self):

        localctx = Java20Parser.InterfaceTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_interfaceTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.interfaceType()
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 973
                self.match(Java20Parser.COMMA)
                self.state = 974
                self.interfaceType()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassPermitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMITS(self):
            return self.getToken(Java20Parser.PERMITS, 0)

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeNameContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_classPermits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassPermits" ):
                listener.enterClassPermits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassPermits" ):
                listener.exitClassPermits(self)




    def classPermits(self):

        localctx = Java20Parser.ClassPermitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_classPermits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(Java20Parser.PERMITS)
            self.state = 981
            self.typeName()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 982
                self.match(Java20Parser.COMMA)
                self.state = 983
                self.typeName()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = Java20Parser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(Java20Parser.LBRACE)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8512665130203873298) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230376187502595) != 0):
                self.state = 990
                self.classBodyDeclaration()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassMemberDeclarationContext,0)


        def instanceInitializer(self):
            return self.getTypedRuleContext(Java20Parser.InstanceInitializerContext,0)


        def staticInitializer(self):
            return self.getTypedRuleContext(Java20Parser.StaticInitializerContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = Java20Parser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_classBodyDeclaration)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.classMemberDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.instanceInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.staticInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1001
                self.constructorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.FieldDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.MethodDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = Java20Parser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_classMemberDeclaration)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.fieldDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1006
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1007
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1008
                self.match(Java20Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def fieldModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.FieldModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.FieldModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = Java20Parser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 2251802230882305) != 0):
                self.state = 1011
                self.fieldModifier()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            self.unannType()
            self.state = 1018
            self.variableDeclaratorList()
            self.state = 1019
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java20Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java20Parser.FINAL, 0)

        def TRANSIENT(self):
            return self.getToken(Java20Parser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(Java20Parser.VOLATILE, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_fieldModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldModifier" ):
                listener.enterFieldModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldModifier" ):
                listener.exitFieldModifier(self)




    def fieldModifier(self):

        localctx = Java20Parser.FieldModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fieldModifier)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self.match(Java20Parser.PROTECTED)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1024
                self.match(Java20Parser.PRIVATE)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1025
                self.match(Java20Parser.STATIC)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1026
                self.match(Java20Parser.FINAL)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1027
                self.match(Java20Parser.TRANSIENT)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1028
                self.match(Java20Parser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_variableDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorList" ):
                listener.enterVariableDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorList" ):
                listener.exitVariableDeclaratorList(self)




    def variableDeclaratorList(self):

        localctx = Java20Parser.VariableDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_variableDeclaratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.variableDeclarator()
            self.state = 1036
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1032
                    self.match(Java20Parser.COMMA)
                    self.state = 1033
                    self.variableDeclarator() 
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(Java20Parser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(Java20Parser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = Java20Parser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_variableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.variableDeclaratorId()
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1040
                self.match(Java20Parser.ASSIGN)
                self.state = 1041
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = Java20Parser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_variableDeclaratorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.identifier()
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.dims()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = Java20Parser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_variableInitializer)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 31, 37, 44, 46, 48, 54, 57, 58, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 86, 91, 92, 102, 103, 104, 105, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.expression()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java20Parser.UnannPrimitiveTypeContext,0)


        def unannReferenceType(self):
            return self.getTypedRuleContext(Java20Parser.UnannReferenceTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannType" ):
                listener.enterUnannType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannType" ):
                listener.exitUnannType(self)




    def unannType(self):

        localctx = Java20Parser.UnannTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_unannType)
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.unannPrimitiveType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.unannReferenceType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannPrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericType(self):
            return self.getTypedRuleContext(Java20Parser.NumericTypeContext,0)


        def BOOLEAN(self):
            return self.getToken(Java20Parser.BOOLEAN, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_unannPrimitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannPrimitiveType" ):
                listener.enterUnannPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannPrimitiveType" ):
                listener.exitUnannPrimitiveType(self)




    def unannPrimitiveType(self):

        localctx = Java20Parser.UnannPrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_unannPrimitiveType)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 31, 37, 44, 46, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.numericType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.match(Java20Parser.BOOLEAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.UnannClassOrInterfaceTypeContext,0)


        def unannTypeVariable(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeVariableContext,0)


        def unannArrayType(self):
            return self.getTypedRuleContext(Java20Parser.UnannArrayTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannReferenceType" ):
                listener.enterUnannReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannReferenceType" ):
                listener.exitUnannReferenceType(self)




    def unannReferenceType(self):

        localctx = Java20Parser.UnannReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_unannReferenceType)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.unannClassOrInterfaceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.unannTypeVariable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1062
                self.unannArrayType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def uCOIT(self):
            return self.getTypedRuleContext(Java20Parser.UCOITContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassOrInterfaceType" ):
                listener.enterUnannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassOrInterfaceType" ):
                listener.exitUnannClassOrInterfaceType(self)




    def unannClassOrInterfaceType(self):

        localctx = Java20Parser.UnannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_unannClassOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.packageName()
                self.state = 1066
                self.match(Java20Parser.DOT)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1067
                    self.annotation()
                    self.state = 1072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1075
            self.typeIdentifier()
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 1076
                self.typeArguments()


            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1079
                self.uCOIT()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UCOITContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def uCOIT(self):
            return self.getTypedRuleContext(Java20Parser.UCOITContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_uCOIT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUCOIT" ):
                listener.enterUCOIT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUCOIT" ):
                listener.exitUCOIT(self)




    def uCOIT(self):

        localctx = Java20Parser.UCOITContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_uCOIT)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(Java20Parser.DOT)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1083
                self.annotation()
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1089
            self.typeIdentifier()
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1090
                self.typeArguments()


            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1093
                self.uCOIT()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def packageName(self):
            return self.getTypedRuleContext(Java20Parser.PackageNameContext,0)


        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.UnannClassOrInterfaceTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannClassType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassType" ):
                listener.enterUnannClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassType" ):
                listener.exitUnannClassType(self)




    def unannClassType(self):

        localctx = Java20Parser.UnannClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_unannClassType)
        self._la = 0 # Token type
        try:
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.typeIdentifier()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1097
                    self.typeArguments()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1100
                    self.packageName()
                    pass

                elif la_ == 2:
                    self.state = 1101
                    self.unannClassOrInterfaceType()
                    pass


                self.state = 1104
                self.match(Java20Parser.DOT)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1105
                    self.annotation()
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1111
                self.typeIdentifier()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1112
                    self.typeArguments()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType(self):
            return self.getTypedRuleContext(Java20Parser.UnannClassTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannInterfaceType" ):
                listener.enterUnannInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannInterfaceType" ):
                listener.exitUnannInterfaceType(self)




    def unannInterfaceType(self):

        localctx = Java20Parser.UnannInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_unannInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.unannClassType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannTypeVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannTypeVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannTypeVariable" ):
                listener.enterUnannTypeVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannTypeVariable" ):
                listener.exitUnannTypeVariable(self)




    def unannTypeVariable(self):

        localctx = Java20Parser.UnannTypeVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_unannTypeVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.typeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java20Parser.UnannPrimitiveTypeContext,0)


        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.UnannClassOrInterfaceTypeContext,0)


        def unannTypeVariable(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeVariableContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unannArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannArrayType" ):
                listener.enterUnannArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannArrayType" ):
                listener.exitUnannArrayType(self)




    def unannArrayType(self):

        localctx = Java20Parser.UnannArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_unannArrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1121
                self.unannPrimitiveType()
                pass

            elif la_ == 2:
                self.state = 1122
                self.unannClassOrInterfaceType()
                pass

            elif la_ == 3:
                self.state = 1123
                self.unannTypeVariable()
                pass


            self.state = 1126
            self.dims()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodHeader(self):
            return self.getTypedRuleContext(Java20Parser.MethodHeaderContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(Java20Parser.MethodBodyContext,0)


        def methodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.MethodModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.MethodModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = Java20Parser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 692569214556569600) != 0) or _la==86:
                self.state = 1128
                self.methodModifier()
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1134
            self.methodHeader()
            self.state = 1135
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java20Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java20Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java20Parser.FINAL, 0)

        def SYNCHRONIZED(self):
            return self.getToken(Java20Parser.SYNCHRONIZED, 0)

        def NATIVE(self):
            return self.getToken(Java20Parser.NATIVE, 0)

        def STRICTFP(self):
            return self.getToken(Java20Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_methodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodModifier" ):
                listener.enterMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodModifier" ):
                listener.exitMethodModifier(self)




    def methodModifier(self):

        localctx = Java20Parser.MethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_methodModifier)
        try:
            self.state = 1147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1139
                self.match(Java20Parser.PROTECTED)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1140
                self.match(Java20Parser.PRIVATE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1141
                self.match(Java20Parser.ABSTRACT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1142
                self.match(Java20Parser.STATIC)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1143
                self.match(Java20Parser.FINAL)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1144
                self.match(Java20Parser.SYNCHRONIZED)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1145
                self.match(Java20Parser.NATIVE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1146
                self.match(Java20Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def result(self):
            return self.getTypedRuleContext(Java20Parser.ResultContext,0)


        def methodDeclarator(self):
            return self.getTypedRuleContext(Java20Parser.MethodDeclaratorContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(Java20Parser.TypeParametersContext,0)


        def throwsT(self):
            return self.getTypedRuleContext(Java20Parser.ThrowsTContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_methodHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodHeader" ):
                listener.enterMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodHeader" ):
                listener.exitMethodHeader(self)




    def methodHeader(self):

        localctx = Java20Parser.MethodHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_methodHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1149
                self.typeParameters()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1150
                    self.annotation()
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1158
            self.result()
            self.state = 1159
            self.methodDeclarator()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1160
                self.throwsT()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def VOID(self):
            return self.getToken(Java20Parser.VOID, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult" ):
                listener.enterResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult" ):
                listener.exitResult(self)




    def result(self):

        localctx = Java20Parser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_result)
        try:
            self.state = 1165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 31, 37, 44, 46, 54, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.unannType()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.match(Java20Parser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(Java20Parser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(Java20Parser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(Java20Parser.FormalParameterListContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_methodDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclarator" ):
                listener.enterMethodDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclarator" ):
                listener.exitMethodDeclarator(self)




    def methodDeclarator(self):

        localctx = Java20Parser.MethodDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_methodDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.identifier()
            self.state = 1168
            self.match(Java20Parser.LPAREN)
            self.state = 1172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1169
                self.receiverParameter()
                self.state = 1170
                self.match(Java20Parser.COMMA)


            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18102533424938990) != 0) or _la==86 or _la==123:
                self.state = 1174
                self.formalParameterList()


            self.state = 1177
            self.match(Java20Parser.RPAREN)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==86:
                self.state = 1178
                self.dims()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def THIS(self):
            return self.getToken(Java20Parser.THIS, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = Java20Parser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1181
                self.annotation()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1187
            self.unannType()
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0) or _la==123:
                self.state = 1188
                self.identifier()
                self.state = 1189
                self.match(Java20Parser.DOT)


            self.state = 1193
            self.match(Java20Parser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(Java20Parser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = Java20Parser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.formalParameter()
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1196
                self.match(Java20Parser.COMMA)
                self.state = 1197
                self.formalParameter()
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableModifierContext,i)


        def variableArityParameter(self):
            return self.getTypedRuleContext(Java20Parser.VariableArityParameterContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = Java20Parser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==35 or _la==86:
                    self.state = 1203
                    self.variableModifier()
                    self.state = 1208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1209
                self.unannType()
                self.state = 1210
                self.variableDeclaratorId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1212
                self.variableArityParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableArityParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(Java20Parser.ELLIPSIS, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableArityParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableArityParameter" ):
                listener.enterVariableArityParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableArityParameter" ):
                listener.exitVariableArityParameter(self)




    def variableArityParameter(self):

        localctx = Java20Parser.VariableArityParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_variableArityParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35 or _la==86:
                self.state = 1215
                self.variableModifier()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1221
            self.unannType()
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1222
                self.annotation()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1228
            self.match(Java20Parser.ELLIPSIS)
            self.state = 1229
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def FINAL(self):
            return self.getToken(Java20Parser.FINAL, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = Java20Parser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_variableModifier)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.match(Java20Parser.FINAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowsTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROWS(self):
            return self.getToken(Java20Parser.THROWS, 0)

        def exceptionTypeList(self):
            return self.getTypedRuleContext(Java20Parser.ExceptionTypeListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_throwsT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowsT" ):
                listener.enterThrowsT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowsT" ):
                listener.exitThrowsT(self)




    def throwsT(self):

        localctx = Java20Parser.ThrowsTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_throwsT)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(Java20Parser.THROWS)
            self.state = 1236
            self.exceptionTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ExceptionTypeContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ExceptionTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_exceptionTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionTypeList" ):
                listener.enterExceptionTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionTypeList" ):
                listener.exitExceptionTypeList(self)




    def exceptionTypeList(self):

        localctx = Java20Parser.ExceptionTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_exceptionTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.exceptionType()
            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1239
                self.match(Java20Parser.COMMA)
                self.state = 1240
                self.exceptionType()
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java20Parser.TypeVariableContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_exceptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionType" ):
                listener.enterExceptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionType" ):
                listener.exitExceptionType(self)




    def exceptionType(self):

        localctx = Java20Parser.ExceptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_exceptionType)
        try:
            self.state = 1248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1246
                self.classType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1247
                self.typeVariable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = Java20Parser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_methodBody)
        try:
            self.state = 1252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1250
                self.block()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1251
                self.match(Java20Parser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_instanceInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceInitializer" ):
                listener.enterInstanceInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceInitializer" ):
                listener.exitInstanceInitializer(self)




    def instanceInitializer(self):

        localctx = Java20Parser.InstanceInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_instanceInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_staticInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticInitializer" ):
                listener.enterStaticInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticInitializer" ):
                listener.exitStaticInitializer(self)




    def staticInitializer(self):

        localctx = Java20Parser.StaticInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_staticInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(Java20Parser.STATIC)
            self.state = 1257
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDeclarator(self):
            return self.getTypedRuleContext(Java20Parser.ConstructorDeclaratorContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(Java20Parser.ConstructorBodyContext,0)


        def constructorModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ConstructorModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ConstructorModifierContext,i)


        def throwsT(self):
            return self.getTypedRuleContext(Java20Parser.ThrowsTContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = Java20Parser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 68719476743) != 0):
                self.state = 1259
                self.constructorModifier()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1265
            self.constructorDeclarator()
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1266
                self.throwsT()


            self.state = 1269
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java20Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_constructorModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorModifier" ):
                listener.enterConstructorModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorModifier" ):
                listener.exitConstructorModifier(self)




    def constructorModifier(self):

        localctx = Java20Parser.ConstructorModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_constructorModifier)
        try:
            self.state = 1275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1273
                self.match(Java20Parser.PROTECTED)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1274
                self.match(Java20Parser.PRIVATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeName(self):
            return self.getTypedRuleContext(Java20Parser.SimpleTypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Java20Parser.TypeParametersContext,0)


        def receiverParameter(self):
            return self.getTypedRuleContext(Java20Parser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(Java20Parser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(Java20Parser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_constructorDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclarator" ):
                listener.enterConstructorDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclarator" ):
                listener.exitConstructorDeclarator(self)




    def constructorDeclarator(self):

        localctx = Java20Parser.ConstructorDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_constructorDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1277
                self.typeParameters()


            self.state = 1280
            self.simpleTypeName()
            self.state = 1281
            self.match(Java20Parser.LPAREN)
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1282
                self.receiverParameter()
                self.state = 1283
                self.match(Java20Parser.COMMA)


            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18102533424938990) != 0) or _la==86 or _la==123:
                self.state = 1287
                self.formalParameterList()


            self.state = 1290
            self.match(Java20Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_simpleTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeName" ):
                listener.enterSimpleTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeName" ):
                listener.exitSimpleTypeName(self)




    def simpleTypeName(self):

        localctx = Java20Parser.SimpleTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_simpleTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.typeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def explicitConstructorInvocation(self):
            return self.getTypedRuleContext(Java20Parser.ExplicitConstructorInvocationContext,0)


        def blockStatements(self):
            return self.getTypedRuleContext(Java20Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)




    def constructorBody(self):

        localctx = Java20Parser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_constructorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(Java20Parser.LBRACE)
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1295
                self.explicitConstructorInvocation()


            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4610965747420626926) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461576941625323) != 0):
                self.state = 1298
                self.blockStatements()


            self.state = 1301
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def THIS(self):
            return self.getToken(Java20Parser.THIS, 0)

        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_explicitConstructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitConstructorInvocation" ):
                listener.enterExplicitConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitConstructorInvocation" ):
                listener.exitExplicitConstructorInvocation(self)




    def explicitConstructorInvocation(self):

        localctx = Java20Parser.ExplicitConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_explicitConstructorInvocation)
        self._la = 0 # Token type
        try:
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1303
                    self.typeArguments()


                self.state = 1306
                _la = self._input.LA(1)
                if not(_la==57 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1307
                self.match(Java20Parser.LPAREN)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 1308
                    self.argumentList()


                self.state = 1311
                self.match(Java20Parser.RPAREN)
                self.state = 1312
                self.match(Java20Parser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1313
                    self.expressionName()
                    pass

                elif la_ == 2:
                    self.state = 1314
                    self.primary()
                    pass


                self.state = 1317
                self.match(Java20Parser.DOT)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1318
                    self.typeArguments()


                self.state = 1321
                self.match(Java20Parser.SUPER)
                self.state = 1322
                self.match(Java20Parser.LPAREN)
                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 1323
                    self.argumentList()


                self.state = 1326
                self.match(Java20Parser.RPAREN)
                self.state = 1327
                self.match(Java20Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Java20Parser.ENUM, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def enumBody(self):
            return self.getTypedRuleContext(Java20Parser.EnumBodyContext,0)


        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassModifierContext,i)


        def classImplements(self):
            return self.getTypedRuleContext(Java20Parser.ClassImplementsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = Java20Parser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 115967724764792840) != 0) or _la==86:
                self.state = 1331
                self.classModifier()
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1337
            self.match(Java20Parser.ENUM)
            self.state = 1338
            self.typeIdentifier()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1339
                self.classImplements()


            self.state = 1342
            self.enumBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def enumConstantList(self):
            return self.getTypedRuleContext(Java20Parser.EnumConstantListContext,0)


        def COMMA(self):
            return self.getToken(Java20Parser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(Java20Parser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enumBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBody" ):
                listener.enterEnumBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBody" ):
                listener.exitEnumBody(self)




    def enumBody(self):

        localctx = Java20Parser.EnumBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_enumBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(Java20Parser.LBRACE)
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0) or _la==86 or _la==123:
                self.state = 1345
                self.enumConstantList()


            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 1348
                self.match(Java20Parser.COMMA)


            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1351
                self.enumBodyDeclarations()


            self.state = 1354
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(Java20Parser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_enumConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantList" ):
                listener.enterEnumConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantList" ):
                listener.exitEnumConstantList(self)




    def enumConstantList(self):

        localctx = Java20Parser.EnumConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_enumConstantList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.enumConstant()
            self.state = 1361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1357
                    self.match(Java20Parser.COMMA)
                    self.state = 1358
                    self.enumConstant() 
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def enumConstantModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.EnumConstantModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.EnumConstantModifierContext,i)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def classBody(self):
            return self.getTypedRuleContext(Java20Parser.ClassBodyContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = Java20Parser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1364
                self.enumConstantModifier()
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1370
            self.identifier()
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1371
                self.match(Java20Parser.LPAREN)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 1372
                    self.argumentList()


                self.state = 1375
                self.match(Java20Parser.RPAREN)


            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1378
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enumConstantModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantModifier" ):
                listener.enterEnumConstantModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantModifier" ):
                listener.exitEnumConstantModifier(self)




    def enumConstantModifier(self):

        localctx = Java20Parser.EnumConstantModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_enumConstantModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = Java20Parser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(Java20Parser.SEMI)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8512665130203873298) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230376187502595) != 0):
                self.state = 1384
                self.classBodyDeclaration()
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(Java20Parser.RECORD, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(Java20Parser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(Java20Parser.RecordBodyContext,0)


        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(Java20Parser.TypeParametersContext,0)


        def classImplements(self):
            return self.getTypedRuleContext(Java20Parser.ClassImplementsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)




    def recordDeclaration(self):

        localctx = Java20Parser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 115967724764792840) != 0) or _la==86:
                self.state = 1390
                self.classModifier()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1396
            self.match(Java20Parser.RECORD)
            self.state = 1397
            self.typeIdentifier()
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1398
                self.typeParameters()


            self.state = 1401
            self.recordHeader()
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1402
                self.classImplements()


            self.state = 1405
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(Java20Parser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)




    def recordHeader(self):

        localctx = Java20Parser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(Java20Parser.LPAREN)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18102499065200622) != 0) or _la==86 or _la==123:
                self.state = 1408
                self.recordComponentList()


            self.state = 1411
            self.match(Java20Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(Java20Parser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)




    def recordComponentList(self):

        localctx = Java20Parser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.recordComponent()
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1414
                self.match(Java20Parser.COMMA)
                self.state = 1415
                self.recordComponent()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def recordComponentModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.RecordComponentModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.RecordComponentModifierContext,i)


        def variableArityRecordComponent(self):
            return self.getTypedRuleContext(Java20Parser.VariableArityRecordComponentContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)




    def recordComponent(self):

        localctx = Java20Parser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_recordComponent)
        self._la = 0 # Token type
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1421
                    self.recordComponentModifier()
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1427
                self.unannType()
                self.state = 1428
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.variableArityRecordComponent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableArityRecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(Java20Parser.ELLIPSIS, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def recordComponentModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.RecordComponentModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.RecordComponentModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableArityRecordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableArityRecordComponent" ):
                listener.enterVariableArityRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableArityRecordComponent" ):
                listener.exitVariableArityRecordComponent(self)




    def variableArityRecordComponent(self):

        localctx = Java20Parser.VariableArityRecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_variableArityRecordComponent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1433
                self.recordComponentModifier()
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1439
            self.unannType()
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1440
                self.annotation()
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1446
            self.match(Java20Parser.ELLIPSIS)
            self.state = 1447
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordComponentModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentModifier" ):
                listener.enterRecordComponentModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentModifier" ):
                listener.exitRecordComponentModifier(self)




    def recordComponentModifier(self):

        localctx = Java20Parser.RecordComponentModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_recordComponentModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def recordBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.RecordBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.RecordBodyDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)




    def recordBody(self):

        localctx = Java20Parser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(Java20Parser.LBRACE)
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8512665130203873298) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230376187502595) != 0):
                self.state = 1452
                self.recordBodyDeclaration()
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1458
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassBodyDeclarationContext,0)


        def compactConstructorDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.CompactConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_recordBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBodyDeclaration" ):
                listener.enterRecordBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBodyDeclaration" ):
                listener.exitRecordBodyDeclaration(self)




    def recordBodyDeclaration(self):

        localctx = Java20Parser.RecordBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_recordBodyDeclaration)
        try:
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.classBodyDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.compactConstructorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeName(self):
            return self.getTypedRuleContext(Java20Parser.SimpleTypeNameContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(Java20Parser.ConstructorBodyContext,0)


        def constructorModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ConstructorModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ConstructorModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)




    def compactConstructorDeclaration(self):

        localctx = Java20Parser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_compactConstructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 68719476743) != 0):
                self.state = 1464
                self.constructorModifier()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1470
            self.simpleTypeName()
            self.state = 1471
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalInterfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.NormalInterfaceDeclarationContext,0)


        def annotationInterfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationInterfaceDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = Java20Parser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_interfaceDeclaration)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.normalInterfaceDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.annotationInterfaceDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalInterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(Java20Parser.INTERFACE, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceBodyContext,0)


        def interfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.InterfaceModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.InterfaceModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(Java20Parser.TypeParametersContext,0)


        def interfaceExtends(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceExtendsContext,0)


        def interfacePermits(self):
            return self.getTypedRuleContext(Java20Parser.InterfacePermitsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_normalInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalInterfaceDeclaration" ):
                listener.enterNormalInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalInterfaceDeclaration" ):
                listener.exitNormalInterfaceDeclaration(self)




    def normalInterfaceDeclaration(self):

        localctx = Java20Parser.NormalInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_normalInterfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 115967690405054472) != 0) or _la==86:
                self.state = 1477
                self.interfaceModifier()
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1483
            self.match(Java20Parser.INTERFACE)
            self.state = 1484
            self.typeIdentifier()
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1485
                self.typeParameters()


            self.state = 1489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1488
                self.interfaceExtends()


            self.state = 1492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1491
                self.interfacePermits()


            self.state = 1494
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java20Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java20Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def SEALED(self):
            return self.getToken(Java20Parser.SEALED, 0)

        def NONSEALED(self):
            return self.getToken(Java20Parser.NONSEALED, 0)

        def STRICTFP(self):
            return self.getToken(Java20Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceModifier" ):
                listener.enterInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceModifier" ):
                listener.exitInterfaceModifier(self)




    def interfaceModifier(self):

        localctx = Java20Parser.InterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_interfaceModifier)
        try:
            self.state = 1505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1496
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1497
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1498
                self.match(Java20Parser.PROTECTED)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1499
                self.match(Java20Parser.PRIVATE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1500
                self.match(Java20Parser.ABSTRACT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1501
                self.match(Java20Parser.STATIC)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1502
                self.match(Java20Parser.SEALED)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1503
                self.match(Java20Parser.NONSEALED)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1504
                self.match(Java20Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceExtendsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java20Parser.EXTENDS, 0)

        def interfaceTypeList(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceTypeListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceExtends

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceExtends" ):
                listener.enterInterfaceExtends(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceExtends" ):
                listener.exitInterfaceExtends(self)




    def interfaceExtends(self):

        localctx = Java20Parser.InterfaceExtendsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_interfaceExtends)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(Java20Parser.EXTENDS)
            self.state = 1508
            self.interfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacePermitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMITS(self):
            return self.getToken(Java20Parser.PERMITS, 0)

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.TypeNameContext)
            else:
                return self.getTypedRuleContext(Java20Parser.TypeNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_interfacePermits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfacePermits" ):
                listener.enterInterfacePermits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfacePermits" ):
                listener.exitInterfacePermits(self)




    def interfacePermits(self):

        localctx = Java20Parser.InterfacePermitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_interfacePermits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(Java20Parser.PERMITS)
            self.state = 1511
            self.typeName()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1512
                self.match(Java20Parser.COMMA)
                self.state = 1513
                self.typeName()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def interfaceMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.InterfaceMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.InterfaceMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = Java20Parser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(Java20Parser.LBRACE)
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 134105417395994606) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230376187494401) != 0):
                self.state = 1520
                self.interfaceMemberDeclaration()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1526
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ConstantDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceMethodDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = Java20Parser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.constantDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1531
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1532
                self.match(Java20Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def constantModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ConstantModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ConstantModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)




    def constantDeclaration(self):

        localctx = Java20Parser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_constantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 2251799814864897) != 0):
                self.state = 1535
                self.constantModifier()
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1541
            self.unannType()
            self.state = 1542
            self.variableDeclaratorList()
            self.state = 1543
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java20Parser.FINAL, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_constantModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantModifier" ):
                listener.enterConstantModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantModifier" ):
                listener.exitConstantModifier(self)




    def constantModifier(self):

        localctx = Java20Parser.ConstantModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_constantModifier)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1546
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1547
                self.match(Java20Parser.STATIC)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1548
                self.match(Java20Parser.FINAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodHeader(self):
            return self.getTypedRuleContext(Java20Parser.MethodHeaderContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(Java20Parser.MethodBodyContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = Java20Parser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113715891128238080) != 0) or _la==86:
                self.state = 1551
                self.interfaceMethodModifier()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1557
            self.methodHeader()
            self.state = 1558
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(Java20Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java20Parser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(Java20Parser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(Java20Parser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(Java20Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = Java20Parser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_interfaceMethodModifier)
        try:
            self.state = 1567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self.match(Java20Parser.PRIVATE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1563
                self.match(Java20Parser.ABSTRACT)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1564
                self.match(Java20Parser.DEFAULT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1565
                self.match(Java20Parser.STATIC)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1566
                self.match(Java20Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationInterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java20Parser.AT, 0)

        def INTERFACE(self):
            return self.getToken(Java20Parser.INTERFACE, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Java20Parser.TypeIdentifierContext,0)


        def annotationInterfaceBody(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationInterfaceBodyContext,0)


        def interfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.InterfaceModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.InterfaceModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_annotationInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationInterfaceDeclaration" ):
                listener.enterAnnotationInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationInterfaceDeclaration" ):
                listener.exitAnnotationInterfaceDeclaration(self)




    def annotationInterfaceDeclaration(self):

        localctx = Java20Parser.AnnotationInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_annotationInterfaceDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1569
                    self.interfaceModifier() 
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 1575
            self.match(Java20Parser.AT)
            self.state = 1576
            self.match(Java20Parser.INTERFACE)
            self.state = 1577
            self.typeIdentifier()
            self.state = 1578
            self.annotationInterfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationInterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def annotationInterfaceMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationInterfaceMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationInterfaceMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_annotationInterfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationInterfaceBody" ):
                listener.enterAnnotationInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationInterfaceBody" ):
                listener.exitAnnotationInterfaceBody(self)




    def annotationInterfaceBody(self):

        localctx = Java20Parser.AnnotationInterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_annotationInterfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(Java20Parser.LBRACE)
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 134105416859123694) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 2199023255569) != 0):
                self.state = 1581
                self.annotationInterfaceMemberDeclaration()
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1587
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationInterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationInterfaceElementDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationInterfaceElementDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ConstantDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_annotationInterfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationInterfaceMemberDeclaration" ):
                listener.enterAnnotationInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationInterfaceMemberDeclaration" ):
                listener.exitAnnotationInterfaceMemberDeclaration(self)




    def annotationInterfaceMemberDeclaration(self):

        localctx = Java20Parser.AnnotationInterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_annotationInterfaceMemberDeclaration)
        try:
            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.annotationInterfaceElementDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.constantDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1591
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1592
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1593
                self.match(Java20Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationInterfaceElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def annotationInterfaceElementModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationInterfaceElementModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationInterfaceElementModifierContext,i)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def defaultValue(self):
            return self.getTypedRuleContext(Java20Parser.DefaultValueContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_annotationInterfaceElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationInterfaceElementDeclaration" ):
                listener.enterAnnotationInterfaceElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationInterfaceElementDeclaration" ):
                listener.exitAnnotationInterfaceElementDeclaration(self)




    def annotationInterfaceElementDeclaration(self):

        localctx = Java20Parser.AnnotationInterfaceElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_annotationInterfaceElementDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==52 or _la==86:
                self.state = 1596
                self.annotationInterfaceElementModifier()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1602
            self.unannType()
            self.state = 1603
            self.identifier()
            self.state = 1604
            self.match(Java20Parser.LPAREN)
            self.state = 1605
            self.match(Java20Parser.RPAREN)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==86:
                self.state = 1606
                self.dims()


            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 1609
                self.defaultValue()


            self.state = 1612
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationInterfaceElementModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java20Parser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(Java20Parser.ABSTRACT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_annotationInterfaceElementModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationInterfaceElementModifier" ):
                listener.enterAnnotationInterfaceElementModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationInterfaceElementModifier" ):
                listener.exitAnnotationInterfaceElementModifier(self)




    def annotationInterfaceElementModifier(self):

        localctx = Java20Parser.AnnotationInterfaceElementModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_annotationInterfaceElementModifier)
        try:
            self.state = 1617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.annotation()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                self.match(Java20Parser.PUBLIC)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1616
                self.match(Java20Parser.ABSTRACT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Java20Parser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java20Parser.ElementValueContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = Java20Parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(Java20Parser.DEFAULT)
            self.state = 1620
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalAnnotation(self):
            return self.getTypedRuleContext(Java20Parser.NormalAnnotationContext,0)


        def markerAnnotation(self):
            return self.getTypedRuleContext(Java20Parser.MarkerAnnotationContext,0)


        def singleElementAnnotation(self):
            return self.getTypedRuleContext(Java20Parser.SingleElementAnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = Java20Parser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_annotation)
        try:
            self.state = 1625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1622
                self.normalAnnotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.markerAnnotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1624
                self.singleElementAnnotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java20Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def elementValuePairList(self):
            return self.getTypedRuleContext(Java20Parser.ElementValuePairListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_normalAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalAnnotation" ):
                listener.enterNormalAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalAnnotation" ):
                listener.exitNormalAnnotation(self)




    def normalAnnotation(self):

        localctx = Java20Parser.NormalAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_normalAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(Java20Parser.AT)
            self.state = 1628
            self.typeName()
            self.state = 1629
            self.match(Java20Parser.LPAREN)
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0) or _la==123:
                self.state = 1630
                self.elementValuePairList()


            self.state = 1633
            self.match(Java20Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_elementValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairList" ):
                listener.enterElementValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairList" ):
                listener.exitElementValuePairList(self)




    def elementValuePairList(self):

        localctx = Java20Parser.ElementValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_elementValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.elementValuePair()
            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1636
                self.match(Java20Parser.COMMA)
                self.state = 1637
                self.elementValuePair()
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(Java20Parser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java20Parser.ElementValueContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = Java20Parser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.identifier()
            self.state = 1644
            self.match(Java20Parser.ASSIGN)
            self.state = 1645
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalExpressionContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ElementValueArrayInitializerContext,0)


        def annotation(self):
            return self.getTypedRuleContext(Java20Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = Java20Parser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_elementValue)
        try:
            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.elementValueArrayInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1649
                self.annotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def elementValueList(self):
            return self.getTypedRuleContext(Java20Parser.ElementValueListContext,0)


        def COMMA(self):
            return self.getToken(Java20Parser.COMMA, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = Java20Parser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(Java20Parser.LBRACE)
            self.state = 1654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939449841) != 0):
                self.state = 1653
                self.elementValueList()


            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 1656
                self.match(Java20Parser.COMMA)


            self.state = 1659
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ElementValueContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_elementValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueList" ):
                listener.enterElementValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueList" ):
                listener.exitElementValueList(self)




    def elementValueList(self):

        localctx = Java20Parser.ElementValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_elementValueList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.elementValue()
            self.state = 1666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1662
                    self.match(Java20Parser.COMMA)
                    self.state = 1663
                    self.elementValue() 
                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkerAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java20Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_markerAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkerAnnotation" ):
                listener.enterMarkerAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkerAnnotation" ):
                listener.exitMarkerAnnotation(self)




    def markerAnnotation(self):

        localctx = Java20Parser.MarkerAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_markerAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(Java20Parser.AT)
            self.state = 1670
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleElementAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java20Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java20Parser.ElementValueContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_singleElementAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleElementAnnotation" ):
                listener.enterSingleElementAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleElementAnnotation" ):
                listener.exitSingleElementAnnotation(self)




    def singleElementAnnotation(self):

        localctx = Java20Parser.SingleElementAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_singleElementAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(Java20Parser.AT)
            self.state = 1673
            self.typeName()
            self.state = 1674
            self.match(Java20Parser.LPAREN)
            self.state = 1675
            self.elementValue()
            self.state = 1676
            self.match(Java20Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def variableInitializerList(self):
            return self.getTypedRuleContext(Java20Parser.VariableInitializerListContext,0)


        def COMMA(self):
            return self.getToken(Java20Parser.COMMA, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = Java20Parser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.match(Java20Parser.LBRACE)
            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939449841) != 0):
                self.state = 1679
                self.variableInitializerList()


            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 1682
                self.match(Java20Parser.COMMA)


            self.state = 1685
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_variableInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializerList" ):
                listener.enterVariableInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializerList" ):
                listener.exitVariableInitializerList(self)




    def variableInitializerList(self):

        localctx = Java20Parser.VariableInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_variableInitializerList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.variableInitializer()
            self.state = 1692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1688
                    self.match(Java20Parser.COMMA)
                    self.state = 1689
                    self.variableInitializer() 
                self.state = 1694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def blockStatements(self):
            return self.getTypedRuleContext(Java20Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = Java20Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.match(Java20Parser.LBRACE)
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4610965747420626926) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461576941625323) != 0):
                self.state = 1696
                self.blockStatements()


            self.state = 1699
            self.match(Java20Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(Java20Parser.BlockStatementContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_blockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatements" ):
                listener.enterBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatements" ):
                listener.exitBlockStatements(self)




    def blockStatements(self):

        localctx = Java20Parser.BlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_blockStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.blockStatement()
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4610965747420626926) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576461576941625323) != 0):
                self.state = 1702
                self.blockStatement()
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localClassOrInterfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalClassOrInterfaceDeclarationContext,0)


        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = Java20Parser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_blockStatement)
        try:
            self.state = 1711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.localClassOrInterfaceDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1710
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalClassOrInterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.ClassDeclarationContext,0)


        def normalInterfaceDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.NormalInterfaceDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_localClassOrInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalClassOrInterfaceDeclaration" ):
                listener.enterLocalClassOrInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalClassOrInterfaceDeclaration" ):
                listener.exitLocalClassOrInterfaceDeclaration(self)




    def localClassOrInterfaceDeclaration(self):

        localctx = Java20Parser.LocalClassOrInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_localClassOrInterfaceDeclaration)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1713
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1714
                self.normalInterfaceDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableType(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableTypeContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableModifierContext,i)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = Java20Parser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35 or _la==86:
                self.state = 1717
                self.variableModifier()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1723
            self.localVariableType()
            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1724
                self.variableDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def VAR(self):
            return self.getToken(Java20Parser.VAR, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_localVariableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableType" ):
                listener.enterLocalVariableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableType" ):
                listener.exitLocalVariableType(self)




    def localVariableType(self):

        localctx = Java20Parser.LocalVariableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_localVariableType)
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1727
                self.unannType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self.match(Java20Parser.VAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = Java20Parser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.localVariableDeclaration()
            self.state = 1732
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(Java20Parser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatement(self):
            return self.getTypedRuleContext(Java20Parser.LabeledStatementContext,0)


        def ifThenStatement(self):
            return self.getTypedRuleContext(Java20Parser.IfThenStatementContext,0)


        def ifThenElseStatement(self):
            return self.getTypedRuleContext(Java20Parser.IfThenElseStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(Java20Parser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(Java20Parser.ForStatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = Java20Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_statement)
        try:
            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.labeledStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1736
                self.ifThenStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1737
                self.ifThenElseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1738
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1739
                self.forStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(Java20Parser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.LabeledStatementNoShortIfContext,0)


        def ifThenElseStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.IfThenElseStatementNoShortIfContext,0)


        def whileStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.WhileStatementNoShortIfContext,0)


        def forStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.ForStatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_statementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementNoShortIf" ):
                listener.enterStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementNoShortIf" ):
                listener.exitStatementNoShortIf(self)




    def statementNoShortIf(self):

        localctx = Java20Parser.StatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_statementNoShortIf)
        try:
            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1742
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1743
                self.labeledStatementNoShortIf()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1744
                self.ifThenElseStatementNoShortIf()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1745
                self.whileStatementNoShortIf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1746
                self.forStatementNoShortIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementWithoutTrailingSubstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(Java20Parser.EmptyStatement_Context,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(Java20Parser.AssertStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(Java20Parser.SwitchStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(Java20Parser.DoStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(Java20Parser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(Java20Parser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(Java20Parser.ReturnStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(Java20Parser.SynchronizedStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(Java20Parser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(Java20Parser.TryStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(Java20Parser.YieldStatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_statementWithoutTrailingSubstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementWithoutTrailingSubstatement" ):
                listener.enterStatementWithoutTrailingSubstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementWithoutTrailingSubstatement" ):
                listener.exitStatementWithoutTrailingSubstatement(self)




    def statementWithoutTrailingSubstatement(self):

        localctx = Java20Parser.StatementWithoutTrailingSubstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_statementWithoutTrailingSubstatement)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self.emptyStatement_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1751
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1752
                self.assertStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1753
                self.switchStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1754
                self.doStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1755
                self.breakStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1756
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1757
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1758
                self.synchronizedStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1759
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1760
                self.tryStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1761
                self.yieldStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatement_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = Java20Parser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = Java20Parser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.identifier()
            self.state = 1767
            self.match(Java20Parser.COLON)
            self.state = 1768
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_labeledStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatementNoShortIf" ):
                listener.enterLabeledStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatementNoShortIf" ):
                listener.exitLabeledStatementNoShortIf(self)




    def labeledStatementNoShortIf(self):

        localctx = Java20Parser.LabeledStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_labeledStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.identifier()
            self.state = 1771
            self.match(Java20Parser.COLON)
            self.state = 1772
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self):
            return self.getTypedRuleContext(Java20Parser.StatementExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = Java20Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            self.statementExpression()
            self.state = 1775
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(Java20Parser.AssignmentContext,0)


        def preIncrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PreIncrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PreDecrementExpressionContext,0)


        def postIncrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PostIncrementExpressionContext,0)


        def postDecrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PostDecrementExpressionContext,0)


        def methodInvocation(self):
            return self.getTypedRuleContext(Java20Parser.MethodInvocationContext,0)


        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.ClassInstanceCreationExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = Java20Parser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_statementExpression)
        try:
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1777
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1778
                self.preIncrementExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1779
                self.preDecrementExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1780
                self.postIncrementExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1781
                self.postDecrementExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1782
                self.methodInvocation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1783
                self.classInstanceCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java20Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_ifThenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenStatement" ):
                listener.enterIfThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenStatement" ):
                listener.exitIfThenStatement(self)




    def ifThenStatement(self):

        localctx = Java20Parser.IfThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_ifThenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.match(Java20Parser.IF)
            self.state = 1787
            self.match(Java20Parser.LPAREN)
            self.state = 1788
            self.expression()
            self.state = 1789
            self.match(Java20Parser.RPAREN)
            self.state = 1790
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java20Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,0)


        def ELSE(self):
            return self.getToken(Java20Parser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_ifThenElseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatement" ):
                listener.enterIfThenElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatement" ):
                listener.exitIfThenElseStatement(self)




    def ifThenElseStatement(self):

        localctx = Java20Parser.IfThenElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_ifThenElseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(Java20Parser.IF)
            self.state = 1793
            self.match(Java20Parser.LPAREN)
            self.state = 1794
            self.expression()
            self.state = 1795
            self.match(Java20Parser.RPAREN)
            self.state = 1796
            self.statementNoShortIf()
            self.state = 1797
            self.match(Java20Parser.ELSE)
            self.state = 1798
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java20Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statementNoShortIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.StatementNoShortIfContext)
            else:
                return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,i)


        def ELSE(self):
            return self.getToken(Java20Parser.ELSE, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_ifThenElseStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatementNoShortIf" ):
                listener.enterIfThenElseStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatementNoShortIf" ):
                listener.exitIfThenElseStatementNoShortIf(self)




    def ifThenElseStatementNoShortIf(self):

        localctx = Java20Parser.IfThenElseStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_ifThenElseStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.match(Java20Parser.IF)
            self.state = 1801
            self.match(Java20Parser.LPAREN)
            self.state = 1802
            self.expression()
            self.state = 1803
            self.match(Java20Parser.RPAREN)
            self.state = 1804
            self.statementNoShortIf()
            self.state = 1805
            self.match(Java20Parser.ELSE)
            self.state = 1806
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Java20Parser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)




    def assertStatement(self):

        localctx = Java20Parser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_assertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.match(Java20Parser.ASSERT)
            self.state = 1809
            self.expression()
            self.state = 1812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 1810
                self.match(Java20Parser.COLON)
                self.state = 1811
                self.expression()


            self.state = 1814
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(Java20Parser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(Java20Parser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = Java20Parser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(Java20Parser.SWITCH)
            self.state = 1817
            self.match(Java20Parser.LPAREN)
            self.state = 1818
            self.expression()
            self.state = 1819
            self.match(Java20Parser.RPAREN)
            self.state = 1820
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java20Parser.LBRACE, 0)

        def switchRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.SwitchRuleContext)
            else:
                return self.getTypedRuleContext(Java20Parser.SwitchRuleContext,i)


        def RBRACE(self):
            return self.getToken(Java20Parser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(Java20Parser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(Java20Parser.SwitchLabelContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COLON)
            else:
                return self.getToken(Java20Parser.COLON, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = Java20Parser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.match(Java20Parser.LBRACE)
                self.state = 1823
                self.switchRule()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==29:
                    self.state = 1824
                    self.switchRule()
                    self.state = 1829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1830
                self.match(Java20Parser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1832
                self.match(Java20Parser.LBRACE)
                self.state = 1836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1833
                        self.switchBlockStatementGroup() 
                    self.state = 1838
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==29:
                    self.state = 1839
                    self.switchLabel()
                    self.state = 1840
                    self.match(Java20Parser.COLON)
                    self.state = 1846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1847
                self.match(Java20Parser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self):
            return self.getTypedRuleContext(Java20Parser.SwitchLabelContext,0)


        def ARROW(self):
            return self.getToken(Java20Parser.ARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(Java20Parser.ThrowStatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_switchRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRule" ):
                listener.enterSwitchRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRule" ):
                listener.exitSwitchRule(self)




    def switchRule(self):

        localctx = Java20Parser.SwitchRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_switchRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.switchLabel()
            self.state = 1851
            self.match(Java20Parser.ARROW)
            self.state = 1857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 31, 37, 44, 46, 48, 54, 57, 58, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 86, 91, 92, 102, 103, 104, 105, 123]:
                self.state = 1852
                self.expression()
                self.state = 1853
                self.match(Java20Parser.SEMI)
                pass
            elif token in [78]:
                self.state = 1855
                self.block()
                pass
            elif token in [61]:
                self.state = 1856
                self.throwStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(Java20Parser.SwitchLabelContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COLON)
            else:
                return self.getToken(Java20Parser.COLON, i)

        def blockStatements(self):
            return self.getTypedRuleContext(Java20Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = Java20Parser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.switchLabel()
            self.state = 1860
            self.match(Java20Parser.COLON)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==29:
                self.state = 1861
                self.switchLabel()
                self.state = 1862
                self.match(Java20Parser.COLON)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1869
            self.blockStatements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Java20Parser.CASE, 0)

        def caseConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.CaseConstantContext)
            else:
                return self.getTypedRuleContext(Java20Parser.CaseConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def DEFAULT(self):
            return self.getToken(Java20Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = Java20Parser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_switchLabel)
        self._la = 0 # Token type
        try:
            self.state = 1881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.match(Java20Parser.CASE)
                self.state = 1872
                self.caseConstant()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==83:
                    self.state = 1873
                    self.match(Java20Parser.COMMA)
                    self.state = 1874
                    self.caseConstant()
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.match(Java20Parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_caseConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseConstant" ):
                listener.enterCaseConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseConstant" ):
                listener.exitCaseConstant(self)




    def caseConstant(self):

        localctx = Java20Parser.CaseConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_caseConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Java20Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = Java20Parser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self.match(Java20Parser.WHILE)
            self.state = 1886
            self.match(Java20Parser.LPAREN)
            self.state = 1887
            self.expression()
            self.state = 1888
            self.match(Java20Parser.RPAREN)
            self.state = 1889
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Java20Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_whileStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatementNoShortIf" ):
                listener.enterWhileStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatementNoShortIf" ):
                listener.exitWhileStatementNoShortIf(self)




    def whileStatementNoShortIf(self):

        localctx = Java20Parser.WhileStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_whileStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(Java20Parser.WHILE)
            self.state = 1892
            self.match(Java20Parser.LPAREN)
            self.state = 1893
            self.expression()
            self.state = 1894
            self.match(Java20Parser.RPAREN)
            self.state = 1895
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(Java20Parser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def WHILE(self):
            return self.getToken(Java20Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = Java20Parser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(Java20Parser.DO)
            self.state = 1898
            self.statement()
            self.state = 1899
            self.match(Java20Parser.WHILE)
            self.state = 1900
            self.match(Java20Parser.LPAREN)
            self.state = 1901
            self.expression()
            self.state = 1902
            self.match(Java20Parser.RPAREN)
            self.state = 1903
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicForStatement(self):
            return self.getTypedRuleContext(Java20Parser.BasicForStatementContext,0)


        def enhancedForStatement(self):
            return self.getTypedRuleContext(Java20Parser.EnhancedForStatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = Java20Parser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_forStatement)
        try:
            self.state = 1907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1905
                self.basicForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.enhancedForStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicForStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.BasicForStatementNoShortIfContext,0)


        def enhancedForStatementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.EnhancedForStatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_forStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatementNoShortIf" ):
                listener.enterForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatementNoShortIf" ):
                listener.exitForStatementNoShortIf(self)




    def forStatementNoShortIf(self):

        localctx = Java20Parser.ForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_forStatementNoShortIf)
        try:
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1909
                self.basicForStatementNoShortIf()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1910
                self.enhancedForStatementNoShortIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java20Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.SEMI)
            else:
                return self.getToken(Java20Parser.SEMI, i)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def forInit(self):
            return self.getTypedRuleContext(Java20Parser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(Java20Parser.ForUpdateContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_basicForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicForStatement" ):
                listener.enterBasicForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicForStatement" ):
                listener.exitBasicForStatement(self)




    def basicForStatement(self):

        localctx = Java20Parser.BasicForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_basicForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(Java20Parser.FOR)
            self.state = 1914
            self.match(Java20Parser.LPAREN)
            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1315420701084352494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230788470673393) != 0):
                self.state = 1915
                self.forInit()


            self.state = 1918
            self.match(Java20Parser.SEMI)
            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                self.state = 1919
                self.expression()


            self.state = 1922
            self.match(Java20Parser.SEMI)
            self.state = 1924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1315420666724614126) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230788470673393) != 0):
                self.state = 1923
                self.forUpdate()


            self.state = 1926
            self.match(Java20Parser.RPAREN)
            self.state = 1927
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java20Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.SEMI)
            else:
                return self.getToken(Java20Parser.SEMI, i)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,0)


        def forInit(self):
            return self.getTypedRuleContext(Java20Parser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(Java20Parser.ForUpdateContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_basicForStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicForStatementNoShortIf" ):
                listener.enterBasicForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicForStatementNoShortIf" ):
                listener.exitBasicForStatementNoShortIf(self)




    def basicForStatementNoShortIf(self):

        localctx = Java20Parser.BasicForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_basicForStatementNoShortIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(Java20Parser.FOR)
            self.state = 1930
            self.match(Java20Parser.LPAREN)
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1315420701084352494) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230788470673393) != 0):
                self.state = 1931
                self.forInit()


            self.state = 1934
            self.match(Java20Parser.SEMI)
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                self.state = 1935
                self.expression()


            self.state = 1938
            self.match(Java20Parser.SEMI)
            self.state = 1940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1315420666724614126) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288230788470673393) != 0):
                self.state = 1939
                self.forUpdate()


            self.state = 1942
            self.match(Java20Parser.RPAREN)
            self.state = 1943
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(Java20Parser.StatementExpressionListContext,0)


        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = Java20Parser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_forInit)
        try:
            self.state = 1947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1945
                self.statementExpressionList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1946
                self.localVariableDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(Java20Parser.StatementExpressionListContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = Java20Parser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.statementExpressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.StatementExpressionContext)
            else:
                return self.getTypedRuleContext(Java20Parser.StatementExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_statementExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpressionList" ):
                listener.enterStatementExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpressionList" ):
                listener.exitStatementExpressionList(self)




    def statementExpressionList(self):

        localctx = Java20Parser.StatementExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_statementExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.statementExpression()
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1952
                self.match(Java20Parser.COMMA)
                self.state = 1953
                self.statementExpression()
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java20Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java20Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enhancedForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForStatement" ):
                listener.enterEnhancedForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForStatement" ):
                listener.exitEnhancedForStatement(self)




    def enhancedForStatement(self):

        localctx = Java20Parser.EnhancedForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_enhancedForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.match(Java20Parser.FOR)
            self.state = 1960
            self.match(Java20Parser.LPAREN)
            self.state = 1961
            self.localVariableDeclaration()
            self.state = 1962
            self.match(Java20Parser.COLON)
            self.state = 1963
            self.expression()
            self.state = 1964
            self.match(Java20Parser.RPAREN)
            self.state = 1965
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java20Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java20Parser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_enhancedForStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForStatementNoShortIf" ):
                listener.enterEnhancedForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForStatementNoShortIf" ):
                listener.exitEnhancedForStatementNoShortIf(self)




    def enhancedForStatementNoShortIf(self):

        localctx = Java20Parser.EnhancedForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_enhancedForStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.match(Java20Parser.FOR)
            self.state = 1968
            self.match(Java20Parser.LPAREN)
            self.state = 1969
            self.localVariableDeclaration()
            self.state = 1970
            self.match(Java20Parser.COLON)
            self.state = 1971
            self.expression()
            self.state = 1972
            self.match(Java20Parser.RPAREN)
            self.state = 1973
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Java20Parser.BREAK, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = Java20Parser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(Java20Parser.BREAK)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0) or _la==123:
                self.state = 1976
                self.identifier()


            self.state = 1979
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Java20Parser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = Java20Parser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.match(Java20Parser.CONTINUE)
            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 262126) != 0) or _la==123:
                self.state = 1982
                self.identifier()


            self.state = 1985
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Java20Parser.RETURN, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = Java20Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(Java20Parser.RETURN)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                self.state = 1988
                self.expression()


            self.state = 1991
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(Java20Parser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = Java20Parser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(Java20Parser.THROW)
            self.state = 1994
            self.expression()
            self.state = 1995
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynchronizedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(Java20Parser.SYNCHRONIZED, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = Java20Parser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(Java20Parser.SYNCHRONIZED)
            self.state = 1998
            self.match(Java20Parser.LPAREN)
            self.state = 1999
            self.expression()
            self.state = 2000
            self.match(Java20Parser.RPAREN)
            self.state = 2001
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Java20Parser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def catches(self):
            return self.getTypedRuleContext(Java20Parser.CatchesContext,0)


        def finallyBlock(self):
            return self.getTypedRuleContext(Java20Parser.FinallyBlockContext,0)


        def tryWithResourcesStatement(self):
            return self.getTypedRuleContext(Java20Parser.TryWithResourcesStatementContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = Java20Parser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 2019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2003
                self.match(Java20Parser.TRY)
                self.state = 2004
                self.block()
                self.state = 2005
                self.catches()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007
                self.match(Java20Parser.TRY)
                self.state = 2008
                self.block()
                self.state = 2009
                self.finallyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2011
                self.match(Java20Parser.TRY)
                self.state = 2012
                self.block()
                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2013
                    self.catches()


                self.state = 2016
                self.finallyBlock()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2018
                self.tryWithResourcesStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(Java20Parser.CatchClauseContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_catches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatches" ):
                listener.enterCatches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatches" ):
                listener.exitCatches(self)




    def catches(self):

        localctx = Java20Parser.CatchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_catches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.catchClause()
            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2022
                self.catchClause()
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(Java20Parser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def catchFormalParameter(self):
            return self.getTypedRuleContext(Java20Parser.CatchFormalParameterContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = Java20Parser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(Java20Parser.CATCH)
            self.state = 2029
            self.match(Java20Parser.LPAREN)
            self.state = 2030
            self.catchFormalParameter()
            self.state = 2031
            self.match(Java20Parser.RPAREN)
            self.state = 2032
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchType(self):
            return self.getTypedRuleContext(Java20Parser.CatchTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_catchFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchFormalParameter" ):
                listener.enterCatchFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchFormalParameter" ):
                listener.exitCatchFormalParameter(self)




    def catchFormalParameter(self):

        localctx = Java20Parser.CatchFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_catchFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35 or _la==86:
                self.state = 2034
                self.variableModifier()
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2040
            self.catchType()
            self.state = 2041
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType(self):
            return self.getTypedRuleContext(Java20Parser.UnannClassTypeContext,0)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.BITOR)
            else:
                return self.getToken(Java20Parser.BITOR, i)

        def classType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ClassTypeContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ClassTypeContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = Java20Parser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.unannClassType()
            self.state = 2048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==109:
                self.state = 2044
                self.match(Java20Parser.BITOR)
                self.state = 2045
                self.classType()
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(Java20Parser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = Java20Parser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(Java20Parser.FINALLY)
            self.state = 2052
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryWithResourcesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Java20Parser.TRY, 0)

        def resourceSpecification(self):
            return self.getTypedRuleContext(Java20Parser.ResourceSpecificationContext,0)


        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def catches(self):
            return self.getTypedRuleContext(Java20Parser.CatchesContext,0)


        def finallyBlock(self):
            return self.getTypedRuleContext(Java20Parser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_tryWithResourcesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryWithResourcesStatement" ):
                listener.enterTryWithResourcesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryWithResourcesStatement" ):
                listener.exitTryWithResourcesStatement(self)




    def tryWithResourcesStatement(self):

        localctx = Java20Parser.TryWithResourcesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_tryWithResourcesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(Java20Parser.TRY)
            self.state = 2055
            self.resourceSpecification()
            self.state = 2056
            self.block()
            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 2057
                self.catches()


            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 2060
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def resourceList(self):
            return self.getTypedRuleContext(Java20Parser.ResourceListContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = Java20Parser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(Java20Parser.LPAREN)
            self.state = 2064
            self.resourceList()
            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2065
                self.match(Java20Parser.SEMI)


            self.state = 2068
            self.match(Java20Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ResourceContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.SEMI)
            else:
                return self.getToken(Java20Parser.SEMI, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_resourceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceList" ):
                listener.enterResourceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceList" ):
                listener.exitResourceList(self)




    def resourceList(self):

        localctx = Java20Parser.ResourceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_resourceList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.resource()
            self.state = 2075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2071
                    self.match(Java20Parser.SEMI)
                    self.state = 2072
                    self.resource() 
                self.state = 2077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def variableAccess(self):
            return self.getTypedRuleContext(Java20Parser.VariableAccessContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = Java20Parser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_resource)
        try:
            self.state = 2080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2078
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2079
                self.variableAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(Java20Parser.FieldAccessContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_variableAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableAccess" ):
                listener.enterVariableAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableAccess" ):
                listener.exitVariableAccess(self)




    def variableAccess(self):

        localctx = Java20Parser.VariableAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_variableAccess)
        try:
            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2082
                self.expressionName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2083
                self.fieldAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Java20Parser.YIELD, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java20Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)




    def yieldStatement(self):

        localctx = Java20Parser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self.match(Java20Parser.YIELD)
            self.state = 2087
            self.expression()
            self.state = 2088
            self.match(Java20Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePattern(self):
            return self.getTypedRuleContext(Java20Parser.TypePatternContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = Java20Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.typePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java20Parser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_typePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePattern" ):
                listener.enterTypePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePattern" ):
                listener.exitTypePattern(self)




    def typePattern(self):

        localctx = Java20Parser.TypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_typePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.localVariableDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaExpression(self):
            return self.getTypedRuleContext(Java20Parser.LambdaExpressionContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(Java20Parser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = Java20Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_expression)
        try:
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.lambdaExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryNoNewArray(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryNoNewArrayContext,0)


        def arrayCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = Java20Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_primary)
        try:
            self.state = 2100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2098
                self.primaryNoNewArray()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2099
                self.arrayCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Java20Parser.LiteralContext,0)


        def pNNA(self):
            return self.getTypedRuleContext(Java20Parser.PNNAContext,0)


        def classLiteral(self):
            return self.getTypedRuleContext(Java20Parser.ClassLiteralContext,0)


        def THIS(self):
            return self.getToken(Java20Parser.THIS, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def unqualifiedClassInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnqualifiedClassInstanceCreationExpressionContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def arrayCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def LBRACK(self):
            return self.getToken(Java20Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Java20Parser.RBRACK, 0)

        def arrayCreationExpressionWithInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionWithInitializerContext,0)


        def methodName(self):
            return self.getTypedRuleContext(Java20Parser.MethodNameContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def COLONCOLON(self):
            return self.getToken(Java20Parser.COLONCOLON, 0)

        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def NEW(self):
            return self.getToken(Java20Parser.NEW, 0)

        def arrayType(self):
            return self.getTypedRuleContext(Java20Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_primaryNoNewArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray" ):
                listener.enterPrimaryNoNewArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray" ):
                listener.exitPrimaryNoNewArray(self)




    def primaryNoNewArray(self):

        localctx = Java20Parser.PrimaryNoNewArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_primaryNoNewArray)
        self._la = 0 # Token type
        try:
            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2102
                self.literal()
                self.state = 2104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.pNNA()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2106
                self.classLiteral()
                self.state = 2108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 2107
                    self.pNNA()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2110
                self.match(Java20Parser.THIS)
                self.state = 2112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 2111
                    self.pNNA()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2114
                self.typeName()
                self.state = 2115
                self.match(Java20Parser.DOT)
                self.state = 2116
                self.match(Java20Parser.THIS)
                self.state = 2118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2117
                    self.pNNA()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2120
                self.match(Java20Parser.LPAREN)
                self.state = 2121
                self.expression()
                self.state = 2122
                self.match(Java20Parser.RPAREN)
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2123
                    self.pNNA()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2126
                self.unqualifiedClassInstanceCreationExpression()
                self.state = 2128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 2127
                    self.pNNA()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2130
                self.expressionName()
                self.state = 2131
                self.match(Java20Parser.DOT)
                self.state = 2132
                self.unqualifiedClassInstanceCreationExpression()
                self.state = 2134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2133
                    self.pNNA()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2136
                self.arrayCreationExpression()
                self.state = 2137
                self.match(Java20Parser.DOT)
                self.state = 2138
                self.unqualifiedClassInstanceCreationExpression()
                self.state = 2140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 2139
                    self.pNNA()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2142
                self.arrayCreationExpression()
                self.state = 2143
                self.match(Java20Parser.DOT)
                self.state = 2144
                self.identifier()
                self.state = 2146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 2145
                    self.pNNA()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2148
                self.match(Java20Parser.SUPER)
                self.state = 2149
                self.match(Java20Parser.DOT)
                self.state = 2150
                self.identifier()
                self.state = 2152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 2151
                    self.pNNA()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2154
                self.typeName()
                self.state = 2155
                self.match(Java20Parser.DOT)
                self.state = 2156
                self.match(Java20Parser.SUPER)
                self.state = 2157
                self.match(Java20Parser.DOT)
                self.state = 2158
                self.identifier()
                self.state = 2160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2159
                    self.pNNA()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2162
                self.expressionName()
                self.state = 2163
                self.match(Java20Parser.LBRACK)
                self.state = 2164
                self.expression()
                self.state = 2165
                self.match(Java20Parser.RBRACK)
                self.state = 2167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 2166
                    self.pNNA()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2169
                self.arrayCreationExpressionWithInitializer()
                self.state = 2170
                self.match(Java20Parser.LBRACK)
                self.state = 2171
                self.expression()
                self.state = 2172
                self.match(Java20Parser.RBRACK)
                self.state = 2174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 2173
                    self.pNNA()


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2176
                self.methodName()
                self.state = 2177
                self.match(Java20Parser.LPAREN)
                self.state = 2179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2178
                    self.argumentList()


                self.state = 2181
                self.match(Java20Parser.RPAREN)
                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2182
                    self.pNNA()


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2185
                self.typeName()
                self.state = 2186
                self.match(Java20Parser.DOT)
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2187
                    self.typeArguments()


                self.state = 2190
                self.identifier()
                self.state = 2191
                self.match(Java20Parser.LPAREN)
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2192
                    self.argumentList()


                self.state = 2195
                self.match(Java20Parser.RPAREN)
                self.state = 2197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2196
                    self.pNNA()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2199
                self.expressionName()
                self.state = 2200
                self.match(Java20Parser.DOT)
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2201
                    self.typeArguments()


                self.state = 2204
                self.identifier()
                self.state = 2205
                self.match(Java20Parser.LPAREN)
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2206
                    self.argumentList()


                self.state = 2209
                self.match(Java20Parser.RPAREN)
                self.state = 2211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2210
                    self.pNNA()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2213
                self.arrayCreationExpression()
                self.state = 2214
                self.match(Java20Parser.DOT)
                self.state = 2216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2215
                    self.typeArguments()


                self.state = 2218
                self.identifier()
                self.state = 2219
                self.match(Java20Parser.LPAREN)
                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2220
                    self.argumentList()


                self.state = 2223
                self.match(Java20Parser.RPAREN)
                self.state = 2225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 2224
                    self.pNNA()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2227
                self.match(Java20Parser.SUPER)
                self.state = 2228
                self.match(Java20Parser.DOT)
                self.state = 2230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2229
                    self.typeArguments()


                self.state = 2232
                self.identifier()
                self.state = 2233
                self.match(Java20Parser.LPAREN)
                self.state = 2235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2234
                    self.argumentList()


                self.state = 2237
                self.match(Java20Parser.RPAREN)
                self.state = 2239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2238
                    self.pNNA()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2241
                self.typeName()
                self.state = 2242
                self.match(Java20Parser.DOT)
                self.state = 2243
                self.match(Java20Parser.SUPER)
                self.state = 2244
                self.match(Java20Parser.DOT)
                self.state = 2246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2245
                    self.typeArguments()


                self.state = 2248
                self.identifier()
                self.state = 2249
                self.match(Java20Parser.LPAREN)
                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2250
                    self.argumentList()


                self.state = 2253
                self.match(Java20Parser.RPAREN)
                self.state = 2255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 2254
                    self.pNNA()


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2257
                self.expressionName()
                self.state = 2258
                self.match(Java20Parser.COLONCOLON)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2259
                    self.typeArguments()


                self.state = 2262
                self.identifier()
                self.state = 2264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2263
                    self.pNNA()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2266
                self.arrayCreationExpression()
                self.state = 2267
                self.match(Java20Parser.COLONCOLON)
                self.state = 2269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2268
                    self.typeArguments()


                self.state = 2271
                self.identifier()
                self.state = 2273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2272
                    self.pNNA()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2275
                self.referenceType()
                self.state = 2276
                self.match(Java20Parser.COLONCOLON)
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2277
                    self.typeArguments()


                self.state = 2280
                self.identifier()
                self.state = 2282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2281
                    self.pNNA()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2284
                self.match(Java20Parser.SUPER)
                self.state = 2285
                self.match(Java20Parser.COLONCOLON)
                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2286
                    self.typeArguments()


                self.state = 2289
                self.identifier()
                self.state = 2291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2290
                    self.pNNA()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2293
                self.typeName()
                self.state = 2294
                self.match(Java20Parser.DOT)
                self.state = 2295
                self.match(Java20Parser.SUPER)
                self.state = 2296
                self.match(Java20Parser.COLONCOLON)
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2297
                    self.typeArguments()


                self.state = 2300
                self.identifier()
                self.state = 2302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 2301
                    self.pNNA()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2304
                self.classType()
                self.state = 2305
                self.match(Java20Parser.COLONCOLON)
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2306
                    self.typeArguments()


                self.state = 2309
                self.match(Java20Parser.NEW)
                self.state = 2311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2310
                    self.pNNA()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2313
                self.arrayType()
                self.state = 2314
                self.match(Java20Parser.COLONCOLON)
                self.state = 2315
                self.match(Java20Parser.NEW)
                self.state = 2317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 2316
                    self.pNNA()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PNNAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def unqualifiedClassInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnqualifiedClassInstanceCreationExpressionContext,0)


        def pNNA(self):
            return self.getTypedRuleContext(Java20Parser.PNNAContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def LBRACK(self):
            return self.getToken(Java20Parser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(Java20Parser.RBRACK, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def COLONCOLON(self):
            return self.getToken(Java20Parser.COLONCOLON, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_pNNA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPNNA" ):
                listener.enterPNNA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPNNA" ):
                listener.exitPNNA(self)




    def pNNA(self):

        localctx = Java20Parser.PNNAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_pNNA)
        self._la = 0 # Token type
        try:
            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2321
                self.match(Java20Parser.DOT)
                self.state = 2322
                self.unqualifiedClassInstanceCreationExpression()
                self.state = 2324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2323
                    self.pNNA()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2326
                self.match(Java20Parser.DOT)
                self.state = 2327
                self.identifier()
                self.state = 2329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2328
                    self.pNNA()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2331
                self.match(Java20Parser.LBRACK)
                self.state = 2332
                self.expression()
                self.state = 2333
                self.match(Java20Parser.RBRACK)
                self.state = 2335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 2334
                    self.pNNA()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2337
                self.match(Java20Parser.DOT)
                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2338
                    self.typeArguments()


                self.state = 2341
                self.identifier()
                self.state = 2342
                self.match(Java20Parser.LPAREN)
                self.state = 2344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2343
                    self.argumentList()


                self.state = 2346
                self.match(Java20Parser.RPAREN)
                self.state = 2348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 2347
                    self.pNNA()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2350
                self.match(Java20Parser.COLONCOLON)
                self.state = 2352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2351
                    self.typeArguments()


                self.state = 2354
                self.identifier()
                self.state = 2356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2355
                    self.pNNA()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def CLASS(self):
            return self.getToken(Java20Parser.CLASS, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.LBRACK)
            else:
                return self.getToken(Java20Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.RBRACK)
            else:
                return self.getToken(Java20Parser.RBRACK, i)

        def numericType(self):
            return self.getTypedRuleContext(Java20Parser.NumericTypeContext,0)


        def BOOLEAN(self):
            return self.getToken(Java20Parser.BOOLEAN, 0)

        def VOID(self):
            return self.getToken(Java20Parser.VOID, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_classLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassLiteral" ):
                listener.enterClassLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassLiteral" ):
                listener.exitClassLiteral(self)




    def classLiteral(self):

        localctx = Java20Parser.ClassLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_classLiteral)
        self._la = 0 # Token type
        try:
            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2360
                self.typeName()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 2361
                    self.match(Java20Parser.LBRACK)
                    self.state = 2362
                    self.match(Java20Parser.RBRACK)
                    self.state = 2367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2368
                self.match(Java20Parser.DOT)
                self.state = 2369
                self.match(Java20Parser.CLASS)
                pass
            elif token in [22, 25, 31, 37, 44, 46, 54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2371
                self.numericType()
                self.state = 2376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 2372
                    self.match(Java20Parser.LBRACK)
                    self.state = 2373
                    self.match(Java20Parser.RBRACK)
                    self.state = 2378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2379
                self.match(Java20Parser.DOT)
                self.state = 2380
                self.match(Java20Parser.CLASS)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2382
                self.match(Java20Parser.BOOLEAN)
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 2383
                    self.match(Java20Parser.LBRACK)
                    self.state = 2384
                    self.match(Java20Parser.RBRACK)
                    self.state = 2389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2390
                self.match(Java20Parser.DOT)
                self.state = 2391
                self.match(Java20Parser.CLASS)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2392
                self.match(Java20Parser.VOID)
                self.state = 2393
                self.match(Java20Parser.DOT)
                self.state = 2394
                self.match(Java20Parser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInstanceCreationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedClassInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnqualifiedClassInstanceCreationExpressionContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classInstanceCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInstanceCreationExpression" ):
                listener.enterClassInstanceCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInstanceCreationExpression" ):
                listener.exitClassInstanceCreationExpression(self)




    def classInstanceCreationExpression(self):

        localctx = Java20Parser.ClassInstanceCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_classInstanceCreationExpression)
        try:
            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2397
                self.unqualifiedClassInstanceCreationExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2398
                self.expressionName()
                self.state = 2399
                self.match(Java20Parser.DOT)
                self.state = 2400
                self.unqualifiedClassInstanceCreationExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2402
                self.primary()
                self.state = 2403
                self.match(Java20Parser.DOT)
                self.state = 2404
                self.unqualifiedClassInstanceCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedClassInstanceCreationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java20Parser.NEW, 0)

        def classOrInterfaceTypeToInstantiate(self):
            return self.getTypedRuleContext(Java20Parser.ClassOrInterfaceTypeToInstantiateContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def classBody(self):
            return self.getTypedRuleContext(Java20Parser.ClassBodyContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unqualifiedClassInstanceCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedClassInstanceCreationExpression" ):
                listener.enterUnqualifiedClassInstanceCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedClassInstanceCreationExpression" ):
                listener.exitUnqualifiedClassInstanceCreationExpression(self)




    def unqualifiedClassInstanceCreationExpression(self):

        localctx = Java20Parser.UnqualifiedClassInstanceCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_unqualifiedClassInstanceCreationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(Java20Parser.NEW)
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 2409
                self.typeArguments()


            self.state = 2412
            self.classOrInterfaceTypeToInstantiate()
            self.state = 2413
            self.match(Java20Parser.LPAREN)
            self.state = 2415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                self.state = 2414
                self.argumentList()


            self.state = 2417
            self.match(Java20Parser.RPAREN)
            self.state = 2419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2418
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeToInstantiateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.IdentifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_classOrInterfaceTypeToInstantiate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceTypeToInstantiate" ):
                listener.enterClassOrInterfaceTypeToInstantiate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceTypeToInstantiate" ):
                listener.exitClassOrInterfaceTypeToInstantiate(self)




    def classOrInterfaceTypeToInstantiate(self):

        localctx = Java20Parser.ClassOrInterfaceTypeToInstantiateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_classOrInterfaceTypeToInstantiate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 2421
                self.annotation()
                self.state = 2426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2427
            self.identifier()
            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84:
                self.state = 2428
                self.match(Java20Parser.DOT)
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 2429
                    self.annotation()
                    self.state = 2434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2435
                self.identifier()
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==90:
                self.state = 2441
                self.typeArgumentsOrDiamond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def OACA(self):
            return self.getToken(Java20Parser.OACA, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = Java20Parser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 2446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2444
                self.typeArguments()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2445
                self.match(Java20Parser.OACA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayCreationExpressionWithoutInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionWithoutInitializerContext,0)


        def arrayCreationExpressionWithInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionWithInitializerContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_arrayCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)




    def arrayCreationExpression(self):

        localctx = Java20Parser.ArrayCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_arrayCreationExpression)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2448
                self.arrayCreationExpressionWithoutInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2449
                self.arrayCreationExpressionWithInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreationExpressionWithoutInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java20Parser.NEW, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(Java20Parser.PrimitiveTypeContext,0)


        def dimExprs(self):
            return self.getTypedRuleContext(Java20Parser.DimExprsContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_arrayCreationExpressionWithoutInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpressionWithoutInitializer" ):
                listener.enterArrayCreationExpressionWithoutInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpressionWithoutInitializer" ):
                listener.exitArrayCreationExpressionWithoutInitializer(self)




    def arrayCreationExpressionWithoutInitializer(self):

        localctx = Java20Parser.ArrayCreationExpressionWithoutInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_arrayCreationExpressionWithoutInitializer)
        try:
            self.state = 2464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.match(Java20Parser.NEW)
                self.state = 2453
                self.primitiveType()
                self.state = 2454
                self.dimExprs()
                self.state = 2456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2455
                    self.dims()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2458
                self.match(Java20Parser.NEW)
                self.state = 2459
                self.classType()
                self.state = 2460
                self.dimExprs()
                self.state = 2462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2461
                    self.dims()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreationExpressionWithInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java20Parser.NEW, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(Java20Parser.PrimitiveTypeContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java20Parser.DimsContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayInitializerContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java20Parser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_arrayCreationExpressionWithInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpressionWithInitializer" ):
                listener.enterArrayCreationExpressionWithInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpressionWithInitializer" ):
                listener.exitArrayCreationExpressionWithInitializer(self)




    def arrayCreationExpressionWithInitializer(self):

        localctx = Java20Parser.ArrayCreationExpressionWithInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_arrayCreationExpressionWithInitializer)
        try:
            self.state = 2476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2466
                self.match(Java20Parser.NEW)
                self.state = 2467
                self.primitiveType()
                self.state = 2468
                self.dims()
                self.state = 2469
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2471
                self.match(Java20Parser.NEW)
                self.state = 2472
                self.classOrInterfaceType()
                self.state = 2473
                self.dims()
                self.state = 2474
                self.arrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.DimExprContext)
            else:
                return self.getTypedRuleContext(Java20Parser.DimExprContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_dimExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExprs" ):
                listener.enterDimExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExprs" ):
                listener.exitDimExprs(self)




    def dimExprs(self):

        localctx = Java20Parser.DimExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_dimExprs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2478
            self.dimExpr()
            self.state = 2482
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2479
                    self.dimExpr() 
                self.state = 2484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Java20Parser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(Java20Parser.RBRACK, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_dimExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExpr" ):
                listener.enterDimExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExpr" ):
                listener.exitDimExpr(self)




    def dimExpr(self):

        localctx = Java20Parser.DimExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_dimExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 2485
                self.annotation()
                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2491
            self.match(Java20Parser.LBRACK)
            self.state = 2492
            self.expression()
            self.state = 2493
            self.match(Java20Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def LBRACK(self):
            return self.getToken(Java20Parser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(Java20Parser.RBRACK, 0)

        def primaryNoNewArray(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryNoNewArrayContext,0)


        def arrayCreationExpressionWithInitializer(self):
            return self.getTypedRuleContext(Java20Parser.ArrayCreationExpressionWithInitializerContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = Java20Parser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_arrayAccess)
        try:
            self.state = 2510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2495
                self.expressionName()
                self.state = 2496
                self.match(Java20Parser.LBRACK)
                self.state = 2497
                self.expression()
                self.state = 2498
                self.match(Java20Parser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2500
                self.primaryNoNewArray()
                self.state = 2501
                self.match(Java20Parser.LBRACK)
                self.state = 2502
                self.expression()
                self.state = 2503
                self.match(Java20Parser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2505
                self.arrayCreationExpressionWithInitializer()
                self.state = 2506
                self.match(Java20Parser.LBRACK)
                self.state = 2507
                self.expression()
                self.state = 2508
                self.match(Java20Parser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_fieldAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccess" ):
                listener.enterFieldAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccess" ):
                listener.exitFieldAccess(self)




    def fieldAccess(self):

        localctx = Java20Parser.FieldAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_fieldAccess)
        try:
            self.state = 2525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2512
                self.primary()
                self.state = 2513
                self.match(Java20Parser.DOT)
                self.state = 2514
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2516
                self.match(Java20Parser.SUPER)
                self.state = 2517
                self.match(Java20Parser.DOT)
                self.state = 2518
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2519
                self.typeName()
                self.state = 2520
                self.match(Java20Parser.DOT)
                self.state = 2521
                self.match(Java20Parser.SUPER)
                self.state = 2522
                self.match(Java20Parser.DOT)
                self.state = 2523
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(Java20Parser.MethodNameContext,0)


        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(Java20Parser.ArgumentListContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.DOT)
            else:
                return self.getToken(Java20Parser.DOT, i)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_methodInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvocation" ):
                listener.enterMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvocation" ):
                listener.exitMethodInvocation(self)




    def methodInvocation(self):

        localctx = Java20Parser.MethodInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_methodInvocation)
        self._la = 0 # Token type
        try:
            self.state = 2596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2527
                self.methodName()
                self.state = 2528
                self.match(Java20Parser.LPAREN)
                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2529
                    self.argumentList()


                self.state = 2532
                self.match(Java20Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2534
                self.typeName()
                self.state = 2535
                self.match(Java20Parser.DOT)
                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2536
                    self.typeArguments()


                self.state = 2539
                self.identifier()
                self.state = 2540
                self.match(Java20Parser.LPAREN)
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2541
                    self.argumentList()


                self.state = 2544
                self.match(Java20Parser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2546
                self.expressionName()
                self.state = 2547
                self.match(Java20Parser.DOT)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2548
                    self.typeArguments()


                self.state = 2551
                self.identifier()
                self.state = 2552
                self.match(Java20Parser.LPAREN)
                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2553
                    self.argumentList()


                self.state = 2556
                self.match(Java20Parser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2558
                self.primary()
                self.state = 2559
                self.match(Java20Parser.DOT)
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2560
                    self.typeArguments()


                self.state = 2563
                self.identifier()
                self.state = 2564
                self.match(Java20Parser.LPAREN)
                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2565
                    self.argumentList()


                self.state = 2568
                self.match(Java20Parser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2570
                self.match(Java20Parser.SUPER)
                self.state = 2571
                self.match(Java20Parser.DOT)
                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2572
                    self.typeArguments()


                self.state = 2575
                self.identifier()
                self.state = 2576
                self.match(Java20Parser.LPAREN)
                self.state = 2578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2577
                    self.argumentList()


                self.state = 2580
                self.match(Java20Parser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2582
                self.typeName()
                self.state = 2583
                self.match(Java20Parser.DOT)
                self.state = 2584
                self.match(Java20Parser.SUPER)
                self.state = 2585
                self.match(Java20Parser.DOT)
                self.state = 2587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2586
                    self.typeArguments()


                self.state = 2589
                self.identifier()
                self.state = 2590
                self.match(Java20Parser.LPAREN)
                self.state = 2592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1603651042876325870) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 288232437939441649) != 0):
                    self.state = 2591
                    self.argumentList()


                self.state = 2594
                self.match(Java20Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java20Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = Java20Parser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.expression()
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 2599
                self.match(Java20Parser.COMMA)
                self.state = 2600
                self.expression()
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def COLONCOLON(self):
            return self.getToken(Java20Parser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Java20Parser.TypeArgumentsContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def SUPER(self):
            return self.getToken(Java20Parser.SUPER, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java20Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java20Parser.DOT, 0)

        def classType(self):
            return self.getTypedRuleContext(Java20Parser.ClassTypeContext,0)


        def NEW(self):
            return self.getToken(Java20Parser.NEW, 0)

        def arrayType(self):
            return self.getTypedRuleContext(Java20Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_methodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReference" ):
                listener.enterMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReference" ):
                listener.exitMethodReference(self)




    def methodReference(self):

        localctx = Java20Parser.MethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_methodReference)
        self._la = 0 # Token type
        try:
            self.state = 2653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2606
                self.expressionName()
                self.state = 2607
                self.match(Java20Parser.COLONCOLON)
                self.state = 2609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2608
                    self.typeArguments()


                self.state = 2611
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2613
                self.primary()
                self.state = 2614
                self.match(Java20Parser.COLONCOLON)
                self.state = 2616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2615
                    self.typeArguments()


                self.state = 2618
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2620
                self.referenceType()
                self.state = 2621
                self.match(Java20Parser.COLONCOLON)
                self.state = 2623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2622
                    self.typeArguments()


                self.state = 2625
                self.identifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2627
                self.match(Java20Parser.SUPER)
                self.state = 2628
                self.match(Java20Parser.COLONCOLON)
                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2629
                    self.typeArguments()


                self.state = 2632
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2633
                self.typeName()
                self.state = 2634
                self.match(Java20Parser.DOT)
                self.state = 2635
                self.match(Java20Parser.SUPER)
                self.state = 2636
                self.match(Java20Parser.COLONCOLON)
                self.state = 2638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2637
                    self.typeArguments()


                self.state = 2640
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2642
                self.classType()
                self.state = 2643
                self.match(Java20Parser.COLONCOLON)
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 2644
                    self.typeArguments()


                self.state = 2647
                self.match(Java20Parser.NEW)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2649
                self.arrayType()
                self.state = 2650
                self.match(Java20Parser.COLONCOLON)
                self.state = 2651
                self.match(Java20Parser.NEW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Java20Parser.PrimaryContext,0)


        def pfE(self):
            return self.getTypedRuleContext(Java20Parser.PfEContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = Java20Parser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_postfixExpression)
        try:
            self.state = 2663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2655
                self.primary()
                self.state = 2657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2656
                    self.pfE()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2659
                self.expressionName()
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                if la_ == 1:
                    self.state = 2660
                    self.pfE()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PfEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(Java20Parser.INC, 0)

        def pfE(self):
            return self.getTypedRuleContext(Java20Parser.PfEContext,0)


        def DEC(self):
            return self.getToken(Java20Parser.DEC, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_pfE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPfE" ):
                listener.enterPfE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPfE" ):
                listener.exitPfE(self)




    def pfE(self):

        localctx = Java20Parser.PfEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_pfE)
        try:
            self.state = 2673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2665
                self.match(Java20Parser.INC)
                self.state = 2667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2666
                    self.pfE()


                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2669
                self.match(Java20Parser.DEC)
                self.state = 2671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2670
                    self.pfE()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostIncrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java20Parser.PostfixExpressionContext,0)


        def INC(self):
            return self.getToken(Java20Parser.INC, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_postIncrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)




    def postIncrementExpression(self):

        localctx = Java20Parser.PostIncrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_postIncrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            self.postfixExpression()
            self.state = 2676
            self.match(Java20Parser.INC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostDecrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java20Parser.PostfixExpressionContext,0)


        def DEC(self):
            return self.getToken(Java20Parser.DEC, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_postDecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecrementExpression" ):
                listener.enterPostDecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecrementExpression" ):
                listener.exitPostDecrementExpression(self)




    def postDecrementExpression(self):

        localctx = Java20Parser.PostDecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_postDecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.postfixExpression()
            self.state = 2679
            self.match(Java20Parser.DEC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preIncrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PreIncrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(Java20Parser.PreDecrementExpressionContext,0)


        def ADD(self):
            return self.getToken(Java20Parser.ADD, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def SUB(self):
            return self.getToken(Java20Parser.SUB, 0)

        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionNotPlusMinusContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = Java20Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_unaryExpression)
        try:
            self.state = 2688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2681
                self.preIncrementExpression()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2682
                self.preDecrementExpression()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2683
                self.match(Java20Parser.ADD)
                self.state = 2684
                self.unaryExpression()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2685
                self.match(Java20Parser.SUB)
                self.state = 2686
                self.unaryExpression()
                pass
            elif token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 31, 37, 44, 46, 48, 54, 57, 58, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 86, 91, 92, 123]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2687
                self.unaryExpressionNotPlusMinus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreIncrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(Java20Parser.INC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_preIncrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)




    def preIncrementExpression(self):

        localctx = Java20Parser.PreIncrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_preIncrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2690
            self.match(Java20Parser.INC)
            self.state = 2691
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreDecrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC(self):
            return self.getToken(Java20Parser.DEC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_preDecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecrementExpression" ):
                listener.enterPreDecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecrementExpression" ):
                listener.exitPreDecrementExpression(self)




    def preDecrementExpression(self):

        localctx = Java20Parser.PreDecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_preDecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693
            self.match(Java20Parser.DEC)
            self.state = 2694
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionNotPlusMinusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java20Parser.PostfixExpressionContext,0)


        def TILDE(self):
            return self.getToken(Java20Parser.TILDE, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def BANG(self):
            return self.getToken(Java20Parser.BANG, 0)

        def castExpression(self):
            return self.getTypedRuleContext(Java20Parser.CastExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(Java20Parser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_unaryExpressionNotPlusMinus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionNotPlusMinus" ):
                listener.enterUnaryExpressionNotPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionNotPlusMinus" ):
                listener.exitUnaryExpressionNotPlusMinus(self)




    def unaryExpressionNotPlusMinus(self):

        localctx = Java20Parser.UnaryExpressionNotPlusMinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_unaryExpressionNotPlusMinus)
        try:
            self.state = 2703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2696
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                self.match(Java20Parser.TILDE)
                self.state = 2698
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2699
                self.match(Java20Parser.BANG)
                self.state = 2700
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2701
                self.castExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2702
                self.switchExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(Java20Parser.PrimitiveTypeContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionNotPlusMinusContext,0)


        def additionalBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.AdditionalBoundContext)
            else:
                return self.getTypedRuleContext(Java20Parser.AdditionalBoundContext,i)


        def lambdaExpression(self):
            return self.getTypedRuleContext(Java20Parser.LambdaExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = Java20Parser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 2732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2705
                self.match(Java20Parser.LPAREN)
                self.state = 2706
                self.primitiveType()
                self.state = 2707
                self.match(Java20Parser.RPAREN)
                self.state = 2708
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2710
                self.match(Java20Parser.LPAREN)
                self.state = 2711
                self.referenceType()
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 2712
                    self.additionalBound()
                    self.state = 2717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2718
                self.match(Java20Parser.RPAREN)
                self.state = 2719
                self.unaryExpressionNotPlusMinus()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2721
                self.match(Java20Parser.LPAREN)
                self.state = 2722
                self.referenceType()
                self.state = 2726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 2723
                    self.additionalBound()
                    self.state = 2728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2729
                self.match(Java20Parser.RPAREN)
                self.state = 2730
                self.lambdaExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(Java20Parser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(Java20Parser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(Java20Parser.MUL, 0)

        def DIV(self):
            return self.getToken(Java20Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Java20Parser.MOD, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 452
        self.enterRecursionRule(localctx, 452, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2735
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                    if la_ == 1:
                        localctx = Java20Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2737
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2738
                        self.match(Java20Parser.MUL)
                        self.state = 2739
                        self.unaryExpression()
                        pass

                    elif la_ == 2:
                        localctx = Java20Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2740
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2741
                        self.match(Java20Parser.DIV)
                        self.state = 2742
                        self.unaryExpression()
                        pass

                    elif la_ == 3:
                        localctx = Java20Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2743
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2744
                        self.match(Java20Parser.MOD)
                        self.state = 2745
                        self.unaryExpression()
                        pass

             
                self.state = 2750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(Java20Parser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(Java20Parser.AdditiveExpressionContext,0)


        def ADD(self):
            return self.getToken(Java20Parser.ADD, 0)

        def SUB(self):
            return self.getToken(Java20Parser.SUB, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 454
        self.enterRecursionRule(localctx, 454, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2752
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2762
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2760
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                    if la_ == 1:
                        localctx = Java20Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 2754
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2755
                        self.match(Java20Parser.ADD)
                        self.state = 2756
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java20Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 2757
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2758
                        self.match(Java20Parser.SUB)
                        self.state = 2759
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 2764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(Java20Parser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(Java20Parser.ShiftExpressionContext,0)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.LT)
            else:
                return self.getToken(Java20Parser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.GT)
            else:
                return self.getToken(Java20Parser.GT, i)

        def getRuleIndex(self):
            return Java20Parser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 456
        self.enterRecursionRule(localctx, 456, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2781
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                    if la_ == 1:
                        localctx = Java20Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2768
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2769
                        self.match(Java20Parser.LT)
                        self.state = 2770
                        self.match(Java20Parser.LT)
                        self.state = 2771
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java20Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2772
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2773
                        self.match(Java20Parser.GT)
                        self.state = 2774
                        self.match(Java20Parser.GT)
                        self.state = 2775
                        self.additiveExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = Java20Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2776
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2777
                        self.match(Java20Parser.GT)
                        self.state = 2778
                        self.match(Java20Parser.GT)
                        self.state = 2779
                        self.match(Java20Parser.GT)
                        self.state = 2780
                        self.additiveExpression(0)
                        pass

             
                self.state = 2785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(Java20Parser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(Java20Parser.RelationalExpressionContext,0)


        def LT(self):
            return self.getToken(Java20Parser.LT, 0)

        def GT(self):
            return self.getToken(Java20Parser.GT, 0)

        def LE(self):
            return self.getToken(Java20Parser.LE, 0)

        def GE(self):
            return self.getToken(Java20Parser.GE, 0)

        def INSTANCEOF(self):
            return self.getToken(Java20Parser.INSTANCEOF, 0)

        def referenceType(self):
            return self.getTypedRuleContext(Java20Parser.ReferenceTypeContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Java20Parser.PatternContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 458
        self.enterRecursionRule(localctx, 458, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2787
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2807
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                    if la_ == 1:
                        localctx = Java20Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2789
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2790
                        self.match(Java20Parser.LT)
                        self.state = 2791
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java20Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2792
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2793
                        self.match(Java20Parser.GT)
                        self.state = 2794
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = Java20Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2795
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2796
                        self.match(Java20Parser.LE)
                        self.state = 2797
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = Java20Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2798
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2799
                        self.match(Java20Parser.GE)
                        self.state = 2800
                        self.shiftExpression(0)
                        pass

                    elif la_ == 5:
                        localctx = Java20Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2801
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2802
                        self.match(Java20Parser.INSTANCEOF)
                        self.state = 2805
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                        if la_ == 1:
                            self.state = 2803
                            self.referenceType()
                            pass

                        elif la_ == 2:
                            self.state = 2804
                            self.pattern()
                            pass


                        pass

             
                self.state = 2811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(Java20Parser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(Java20Parser.EqualityExpressionContext,0)


        def EQUAL(self):
            return self.getToken(Java20Parser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(Java20Parser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 460
        self.enterRecursionRule(localctx, 460, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2823
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2821
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                    if la_ == 1:
                        localctx = Java20Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 2815
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2816
                        self.match(Java20Parser.EQUAL)
                        self.state = 2817
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java20Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 2818
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2819
                        self.match(Java20Parser.NOTEQUAL)
                        self.state = 2820
                        self.relationalExpression(0)
                        pass

             
                self.state = 2825
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(Java20Parser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(Java20Parser.AndExpressionContext,0)


        def BITAND(self):
            return self.getToken(Java20Parser.BITAND, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)



    def andExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 462
        self.enterRecursionRule(localctx, 462, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java20Parser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 2829
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2830
                    self.match(Java20Parser.BITAND)
                    self.state = 2831
                    self.equalityExpression(0) 
                self.state = 2836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(Java20Parser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.ExclusiveOrExpressionContext,0)


        def CARET(self):
            return self.getToken(Java20Parser.CARET, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)



    def exclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 464
        self.enterRecursionRule(localctx, 464, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2838
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java20Parser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 2840
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2841
                    self.match(Java20Parser.CARET)
                    self.state = 2842
                    self.andExpression(0) 
                self.state = 2847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.InclusiveOrExpressionContext,0)


        def BITOR(self):
            return self.getToken(Java20Parser.BITOR, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)



    def inclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 466
        self.enterRecursionRule(localctx, 466, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2849
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java20Parser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 2851
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2852
                    self.match(Java20Parser.BITOR)
                    self.state = 2853
                    self.exclusiveOrExpression(0) 
                self.state = 2858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.InclusiveOrExpressionContext,0)


        def conditionalAndExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalAndExpressionContext,0)


        def AND(self):
            return self.getToken(Java20Parser.AND, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_conditionalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAndExpression" ):
                listener.enterConditionalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAndExpression" ):
                listener.exitConditionalAndExpression(self)



    def conditionalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.ConditionalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 468
        self.enterRecursionRule(localctx, 468, self.RULE_conditionalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2860
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java20Parser.ConditionalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_conditionalAndExpression)
                    self.state = 2862
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2863
                    self.match(Java20Parser.AND)
                    self.state = 2864
                    self.inclusiveOrExpression(0) 
                self.state = 2869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalAndExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalAndExpressionContext,0)


        def conditionalOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalOrExpressionContext,0)


        def OR(self):
            return self.getToken(Java20Parser.OR, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_conditionalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOrExpression" ):
                listener.enterConditionalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOrExpression" ):
                listener.exitConditionalOrExpression(self)



    def conditionalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java20Parser.ConditionalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 470
        self.enterRecursionRule(localctx, 470, self.RULE_conditionalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2871
            self.conditionalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java20Parser.ConditionalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_conditionalOrExpression)
                    self.state = 2873
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2874
                    self.match(Java20Parser.OR)
                    self.state = 2875
                    self.conditionalAndExpression(0) 
                self.state = 2880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalOrExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalOrExpressionContext,0)


        def QUESTION(self):
            return self.getToken(Java20Parser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(Java20Parser.COLON, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalExpressionContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(Java20Parser.LambdaExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = Java20Parser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_conditionalExpression)
        try:
            self.state = 2894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2881
                self.conditionalOrExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2882
                self.conditionalOrExpression(0)
                self.state = 2883
                self.match(Java20Parser.QUESTION)
                self.state = 2884
                self.expression()
                self.state = 2885
                self.match(Java20Parser.COLON)
                self.state = 2886
                self.conditionalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2888
                self.conditionalOrExpression(0)
                self.state = 2889
                self.match(Java20Parser.QUESTION)
                self.state = 2890
                self.expression()
                self.state = 2891
                self.match(Java20Parser.COLON)
                self.state = 2892
                self.lambdaExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java20Parser.ConditionalExpressionContext,0)


        def assignment(self):
            return self.getTypedRuleContext(Java20Parser.AssignmentContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = Java20Parser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_assignmentExpression)
        try:
            self.state = 2898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2896
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2897
                self.assignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftHandSide(self):
            return self.getTypedRuleContext(Java20Parser.LeftHandSideContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(Java20Parser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = Java20Parser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.leftHandSide()
            self.state = 2901
            self.assignmentOperator()
            self.state = 2902
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftHandSideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionNameContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(Java20Parser.FieldAccessContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(Java20Parser.ArrayAccessContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_leftHandSide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftHandSide" ):
                listener.enterLeftHandSide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftHandSide" ):
                listener.exitLeftHandSide(self)




    def leftHandSide(self):

        localctx = Java20Parser.LeftHandSideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_leftHandSide)
        try:
            self.state = 2907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2904
                self.expressionName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2905
                self.fieldAccess()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2906
                self.arrayAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(Java20Parser.ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(Java20Parser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Java20Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Java20Parser.MOD_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(Java20Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Java20Parser.SUB_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(Java20Parser.LSHIFT_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(Java20Parser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(Java20Parser.URSHIFT_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Java20Parser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Java20Parser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Java20Parser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = Java20Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2909
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 34342961153) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(Java20Parser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(Java20Parser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(Java20Parser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = Java20Parser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            self.lambdaParameters()
            self.state = 2912
            self.match(Java20Parser.ARROW)
            self.state = 2913
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def lambdaParameterList(self):
            return self.getTypedRuleContext(Java20Parser.LambdaParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Java20Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = Java20Parser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 2921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2915
                self.match(Java20Parser.LPAREN)
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18102533424938990) != 0) or _la==86 or _la==123:
                    self.state = 2916
                    self.lambdaParameterList()


                self.state = 2919
                self.match(Java20Parser.RPAREN)
                pass
            elif token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2920
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(Java20Parser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java20Parser.COMMA)
            else:
                return self.getToken(Java20Parser.COMMA, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameterList" ):
                listener.enterLambdaParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameterList" ):
                listener.exitLambdaParameterList(self)




    def lambdaParameterList(self):

        localctx = Java20Parser.LambdaParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_lambdaParameterList)
        self._la = 0 # Token type
        try:
            self.state = 2939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2923
                self.lambdaParameter()
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==83:
                    self.state = 2924
                    self.match(Java20Parser.COMMA)
                    self.state = 2925
                    self.lambdaParameter()
                    self.state = 2930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2931
                self.identifier()
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==83:
                    self.state = 2932
                    self.match(Java20Parser.COMMA)
                    self.state = 2933
                    self.identifier()
                    self.state = 2938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameterType(self):
            return self.getTypedRuleContext(Java20Parser.LambdaParameterTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java20Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java20Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java20Parser.VariableModifierContext,i)


        def variableArityParameter(self):
            return self.getTypedRuleContext(Java20Parser.VariableArityParameterContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)




    def lambdaParameter(self):

        localctx = Java20Parser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==35 or _la==86:
                    self.state = 2941
                    self.variableModifier()
                    self.state = 2946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2947
                self.lambdaParameterType()
                self.state = 2948
                self.variableDeclaratorId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2950
                self.variableArityParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java20Parser.UnannTypeContext,0)


        def VAR(self):
            return self.getToken(Java20Parser.VAR, 0)

        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaParameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameterType" ):
                listener.enterLambdaParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameterType" ):
                listener.exitLambdaParameterType(self)




    def lambdaParameterType(self):

        localctx = Java20Parser.LambdaParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_lambdaParameterType)
        try:
            self.state = 2955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2953
                self.unannType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2954
                self.match(Java20Parser.VAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(Java20Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = Java20Parser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_lambdaBody)
        try:
            self.state = 2959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 31, 37, 44, 46, 48, 54, 57, 58, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 86, 91, 92, 102, 103, 104, 105, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2957
                self.expression()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2958
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(Java20Parser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(Java20Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java20Parser.RPAREN, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(Java20Parser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)




    def switchExpression(self):

        localctx = Java20Parser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_switchExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            self.match(Java20Parser.SWITCH)
            self.state = 2962
            self.match(Java20Parser.LPAREN)
            self.state = 2963
            self.expression()
            self.state = 2964
            self.match(Java20Parser.RPAREN)
            self.state = 2965
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java20Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java20Parser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = Java20Parser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2967
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[226] = self.multiplicativeExpression_sempred
        self._predicates[227] = self.additiveExpression_sempred
        self._predicates[228] = self.shiftExpression_sempred
        self._predicates[229] = self.relationalExpression_sempred
        self._predicates[230] = self.equalityExpression_sempred
        self._predicates[231] = self.andExpression_sempred
        self._predicates[232] = self.exclusiveOrExpression_sempred
        self._predicates[233] = self.inclusiveOrExpression_sempred
        self._predicates[234] = self.conditionalAndExpression_sempred
        self._predicates[235] = self.conditionalOrExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx:AndExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx:ExclusiveOrExpressionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx:InclusiveOrExpressionContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def conditionalAndExpression_sempred(self, localctx:ConditionalAndExpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def conditionalOrExpression_sempred(self, localctx:ConditionalOrExpressionContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         




